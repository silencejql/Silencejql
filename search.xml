<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[新增ABS]]></title>
    <url>%2F%E6%96%B0%E5%A2%9EABS.html</url>
    <content type="text"><![CDATA[写在前面 前面啥也没有 准备文件 1、RBABS_xxx.dll 其中包含ABS通讯指令 软件更改0、备份程序1、替换BBK\Bin文件夹下的 RBABS_xxx.dll 文件2、新增车型信息如图新增该车型相关车型信息，复制其他车型更改即可3、新增ABS标准上图为DVT中动态ABS标准，制动台更改静态ABS标准Identity为该ABS的标识ABS类型内容咨询软件工程师4、新增ZTS复制其他车型后更改ZTS更改车型参数更改动态ABS标准5、配置串口复制其他CAN或K线配置，更改KeyName为3中的ABS类型Param1为串口号、Param3为输出LOG的文件名说明：该步骤若未提前更改，测试中会自动创建并使用默认串口号导致通讯失败，依据其他车型的配置更改串口号等即可。 6、更改Config\ABSValveTestConfig中当前ABS类型文件中的增减压时间等进行优化]]></content>
  </entry>
  <entry>
    <title><![CDATA[中牟日产打印更改]]></title>
    <url>%2F%E4%B8%AD%E7%89%9F%E6%97%A5%E4%BA%A7%E6%89%93%E5%8D%B0%E6%9B%B4%E6%94%B9.html</url>
    <content type="text"><![CDATA[读取Excel保存数据库展开/折叠示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980void ReadAndSaveCarInfoFromExcel(string vin)&#123; try &#123; //string serverConnString = "$Npgsql$Database=LocalDB;Host=127.0.0.1;Port=5432;Username=postgres;Password=123"; string sql = string.Format("select * from [OBD检查表] where [VIN]='&#123;0&#125;' order by [测试时间] desc", vin); DbDataAdapter adap = BConnString.CreateDataAdapter(sql, serverConnString); DataTable dt = new DataTable(); adap.Fill(dt); DataRow dr = null; if (dt.Rows.Count &gt; 0) dr = dt.Rows[0]; else return; string VIDCode = dr["VID"].ToString(); // string vid = "1111111111111 SDFVDFSD---- SDAVV6515151 AFDFASFSA ASDFS S 20200707 SDFSF 111255544 " Regex re = new Regex(@"(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+)\s*"); Match match = re.Match(VIDCode); string CarEI = match.Groups[2].Value; string EngineNo = match.Groups[9].Value; if (EngineNo.Length == 0 || EngineNo == null) &#123; re = new Regex(@"(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+)\s*"); match = re.Match(VIDCode); EngineNo = match.Groups[8].Value; &#125; if (EngineNo.Length &lt; 4) &#123; re = new Regex(@"(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+)\s*"); match = re.Match(VIDCode); EngineNo = match.Groups[10].Value; &#125; //1909889 TYBGLCFDP0DXA---A L1234567891234567 1H5GPRCOP Y23A S 202008154 M9T M1014785 string carType = ""; string productEnterprise = ""; GetCarInfoByEI(CarEI, ref carType, ref productEnterprise); string sqlCarInfo = string.Format("select * from [OBD车型表] where [VIN]='&#123;0&#125;' order by [ID] desc", vin); DbDataAdapter adapCarInfo = BConnString.CreateDataAdapter(sqlCarInfo, serverConnString); DataTable dtCarInfo = new DataTable(); adapCarInfo.Fill(dtCarInfo); DataRow drCarInfo = null; if (dtCarInfo.Rows.Count &gt; 0) drCarInfo = dtCarInfo.Rows[0]; else drCarInfo = dtCarInfo.Rows.Add(); drCarInfo["VIN"] = vin; drCarInfo["发动机号"] = EngineNo; drCarInfo["Cartype车辆型号"] = carType; drCarInfo["车辆生产企业"] = productEnterprise; drCarInfo["更新时间"] = DateTime.Now; adapCarInfo.Update(dtCarInfo); &#125; catch (ExcelException ex) &#123; MessageBox.Show(ex.Message); &#125;&#125;void GetCarInfoByEI(string EI, ref string CarType, ref string ProductEnterprise)&#123; // connect Excel //string excelPath = @"D:\工作\现场工作文件整理\中牟日产\EI-车辆型号.xlsx"; string strConn = string.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source =&#123;0&#125;; Extended Properties = 'Excel 12.0; HDR=Yes; IMEX=0'", excelPath); DataSet ds = new DataSet(); OleDbConnection conn = new OleDbConnection(strConn); string sql = string.Format("select * from [Sheet1$] where [Code18/EI] like '%&#123;0&#125;%'", EI); OleDbDataAdapter oada = new OleDbDataAdapter(sql, conn); oada.Fill(ds); DataRow dr = null; if (ds.Tables[0].Rows.Count &gt; 0) dr = ds.Tables[0].Rows[0]; else &#123; MessageBox.Show("EI车辆型号Excel中没有当前车型，请检查"); return; &#125; CarType = dr["Cartype/车辆型号"].ToString(); ProductEnterprise = dr["生产企业"].ToString();&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Selenium WebDriver]]></title>
    <url>%2FSelenium%20WebDriver.html</url>
    <content type="text"><![CDATA[Selenium WebDriver 笔记 Selenium查找 UI 元素（web 元素）1234567891011121314151617181920212223&lt;div id="coolestWidgetEvah"&gt;...&lt;/div&gt;WebElement element = driver.findElement(By.id("coolestWidgetEvah"));&lt;div class="cheese"&gt;&lt;span&gt;Cheddar&lt;/span&gt;&lt;/div&gt;&lt;div class="cheese"&gt;&lt;span&gt;Gouda&lt;/span&gt;&lt;/div&gt;List&lt;WebElement&gt; cheeses = driver.findElements(By.className("cheese"));&lt;iframe src="..."&gt;&lt;/iframe&gt;WebElement frame = driver.findElement(By.tagName("iframe"));&lt;input name="cheese" type="text"/&gt;WebElement cheese = driver.findElement(By.name("cheese"));//By Link Text&lt;a href="http://www.google.com/search?q=cheese"&gt;cheese&lt;/a&gt;&gt;WebElement cheese = driver.findElement(By.linkText("cheese"));//By Partial Link Text&lt;a href="http://www.google.com/search?q=cheese"&gt;search for cheese&lt;/a&gt;&gt;WebElement cheese = driver.findElement(By.partialLinkText("cheese"));// By CSS&lt;div id="food"&gt;&lt;span class="dairy"&gt;milk&lt;/span&gt;&lt;span class="dairy aged"&gt;cheese&lt;/span&gt;&lt;/div&gt;WebElement cheese = driver.findElement(By.cssSelector("#food span.dairy.aged")); 用户输入 - 填充表单WebDriver 有一个叫 “Select” 的类，这个类提供了很多有用的方法用于 select 元素进行交互。 123Select select = new Select(driver.findElement(By.tagName("select")));select.deselectAll();select.selectByVisibleText("Edam"); 上述代码取消页面上第一个 select 元素的所有 option 的选中状态，然后选中字面值为 “Edam” 的 option。 如果你已经完成表单填充，你可能希望提交它，你只要找到 “submit” 按钮然后点击它即可。 driver.findElement(By.id(&quot;submit&quot;)).click();或者，你可以调用 WebDriver 为每个元素提供的 “submit” 方法。如果你对一个 form 元素调用该方法，WebDriver 将调用这个 form 的 submit 方法。如果这个元素不是一个 form，将抛出一个异常。element.submit(); 常用类与方法1234567891011121314151617181920212223from selenium import webdriver # 驱动浏览器from selenium.webdriver import ActionChains # 鼠标的相关操作，比如滑动验证from selenium.webdriver.common.by import By # 选择器，以什么方式选择标签元素from selenium.webdriver.common.keys import Keys # 键盘相关from selenium.webdriver.support import expected_conditions as EC # 各种判断，一般跟等待事件连用，比如说等待某个元素加载出来from selenium.webdriver.support.wait import WebDriverWait # 等待事件，可以与EC连用browser = webdriver.Chrome()wait = WebDriverWait(browser, 10)browser.get('https://www.baidu.com')browser.maximize_window() # 窗口最大化print(browser.current_url) # 获取当前页URLprint(browser.title) # 获取页面的titleprint(browser.name) # 获取driver对象：chromeprint(browser.current_window_handle) # 获取当前窗口print(browser.get_cookies()) # 获取cookiesprint(browser.page_source) # 获取当前页面内容browser.back() # 后退browser.forward() # 前进browser.refresh() # 刷新browser.save_screenshot('error.png') # 保存截图browser.close() # 关闭当前窗口browser.quit() # 退出浏览器驱动，关闭所有关联窗口 选择器1234567891011121314from selenium import webdriver # 驱动浏览器from selenium.webdriver.support.wait import WebDriverWait # 等待事件browser = webdriver.Chrome()wait = WebDriverWait(browser, 10)browser.get('https://www.baidu.com')browser.find_element_by_id('su') # id选择器browser.find_element_by_class_name('xx') # 类选择器，1个browser.find_elements_by_class_name('xx') # 类选择器，多个browser.find_element_by_link_text('xxx') # 链接文本选择器browser.find_element_by_xpath('xxxx') # xpath选择器browser.find_element_by_tag_name('h1') # 标签选择器，获取1个browser.find_elements_by_tag_name('h1') # 标签选择器，获取多个browser.find_element_by_css_selector('xxx') # 样式选择器 find_element_by_xpath测试网页的HTML代码 123456789101112131415161718192021&lt;html&gt; &lt;body&gt; &lt;div id="div1" style="text-align:center"&gt; &lt;img alt="div1-img1" src="http://www.sogou.com/images/logo/new/sogou.png" href="http://www.sogou.com"&gt;sogou image&lt;/img&gt;&lt;br /&gt; &lt;input name="div1input"&gt; &lt;a href="http://www.sogou.com"&gt;搜狗搜索&lt;/a&gt; &lt;input type="button" value="查询"&gt; &lt;/div&gt; &lt;br&gt; &lt;div id="div2" style="text-align:center"&gt; &lt;img alt="div2-img2" src="http://www.baidu.com/img/bdlogo.png" href="http://www.baidu.com"&gt;baidu image&lt;/img&gt;&lt;br /&gt; &lt;input name="div2input"&gt; &lt;a href="http://www.baidu.com"&gt;百度搜索&lt;/a&gt; &lt;input type="button" value="查询"&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# 1、绝对路径element = driver.find_element_by_xpath('/html/body/div/input[@value="查询"]')# 上述xpath定位表达式从html dom树的根节点（html节点）开始逐层查找，最后定位到“查询”按钮节点。路径表达式“/”表示跟节点。# 2、相对路径element = driver.find_element_by_xpath('//input[@value='查询']')# 上述xpath定位表达式中//表示从匹配选择的当前节点开始选择文档中的节点，而不考虑特面的位置。input[@value="查询"]表示定位value值为“查询”两个字的input页面元素。# 3、索引号定位元素element=driver.find_element_by_xpath("//input[1]")# 索引号定位方式是根据该页面元素在页面中相同标签名之间出现的索引位置来进行定位。上述xpath定位表达式表示查找页面中第二个出现的input元素，即被测试页面上的“查询”按钮。# 4、使用页面元素的属性值定位元素img = driver.find_element_by_xpath("//input[@alt='div1-img1' and @href='http://www.sogou.com']")# 表达式使用了相对路径再结合元素拥有的特定属性方法进行定位，定位元素img的属性是“alt”，值为“div1-img1”，使用@符号指明后面接的是属性，并同属性及属性值一起写到元素后的方括号中。# 5、模糊属性值定位元素elements=driver.find_elements_by_xpath("//img[starts-with(@alt,"div1")]")# 查找属性alt的属性值以div1关键字开始的页面元素elements=driver.find_elements_by_xpath("//img[contains(@alt,"img")]")# 查找alt属性的属性值包含img关键字的页面元素，只要包含即可，无需考虑位置# 6、使用xpath轴定位元素img = driver.find_element_by_xpath("//img[@alt='div2-img2']/parent::div")# 查找到属性alt的属性值为div2-img2的img元素，并基于该img元素的位置找到它上一级的div页面元素img = driver.find_element_by_xpath("//div[@id='div1']/child::img")# 查找到ID属性值为div1的div元素，并基于div的位置找到它下层节点中的img页面元素//img[@alt='div2-img2']/ancestor::div# 查找到属性alt的属性值为div2-img2的img元素，并基于该img元素的位置找到它上级的div元素//div[@name='div2']/descendant::img# 查找到属性name的属性值为div2的div元素，并基于该元素的位置找到它下级所有节点中的img页面元素//div[@id='div1']/following::img# 查找到ID属性值为div1的div页面元素，并基于div的位置找到它后面节点中的img页面元素//a[@href='http://www.sogou.com']/following-sibling::input# 查找到链接地址为http：//www.sogou.com的链接页面元素a，并基于链接的位置找到它后续兄弟节点中的input页面元素//img[@alt='div2-img2']/preceding::div# 查找到属性alt的属性值为div2-img2的图片页面元素img，并基于图片的位置找到它前面节点中的div页面元素//input[@value='查询']/preceding-sibling::a[1]# 查找到value属性值为“查询”的输入框页面元素，并基于该输入框的位置找到他前面同级节点中的第一个链接页面元素# 有时候我们会再轴后面加一个星号*， 便是通配符，如：//input[@value="查询"]/preceding::*，它表示查找属性value的值为“查询”的输入框input元素前面所有的同级元素，但不包括input元素本身# 7、页面元素的文本定位元素# 通过text()函数可以定位到元素文本包含某些关键内容的页面元素sogou_a=driver.find_element_by_xpath('//a[text()="搜狗搜索"]')sogou_a=driver.find_element_by_xpath('//a[.="搜狗搜索"]')# 查找文本内容为“搜狗搜索”的链接页面元素，使用的是精准匹配方式，也就是说文本内容必须完全匹配，不能多一个字也不能少一个字。第二个xpath语句中使用了以个点. 这里的点等价于text()，都指代的是当前节点的文本内容baidu_a=driver.find_element_by_xpath('//a[contains(.,"百度")]')baidu_a=driver.find_element_by_xpath('//a[contains(text(),'百度')]')# 查找文本内容包含“百度”关键字的链接页面元素，使用的是模糊匹配方式，即可以根据部分文本关键字进行匹配div=driver.find_element_by_xpath('//a[contains(text(),"百度")]/preceding::div')div=driver.find_element_by_xpath('//a[contains(. , "百度")]/..')# 查找文本内容包含“百度”关键字的链接页面元素a的上层父元素div，6最后使用了两个点。。，它表示选取当前节点的父节点，等价于preceding::div。 执行JavaScript1234from selenium import webdriver # 驱动浏览器browser = webdriver.Chrome()browser.get('https://www.zhihu.com/explore')browser.execute_script('alert("xxoo")')]]></content>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[刷网课随记]]></title>
    <url>%2F%E5%88%B7%E7%BD%91%E8%AF%BE%E9%9A%8F%E8%AE%B0.html</url>
    <content type="text"><![CDATA[写在前面 视频播放参数倍速播放document.querySelector(&#39;video&#39;).playbackRate = 4.0 爬虫执行脚本12js = "document.querySelector('video').playbackRate = 4.0"driver.execute_script(js) 下载视频课程模拟登录Webdriver12345678option = webdriver.ChromeOptions()driver = webdriver.Chrome(chrome_options=option)driver.get("https://www.bjjnts.cn/login")driver.find_element_by_name("username").send_keys("uesrname") #元素赋值模拟输入driver.find_element_by_name("password").send_keys("password")driver.find_element_by_xpath("//button[@class='login_btn' and @type='submit']").click() #登录按钮点击事件driver.get(url)return driver.page_source Cookie通过抓包拿到cookie，再将cookie放到header中请求即可 123456789101112131415driver.find_element_by_id('user').send_keys('用户账号')driver.find_element_by_id('pass').send_keys('用户密码')driver.find_element_by_xpath('//*[@id="submit"]').click()time.sleep(1)cookie = driver.get_cookies()cookiea = [item["name"] + "=" + item["value"] for item in cookie]cookiestr = '; '.join(item for item in cookiea)driver.close() #获取到登录cookie,就可以关闭窗口了return cookiestr# join说明str = "-";seq = ("a", "b", "c"); # 字符串序列print str.join( seq );输出: a-b-c 展开/折叠源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112# -*- coding: UTF-8 -*-# -*- coding: UTF-8 -*-import osimport reimport timeimport urllibfrom hashlib import md5import requestsfrom requests.exceptions import RequestExceptionfrom selenium import webdriverfrom bs4 import BeautifulSoupimport jsonfrom selenium.webdriver.common.keys import Keysfrom threading import Threaddef GetPageHtml(url): try: option = webdriver.ChromeOptions() driver = webdriver.Chrome(chrome_options=option) driver.get("https://www.bjjnts.cn/login") txt = driver.page_source # 设置默认编码为 utf-8 driver.find_element_by_name("username").send_keys("370831199309165413") driver.find_element_by_name("password").send_keys("bj123465") driver.find_element_by_xpath("//button[@class='login_btn' and @type='submit']").click() header = &#123;'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36','Referer':url&#125; time.sleep(2) driver.get(url) return driver.page_source #res = requests.get(url,headers = header) #if res.status_code == 200: #return res.text #return None except RequestException: return Nonedef ParseHtml(html): pattern = re.compile('&lt;video src="(.*?)"\sposter=',re.S) items = re.search(pattern,html) print(items.group(1)) return items.group(1)def ParseVideoHtml(html, name): root = "D://Downloads//" path = root + name + ".mp4" try: if not os.path.exists(root): os.mkdir(root) if not os.path.exists(path): r = requests.get(html) with open(path, 'wb') as f: f.write(r.content) f.close() print("文件保存成功") else: print("文件已存在") except: print("爬取失败")def read_config(): """"读取配置""" path = os.getcwd() if not os.path.exists(path): os.mkdir(path) if not os.path.isfile("config.json"): # 无文件时创建 with open("config.json", mode="w", encoding="utf-8") as jsonfile: jsonfile.write(json.dump(&#123;'url':'https://www.bjjnts.cn/lessonStudy/202/4268'&#125;),indent=4) jsonfile.close() with open("config.json") as json_file: config = json.load(json_file) return configdef main(): #html = "https://bjjnts-bd.xuetangx.com/4233125536dfb27e-10.mp4?auth_key=1596034097-0-0-f7f5072dec07ec43c1110ade3a8d412d" #ParseVideoHtml(html) #https://www.bjjnts.cn/login config = read_config() #html = "https://www.bjjnts.cn/lessonStudy/202/4268" html = config["url"] print(html) url = "https://www.bjjnts.cn/login" option = webdriver.ChromeOptions() driver = webdriver.Chrome(chrome_options=option) driver.get(url) txt = driver.page_source # 设置默认编码为 utf-8 driver.find_element_by_name("username").send_keys("370831199309165413") driver.find_element_by_name("password").send_keys("bj123465") driver.find_element_by_xpath("//button[@class='login_btn' and @type='submit']").click() header = &#123;'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36','Referer':url&#125; time.sleep(2) driver.get(html) videoNames = [] bsObj = BeautifulSoup(driver.page_source.replace('&amp;nbsp;', ' '), "lxml") VideoList = bsObj.findAll(class_="course_study_menubox") ##print(VideoList) i = 1 for video in VideoList: videoname = video.find("h4",class_="course_study_menutitle").get_text() ##driver.get(html) videoHtml = ParseHtml(driver.page_source) #th = Thread() ParseVideoHtml(videoHtml, videoname) time.sleep(2) i += 1 driver.find_element_by_xpath("//a[@class='change_chapter lesson-" + str(i) + "']").find_element_by_xpath('..').click() time.sleep(2) print(str(i)) #videoNames.append(video.find("h4",class_="course_study_menutitle").get_text()) #print(videoNames) #print(html)if __name__ == '__main__': main()]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio Code配置记录]]></title>
    <url>%2FVisual%20Studio%20Code%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html</url>
    <content type="text"><![CDATA[写在前面 前面啥也没有 插件已安装插件： Bracket Pair Colorizer Chinese (Simplified) Language compareit Dracula Official Git History GitLens Markdownlint Markdown All in One open in browser Python C# Vetur Python安装第三方库进入Python安装路径下的Scripts，执行 .\pip install requests如果在安装时报错：UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xd7 in position 9: ordinal not in range(128)修改位于Python的安装路径下的Lib\mimetypes.py文件,在import下添加如下几行代码： 123if sys.getdefaultencoding() != 'gbk': reload(sys)sys.setdefaultencoding('gbk') 展开/折叠示例 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[GAE AppID]]></title>
    <url>%2FGAE%20AppID.html</url>
    <content type="text"><![CDATA[写在前面 GAEProxy AppID 展开/折叠示例 1testpro-199603|mytestpro-233908|justinxxnet01|xxnet-1|xxnet-2|xxnet-3|xxnet-4|xxnet-5|xxnet-6|xxnet-7|xxnet-8|xxnet-9|xxnet-10|xxnet-11|xxnet-12|xxnet-13|xxnet-14|xxnet-15|xxnet-16|xxnet-17|xxnet-18|xxnet-19|xxnet-20|xxnet-21|xxnet-22|xxnet-23|xxnet-24|xxnet-25|xxnet-26|xxnet-27|xxnet-28|xxnet-29|xxnet-30|xxnet-31|xxnet-32|xxnet-33|xxnet-34|xxnet-35|xxnet-36|xxnet-37|xxnet-38|xxnet-39|xxnet-40|xxnet-41|xxnet-42|xxnet-43|xxnet-44|xxnet-45|xxnet-46|xxnet-47|xxnet-48|xxnet-49|xxnet-50|xxnet-51|xxnet-52|xxnet-53|xxnet-54|xxnet-55|xxnet-56|xxnet-57|xxnet-58|xxnet-59|xxnet-60|xxnet-61|xxnet-62|xxnet-63|xxnet-64|xxnet-65|xxnet-66|xxnet-67|xxnet-68|xxnet-69|xxnet-70|xxnet-71|xxnet-72|xxnet-72|xxnet-73|xxnet-74|xxnet-75|xxnet-76|xxnet-77|xxnet-78|xxnet-79|xxnet-80|xxnet-81|xxnet-82|xxnet-83|xxnet-84|xxnet-85|xxnet-86|xxnet-87|xxnet-88|xxnet-89|xxnet-90|xxnet-91|xxnet-92|xxnet-93|xxnet-94|xxnet-95|xxnet-96|xxnet-97|xxnet-98|xxnet-99|xxnet-100|xxnet-101|xxnet-102|xxnet-103|xxnet-104|xxnet-105|xxnet-106|xxnet-107|xxnet-108|xxnet-109|xxnet-110|xxnet-111|xxnet-112|xxnet-113|xxnet-114|xxnet-115|xxnet-116|xxnet-117|xxnet-118|xxnet-119|xxnet-120|xxnet-121|xxnet-122|xxnet-123|xxnet-124|xxnet-125|xxnet-126|xxnet-127|xxnet-128|xxnet-129|xxnet-130|xxnet-131|xxnet-132|xxnet-133|xxnet-134|xxnet-135|xxnet-136|xxnet-137|xxnet-138|xxnet-139|xxnet-140|xxnet-141|xxnet-142|xxnet-143|xxnet-144|xxnet-145|xxnet-146|xxnet-147|xxnet-148|xxnet-149|xxnet-150|xxnet-151|xxnet-152|xxnet-153|xxnet-154|xxnet-155|xxnet-156|xxnet-157|xxnet-158|xxnet-159|celtic-bazaar-122813|chrome---1231|chrome--1231|chrome-06|chrome-07|chrome-08|chrome-09|chrome-10|chrome-11|chrome-12|chrome-1231|chrome-1231-1231|cool-continuity-122814|coral-muse-122814|curious-memory-122814|dospytang11|dospytang12|dospytang13|feisty-current-122813|glassy-vial-122813|groovy-patrol-122814|jingtao-001|practical-album-122814|proud-storm-122813|sound-invention-122813|starlit-cocoa-122814|third-circle-122813|wyslmt11|wyslmt12|xx-net-agent|xxnet--1229|xxnet-1017|xxnet-1018|xxnet-1019|xxnet-1021|xxnet-1022|xxnet-1023|xxnet-1024|xxnet-1025|xxnet-1026|xxnet-1027|xxnet-1028|xxnet-1029|xxnet-103-1188|xxnet-1030|xxnet-1031|xxnet-1032-1188|xxnet-1033|xxnet-1034|xxnet-1035|xxnet-1037|xxnet-1053|xxnet-1054|xxnet-200-1199|xxnet-201-1199|xxnet-202-1199|xxnet-203-1199|xxnet-204-1199|xxnet-205-1199|xxnet-206-1199|xxnet-207-1199|xxnet-cntchen|xxnet-evachen|xxnet-fgfw|xxnet-fgfw-1|xxnet-fgfw-2|xxnet-lennon|xxnet-xlx01|xxnet-xlx02|xxnet-xlx03|xxnet-xlx04|xxnet-xlx05|xxnet-xlx06|xxnet-xlx07|xxnet-xlx08|xxnet-xlx09|xxnet-xlx10|xxnet-xlx11|xxnet-xlx12|chrome26-1100|chrome27-1100|chrome28-1100|chrome29-1100|chrome30-1100|xxnet-foshan2|xxnet-foshan3|xxnet-foshan4|xxnet-foshan5|xxnet-foshan6|chrome7-1234|chrome8-1234|chrome10-1209|chrome11-1209|chrome12-1209|chrome2-1209|alpine-air-123504|caramel-theory-123504|compact-life-123504|clean-yew-123504|cobalt-sector-123504|eternal-outlook-123504|flash-moonlight-123504|omega-terrain-123504|premium-weft-123504|starlit-ship-123504|saaas-1235|x-micron-123504|chrome6-1234|chrome5-1234|chrome4-1234|chrome3-1234|chrome2-1234|chrome1-1234|chrome0-1234|chrome--1234|chrome---1234|chrome-1234|chrome6-1209|chrome4-1209|chrome3-1209|universal-stone-123514|stoked-dominion-123514|unique-ellipse-123514|trans-gate-123514|innate-summit-123514|able-involution-123514|helpful-ally-123514|river-karma-123514|future-synapse-123514|booming-alchemy-123514|storied-myth-123514|folkloric-stone-123514|cryptic-lattice-123514|dulcet-bucksaw-123514|airy-machine-123514|e-lexicon-123514|seventh-history-123514|upbeat-voice-123514|stately-math-123514|lucid-sweep-123514|nice-azimuth-123514|spry-equator-123515|neural-tome-123515|famous-charge-123515|elated-practice-123515|unique-antonym-123515|sharp-quest-123515|manifest-altar-123515|steel-citizen-123515|fourth-walker-123515|subtle-sublime-123515|galvanized-case-123515|xxnet-izual1|xxnet-izual2|xxnet-izual3|xxnet-izual4|xxnet-izual5|chrome11-1239|chrome10-1239|chrome9-1239|chrome8-1239|chrome7-1239|chrome6-1239|chrome5-1239|chrome4-1239|chrome3-1239|chrome2-1239|chrome0-1239|xx-net008-1197|tangtdjia|xxnet-kittycheny1|xxnet-kittycheny2|xxnet-kittycheny3|xxnet-kittycheny4|xxnet-kittycheny5|xxnet-kittycheny6|xxnet-sdcff1|xxnet-sdcff2|xxnet-sdcff3|xxnet-sdcff4|xxnet-sdcff5|xxnet-sdcff6|xxnet-sdcff7|xxnet-sdcff8|xxnet-sdcff9|xxnet-sdcff10|xxnet-sdcff11|xxnet-sdcff12|rosy-dialect-124115|xxnet-sdcf8-1241|xxnet-sdcf1|xxnet-sdcf2|xxnet-sdcf3|xxnet-sdcf4|xxnet-sdcf5|xxnet-sdcf6|xxnet-sdcf7|xxnet-sdcf8|xxnet-sdcf9|xxnet-sdcf10]]></content>
  </entry>
  <entry>
    <title><![CDATA[SQL Server存储过程]]></title>
    <url>%2FSQL%20Server%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html</url>
    <content type="text"><![CDATA[写在前面 前面啥也没有 查询赋值展开/折叠示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546USE [EOLData]GO/****** Object: StoredProcedure [dbo].[UpDateHLAResult] Script Date: 07/12/2020 13:45:44 ******/SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGO-- =============================================-- Author: &lt;Author,,Name&gt;-- Create date: &lt;Create Date,,&gt;-- Description: &lt;Description,,&gt;-- =============================================ALTER PROCEDURE [dbo].[UpDateHLAResult](@VIN varchar(30),@ZTS varchar(30),@LLOffset FLOAT)ASBEGIN-- SET NOCOUNT ON added to prevent extra result sets from-- interfering with SELECT statements.SET NOCOUNT ON;DECLARE @sem varchar(30) = ''''-- 声明变量DECLARE @LHB FLOAT-- 判断是否存在数据IF EXISTS(select [左远光灯高] from [dbo].[车型配置] where [ZTS]=@ZTS)BEGIN -- 查询赋值 select @LHB = [左远光灯高] from [dbo].[车型配置] where [ZTS]=@ZTSENDELSEBEGIN select @LHB = [左远光灯高] from [dbo].[64字节车型配置] where [ZTS]=@ZTSEND-- 赋值SET @LHB = @LHB - @LHOffsetbegin exec( 'UPDATE [dbo].[灯光表] SET ' +'[左远光灯高] = '+@sem+ @LHB +@sem +'WHERE [VIN] = '+@sem+ @VIN +@sem )endEND]]></content>
      <categories>
        <category>SQLServer</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HttpWeb]]></title>
    <url>%2FHttpWeb.html</url>
    <content type="text"><![CDATA[写在前面 HttpWebRequest命名空间： System.Net，这是.NET创建者最初开发用于使用HTTP请求的标准类使用HttpWebRequest可以让开发者控制请求/响应流程的各个方面，如 timeouts, cookies, headers, protocols另一个好处是HttpWebRequest类不会阻塞UI线程,例如，当从响应很慢的API服务器下载大文件时，您的应用程序的UI不会停止响应HttpWebRequest通常和WebResponse一起使用，一个发送请求，一个获取数据HttpWebRquest更为底层一些，能够对整个访问过程有个直观的认识，但同时也更加复杂一些 属性展开/折叠属性 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Accept //获取或设置 Accept HTTP 标头的值。Address //获取实际响应请求的 Internet 资源的统一资源标识符 (URI)。AllowAutoRedirect //获取或设置一个值，该值指示请求是否应跟随重定向响应。AllowReadStreamBuffering //获取或设置一个值，该值指示是否对从 Internet 资源接收的数据进行缓冲处理。AllowWriteStreamBuffering //获取或设置一个值，该值指示是否对发送到 Internet 资源的数据进行缓冲处理。AuthenticationLevel //获取或设置用于此请求的身份验证和模拟的级别。(继承自 WebRequest)AutomaticDecompression //获取或设置所使用的解压缩类型。CachePolicy //获取或设置此请求的缓存策略。(继承自 WebRequest)ClientCertificates //获取或设置与此请求关联的安全证书集合。Connection //获取或设置 Connection HTTP 标头的值。ConnectionGroupName //获取或设置请求的连接组的名称。ContentLength //获取或设置 Content-length HTTP 标头。ContentType //获取或设置 Content-type HTTP 标头的值。ContinueDelegate //获取或设置当从 Internet 资源接收到 HTTP 100-continue 响应时调用的委托方法。ContinueTimeout //获取或设置在接收到来自服务器的 100-Continue 之前要等待的超时（以毫秒为单位）。CookieContainer //获取或设置与请求关联的 Cookie。CreatorInstance //当在子类中重写时，获取从 IWebRequestCreate 类派生的工厂对象，该类用于创建为生成对指定 URI 的请求而实例化的 WebRequest。(继承自 WebRequest)Credentials //获取或设置请求的身份验证信息。Date //获取或设置要在 HTTP 请求中使用的 Date HTTP 标头值。DefaultCachePolicy //获取或设置此请求的默认缓存策略。DefaultMaximumErrorResponseLength //获取或设置 HTTP 错误响应的默认最大长度。DefaultMaximumResponseHeadersLength //获取或设置 MaximumResponseHeadersLength 属性的默认值。Expect //获取或设置 Expect HTTP 标头的值。HaveResponse //获取一个值，该值指示是否收到了来自 Internet 资源的响应。Headers //指定构成 HTTP 标头的名称/值对的集合。Host //获取或设置要在 HTTP 请求中独立于请求 URI 使用的 Host 标头值。IfModifiedSince //获取或设置 If-Modified-Since HTTP 标头的值。ImpersonationLevel //获取或设置当前请求的模拟级别。(继承自 WebRequest)KeepAlive //获取或设置一个值，该值指示是否与 Internet 资源建立持续型连接。MaximumAutomaticRedirections //获取或设置请求将跟随的重定向的最大数目。MaximumResponseHeadersLength //获取或设置响应标头允许的最大长度。MediaType //获取或设置请求的媒体类型。Method //获取或设置请求的方法。Pipelined //获取或设置一个值，该值指示是否通过管线将请求传输到 Internet 资源。PreAuthenticate //获取或设置一个值，该值指示是否随请求发送一个 Authorization 标头。ProtocolVersion //获取或设置用于请求的 HTTP 版本。Proxy //获取或设置请求的代理信息。ReadWriteTimeout //获取或设置写入或读取流时的超时（以毫秒为单位）。Referer //获取或设置 Referer HTTP 标头的值。RequestUri //获取请求的原始统一资源标识符 (URI)。SendChunked //获取或设置一个值，该值指示是否将数据分段发送到 Internet 资源。ServerCertificateValidationCallback //获取或设置用于验证服务器证书的回调函数。ServicePoint //获取用于请求的服务点。SupportsCookieContainer //获取指示请求是否为 CookieContainer 提供支持的值。Timeout //获取或设置 GetResponse() 和 GetRequestStream() 方法的超时值（以毫秒为单位）。TransferEncoding //获取或设置 Transfer-encoding HTTP 标头的值。UnsafeAuthenticatedConnectionSharing //获取或设置一个值，该值指示是否允许经过高速 NTLM 身份验证的连接共享。UseDefaultCredentials //获取或设置一个 Boolean 值，该值控制是否随请求一起发送默认凭据。UserAgent //获取或设置 User-agent HTTP 标头的值。 方法展开/折叠方法 1234567891011121314151617181920212223242526272829Abort() //取消向 Internet 资源发出的请求。AddRange(Int32) //向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。AddRange(Int32, Int32) //向请求添加指定范围的字节范围标头。AddRange(Int64) //向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。AddRange(Int64, Int64) //向请求添加指定范围的字节范围标头。AddRange(String, Int32) //向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。AddRange(String, Int32, Int32) //向请求添加指定范围的范围标头。AddRange(String, Int64) //向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。AddRange(String, Int64, Int64) //向请求添加指定范围的范围标头。BeginGetRequestStream(AsyncCallback, Object) //开始对用于写入数据的 Stream 对象执行异步请求。BeginGetResponse(AsyncCallback, Object) //开始对 Internet 资源的异步请求。CreateObjRef(Type) //创建一个对象，该对象包含生成用于与远程对象进行通信的代理所需的全部相关信息。(继承自 MarshalByRefObject)EndGetRequestStream(IAsyncResult) //结束对用来写入数据的 Stream 对象的异步请求。EndGetRequestStream(IAsyncResult, TransportContext) //结束对用于写入数据的 Stream 对象的异步请求，并输出与该流关联的 TransportContext。EndGetResponse(IAsyncResult) //结束对 Internet 资源的异步请求。Equals(Object) //确定指定的对象是否等于当前对象。(继承自 Object)GetHashCode() //作为默认哈希函数。(继承自 Object)GetLifetimeService() //检索控制此实例的生存期策略的当前生存期服务对象。(继承自 MarshalByRefObject)GetObjectData(SerializationInfo, StreamingContext) //使用序列化目标对象时所需的数据填充 SerializationInfo。GetRequestStream() //获取用于写入请求数据的 Stream 对象。GetRequestStream(TransportContext) //获取用于写入请求数据的 Stream 对象，并输出与流关联的 TransportContext。GetRequestStreamAsync()//当在子类中被重写时，将用于写入数据的 Stream 作为异步操作返回到 Internet 资源。(继承自 WebRequest)GetResponse()//返回来自 Internet 资源的响应。GetResponseAsync()//当在子代类中被重写时，将作为异步操作返回对 Internet 请求的响应。(继承自 WebRequest)GetType()//获取当前实例的 Type。(继承自 Object)InitializeLifetimeService()//获取生存期服务对象来控制此实例的生存期策略。(继承自 MarshalByRefObject)MemberwiseClone()//创建当前 Object 的浅表副本。(继承自 Object)MemberwiseClone(Boolean)//创建当前 MarshalByRefObject 对象的浅表副本。(继承自 MarshalByRefObject)ToString()//返回表示当前对象的字符串。(继承自 Object) Post&amp;Get展开/折叠示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//POST方法public static string HttpPost(string Url, string postDataStr)&#123; HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url); request.Method = "POST"; request.ContentType = "application/x-www-form-urlencoded"; Encoding encoding = Encoding.UTF8; byte[] postData = encoding.GetBytes(postDataStr); request.ContentLength = postData.Length; Stream myRequestStream = request.GetRequestStream(); myRequestStream.Write(postData, 0, postData.Length); myRequestStream.Close(); HttpWebResponse response = (HttpWebResponse)request.GetResponse(); Stream myResponseStream = response.GetResponseStream(); StreamReader myStreamReader = new StreamReader(myResponseStream, encoding); string retString = myStreamReader.ReadToEnd(); myStreamReader.Close(); myResponseStream.Close(); if (response != null) response.Close(); if (request != null) request.Abort(); return retString;&#125;public static string Post(string Url, string Data, string Referer)&#123; HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url); request.Method = "POST"; request.Referer = Referer; byte[] bytes = Encoding.UTF8.GetBytes(Data); request.ContentType = "application/x-www-form-urlencoded"; request.ContentLength = bytes.Length; Stream myResponseStream = request.GetRequestStream(); myResponseStream.Write(bytes, 0, bytes.Length); HttpWebResponse response = (HttpWebResponse)request.GetResponse(); StreamReader myStreamReader = new StreamReader(response.GetResponseStream(), Encoding.UTF8); string retString = myStreamReader.ReadToEnd(); myStreamReader.Close(); myResponseStream.Close(); if (response != null) response.Close(); if (request != null) request.Abort(); return retString;&#125;//GET方法public static string HttpGet(string Url, string postDataStr)&#123; HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url + (postDataStr == "" ? "" : "?") + postDataStr); request.Proxy = null; request.KeepAlive = false; request.Method = "GET"; //request.ContentType = "text/html;charset=UTF-8"; request.ContentType = "application/json; charset=UTF-8"; HttpWebResponse response = (HttpWebResponse)request.GetResponse(); Stream myResponseStream = response.GetResponseStream(); //StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8")); StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.UTF8); string retString = myStreamReader.ReadToEnd(); myStreamReader.Close(); myResponseStream.Close(); if (response != null) response.Close(); if (request != null) request.Abort(); return retString;&#125; HttpClientHttpClient是.NET4.5引入的一个HTTP客户端库，其命名空间为 System.Net.Http ，.NET 4.5之前我们可能使用WebClient和HttpWebRequest来达到相同目的HttpClient利用了最新的面向任务模式，使得处理异步请求非常容易它适合用于多次请求操作，一般设置好默认头部后，可以进行重复多次的请求，基本上用一个实例可以提交任何的HTTP请求HttpClient有预热机制，第一次进行访问时比较慢，所以不应该用到HttpClient就new一个出来，应该使用单例或其他方式获取HttpClient的实例 构造函数展开/折叠构造函数 123HttpClient() //使用释放此实例时释放的 HttpClientHandler 初始化 HttpClient 类的新实例。HttpClient(HttpMessageHandler) //使用指定的处理程序初始化 HttpClient 类的新实例。 处理程序在释放此实例时被释放。HttpClient(HttpMessageHandler, Boolean) //使用提供的处理程序初始化 HttpClient 类的新实例，并指定在释放此实例时是否应释放该处理程序。 属性展开/折叠属性 123456BaseAddress//获取或设置用于发送请求的 Internet 资源的统一资源标识符 (URI) 的基址。DefaultProxy//获取或设置全局 HTTP 代理。DefaultRequestHeaders//获取应与每个请求一起发送的标头。DefaultRequestVersion//获取或设置对此 HttpClient 实例发出的后续请求使用的默认 HTTP 版本。MaxResponseContentBufferSize//获取或设置要在读取响应内容时缓冲的最大字节数。Timeout//获取或设置请求超时前等待的时间跨度。 方法展开/折叠方法 123456789101112131415161718192021222324252627282930313233343536373839404142CancelPendingRequests()//取消该实例上的所有挂起的请求。DeleteAsync(String)//以异步操作将 DELETE 请求发送给指定 URI。DeleteAsync(String, CancellationToken)//用以异步操作的取消标记发送 DELETE 请求到指定的 URI。DeleteAsync(Uri)//以异步操作将 DELETE 请求发送给指定 URI。DeleteAsync(Uri, CancellationToken)//用以异步操作的取消标记发送 DELETE 请求到指定的 URI。Dispose()//释放由 HttpMessageInvoker 使用的非托管资源和托管资源。(继承自 HttpMessageInvoker)Dispose(Boolean)//释放由 HttpClient 使用的非托管资源，并可根据需要释放托管资源。Equals(Object)//确定指定的对象是否等于当前对象。(继承自 Object)GetAsync(String)//以异步操作将 GET 请求发送给指定 URI。GetAsync(String, CancellationToken)//用以异步操作的取消标记发送 GET 请求到指定的 URI。GetAsync(String, HttpCompletionOption)//用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。GetAsync(String, HttpCompletionOption, CancellationToken)//用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。GetAsync(Uri)//以异步操作将 GET 请求发送给指定 URI。GetAsync(Uri, CancellationToken)//用以异步操作的取消标记发送 GET 请求到指定的 URI。GetAsync(Uri, HttpCompletionOption)//用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。GetAsync(Uri, HttpCompletionOption, CancellationToken)//用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。GetByteArrayAsync(String)//将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。GetByteArrayAsync(Uri)//将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。GetHashCode()//作为默认哈希函数。(继承自 Object)GetStreamAsync(String)//将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。GetStreamAsync(Uri)//将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。GetStringAsync(String)//将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。GetStringAsync(Uri)//将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。GetType()//获取当前实例的 Type。(继承自 Object)MemberwiseClone()//创建当前 Object 的浅表副本。(继承自 Object)PatchAsync(String, HttpContent)//以异步操作方式将 PATCH 请求发送到指定为字符串的 URI。PatchAsync(String, HttpContent, CancellationToken)//以异步操作方式将带有取消令牌的 PATCH 请求发送到表示为字符串的 URI。PatchAsync(Uri, HttpContent)//以异步操作方式发送 PATCH 请求。PatchAsync(Uri, HttpContent, CancellationToken)//以异步操作方式发送带有取消令牌的 PATCH 请求。PostAsync(String, HttpContent)//以异步操作将 POST 请求发送给指定 URI。PostAsync(String, HttpContent, CancellationToken)//用以异步操作的取消标记发送 POST 请求。PostAsync(Uri, HttpContent)//以异步操作将 POST 请求发送给指定 URI。PostAsync(Uri, HttpContent, CancellationToken)//用以异步操作的取消标记发送 POST 请求。PutAsync(String, HttpContent)//以异步操作将 PUT 请求发送给指定 URI。PutAsync(String, HttpContent, CancellationToken)//用以异步操作的取消标记发送 PUT 请求。PutAsync(Uri, HttpContent)//以异步操作将 PUT 请求发送给指定 URI。PutAsync(Uri, HttpContent, CancellationToken)//用以异步操作的取消标记发送 PUT 请求。SendAsync(HttpRequestMessage)//以异步操作发送 HTTP 请求。SendAsync(HttpRequestMessage, CancellationToken)//以异步操作发送 HTTP 请求。SendAsync(HttpRequestMessage, HttpCompletionOption)//以异步操作发送 HTTP 请求。SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)//以异步操作发送 HTTP 请求。ToString()//返回表示当前对象的字符串。(继承自 Object) 单例模式（Singleton Pattern）这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式 懒汉模式默认不会实例化，什么时候用什么时候new 饿汉模式类初始化时,会立即加载该对象，线程天生安全,调用效率高 双检锁/双重校验锁（DCL，即 double-checked locking）这种方式采用双锁机制，安全且在多线程情况下能保持高性能 示例展开/折叠示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384public class HttpClientHelper&#123; private static readonly object LockObj = new object(); private static HttpClient client = null; public HttpClientHelper() &#123; GetInstance(); &#125; public static HttpClient GetInstance() &#123; if (client == null) &#123; lock (LockObj) &#123; if (client == null) &#123; client = new HttpClient(); &#125; &#125; &#125; return client; &#125; public async Task&lt;string&gt; PostAsync(string url, string strJson)//post异步请求方法 &#123; try &#123; HttpContent content = new StringContent(strJson); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"); //由HttpClient发出异步Post请求 HttpResponseMessage res = await client.PostAsync(url, content); if (res.StatusCode == System.Net.HttpStatusCode.OK) &#123; string str = res.Content.ReadAsStringAsync().Result; return str; &#125; else return null; &#125; catch (Exception ex) &#123; return null; &#125; &#125; public string Post(string url, string strJson)//post同步请求方法 &#123; try &#123; // private static HttpClient client = new HttpClient(); //client.DefaultRequestHeaders.Accept.TryParseAdd("application/json"); HttpContent content = new StringContent(strJson); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"); //client.DefaultRequestHeaders.Connection.Add("keep-alive"); //由HttpClient发出Post请求 Task&lt;HttpResponseMessage&gt; res = client.PostAsync(url, content); if (res.Result.StatusCode == System.Net.HttpStatusCode.OK) &#123; string str = res.Result.Content.ReadAsStringAsync().Result; return str; &#125; else return null; &#125; catch (Exception ex) &#123; return null; &#125; &#125; public string Get(string url) &#123; try &#123; // private static HttpClient client = new HttpClient(); //client.DefaultRequestHeaders.Accept.TryParseAdd("application/json"); var responseString = client.GetStringAsync(url); return responseString.Result; &#125; catch (Exception ex) &#123; return null; &#125; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[JSON字符串]]></title>
    <url>%2FJSON%E5%AD%97%E7%AC%A6%E4%B8%B2.html</url>
    <content type="text"><![CDATA[写在前面 C#生成方法Newtonsoft展开/折叠示例 12345678910111213141516171819202122232425String apiClass = "apiClass";String apiCommand = "apiCommand";JObject postedJObject = new JObject();postedJObject.Add("class", apiClass);postedJObject.Add("cmd", apiCommand);String param1 = "param1";String param2 = "param2";JObject apiJsonParam = new JObject();apiJsonParam.Add("param1", param1);apiJsonParam.Add("param2", param2);postedJObject.Add("param", apiJsonParam);apiJsonParam["param1"] = param1);apiJsonParam["param2"] = param2);postedJObject["param"] = apiJsonParam;JArray jArray = new JArray();JObject arr1 = new JObject();arr1.Add("arr1", "this is arr1");jArray.Add(arr1);JObject arr2 = new JObject();arr2.Add("arr2", "this is arr2");jArray.Add(arr2);postedJObject.Add("jarray", jArray);String paramString = postedJObject.ToString(Newtonsoft.Json.Formatting.Indented, null); 输出结果为 12345678910111213141516&#123; "class": "apiClass", "cmd": "apiCommand", "param": &#123; "param1": "param1", "param2": "param2" &#125;, "jarray": [ &#123; "arr1": "this is arr1" &#125;, &#123; "arr2": "this is arr2" &#125; ]&#125; 序列化string StrJson = JsonConvert.SerializeObject(Classobj); 读取JSON文件12345678910string json = string.Empty;using (FileStream fs = new FileStream(filepath, FileMode.Open, System.IO.FileAccess.Read, FileShare.ReadWrite))&#123; using (StreamReader sr = new StreamReader(fs, Encoding.GetEncoding(“gb2312”))) &#123; json = sr.ReadToEnd().ToString(); &#125;&#125;string json = GetFileJson(filepath); 反序列化ClassA a = JsonConvert.DeserializeObject(strResult); 1234567891011121314List&lt;Student&gt; lstStuModel = new List&lt;Student&gt;()&#123;new Student()&#123;ID=1,Name="Name1",Age=250,Sex="男"&#125;,new Student()&#123;ID=2,Name="Name2",Age=300,Sex="女"&#125;&#125;;//Json.NET序列化string jsonData = JsonConvert.SerializeObject(lstStuModel);//Json.NET反序列化string json = @"&#123; 'Name':'Name1','Age':'3000','ID':'1','Sex':'女'&#125;";Student descJsonStu = JsonConvert.DeserializeObject&lt;Student&gt;(json);//反序列化Console.WriteLine(string.Format("反序列化： ID=&#123;0&#125;,Name=&#123;1&#125;,Sex=&#123;2&#125;,Sex=&#123;3&#125;", descJsonStu.ID, descJsonStu.Name, descJsonStu.Age, descJsonStu.Sex));Console.ReadKey();]]></content>
  </entry>
  <entry>
    <title><![CDATA[刷题记]]></title>
    <url>%2F%E5%88%B7%E9%A2%98%E8%AE%B0.html</url>
    <content type="text"><![CDATA[简介 记录刷题过程中遇到问题及新知识 System.CollectionsArrayList在C#中，数组由于是固定长度的，由于这种限制不方便，所以出现了ArrayListArrayList是可变长数组，可以将任意多的数据Add到ArrayList里面。其内部维护的数组，当长度不足时，会自动扩容为原来的两倍。但是ArrayList也有一个缺点，就是存入ArrayList里面的数据都是Object类型的，所以如果将值类型存入和取出的时候会发生装箱、拆箱操作(就是值类型与引用类型之间的转换)，这个会影响程序性能。在.Net 2.0泛型出现以后，就提供了List。 ListList是ArrayList的泛型版本，它不再需要装箱拆箱，直接取，直接用，它基本与ArrayList一致，不过在使用的时候要先设置好它的类型，而设置好类型之后，不是这种类型的数据，是不允许Add进去的就性能来说，如果要存进数组的只有一种数据，那么无疑List是最优选择List存储的数据是有序并且可以重复的。 采用链表存储数据 展开/折叠示例 1234567891011121314151617181920List&lt;int&gt; ListInt = new List&lt;int&gt;();// 属性Count// 方法Add(T)AddRange(IEnumerable&lt;T&gt;)Clear()Contains(T)Find(Predicate&lt;T&gt;) //搜索与指定谓词所定义的条件相匹配的元素，并返回整个 List&lt;T&gt; 中的第一个匹配元素FindAll(Predicate&lt;T&gt;) //检索与指定谓词定义的条件匹配的所有元素 返回List&lt;&gt;IndexOf(T) //搜索指定的对象，并返回整个 List&lt;T&gt; 中第一个匹配项的从零开始的索引LastIndexOf(T) //搜索指定对象并返回整个 List&lt;T&gt; 中最后一个匹配项的从零开始索引IndexOf(T, Int32) //搜索指定对象并返回 List&lt;T&gt; 中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引IndexOf(T, Int32, Int32) //搜索指定对象并返回 List&lt;T&gt; 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引Insert(Int32, T) //将元素插入到 List&lt;T&gt; 中的指定索引处Remove(T) //从 List&lt;T&gt; 中删除特定对象的第一个匹配项Reverse() //将整个 List&lt;T&gt; 中元素的顺序反转Reverse(Int32, Int32) //将指定范围中元素的顺序反转Sort() //使用默认比较器对整个 List&lt;T&gt; 中的元素进行排序ToArray() //将 List&lt;T&gt; 的元素复制到新数组中 HashTableHashTable是一种根据key查找非常快的键值数据结构，不能有重复key，而且由于其特点，其长度总是一个素数，所以扩容后容量会比2倍大一点点，加载因子为0.72f。当要大量使用key来查找value的时候，HashTable无疑是最有选择，HashTable与ArrayList一样，是非泛型的，value存进去是object,存取会发生装箱、拆箱，所以出现了Dictionary&lt;T,T&gt; 展开/折叠示例 1234567891011121314// 属性Count //获取包含在 Hashtable 中的键/值对的数目KeysValues// 方法Add(Object, Object)Clear()Clone()Contains(Object)ContainsKey(Object)ContainsValue(Object)GetHash(Object) //返回指定键的哈希代码Remove(Object) Dictionary&lt;T,T&gt;Dictionary&lt;T,T&gt;是HashTable的泛型版本，存取同样快，但是不需要装箱和拆箱了。而且，其优化了算法，Hashtable是0.72，它的浪费容量少了很多 1Dictionary&lt;string,Person&gt; Dic = new Dictionary&lt;string,Person&gt;(); HashSetHashSet类，算法，存储结构都与哈希表相同，主要是设计用来做高性能集运算的，例如对两个集合求交集、并集、差集等。集合中包含一组不重复出现且无特定顺序的元素HashSet存储的数据是无序并且唯一的，底层使用HashMap存储数据Add(T) 方法返回值为如果该元素添加到 HashSet 对象中则为 true；如果该元素已存在则为 false 展开/折叠示例 12345678910111213141516HashSet&lt;int&gt; numbers1;HashSet&lt;int&gt; numbers2;//分别进行numbers1和numbers2的值初始化或赋值numbers1.UnionWith(numbers2);//求两个集合的并集。numbers1.IntersectWith(numbers2);//求两个集合的交集。numbers1.ExceptWith(numbers2);//求两个集合的差集。numbers1.SymmetricExceptWith(numbers2);//求两个集合的对称差集。// 属性Count //获取集中包含的元素数Comparer //获取用于确定集中的值是否相等的 IEqualityComparer&lt;T&gt; 对象// 方法Add() //将项目添加到HashSet之中Clear() //清空HashSet里面的值Remove() //从HashSet中移除值Contains() //判断HashSet是否包含指定项目Equals(Object) //判断是否相等 Queue、QueueQueue队列，Queue泛型队列，队列，先进先出 展开/折叠示例 12345678// 属性Count// 方法Clear()Contains(T)Dequeue() //移除并返回位于 Queue&lt;T&gt; 开始处的对象Enqueue(T) //将一个对象添加到 Queue&lt;T&gt; 的末尾Peek() //返回位于 Queue&lt;T&gt; 开始处的对象但不将其移除 Stack、StackStack堆栈，先进后出 展开/折叠示例 123456789// 属性Count// 方法Clear()Contains(T)Pop() //删除并返回 Stack&lt;T&gt; 顶部的对象Push(T) //在 Stack&lt;T&gt; 的顶部插入一个对象Peek() //返回位于 Stack&lt;T&gt; 顶部的对象但不将其移除TryPop(T) //返回一个值，该值指示 Stack&lt;T&gt; 的顶部是否有对象；如果有，则将其复制到 result 参数，并从 Stack&lt;T&gt; 中删除它 SortedList、SortedList&lt;TKey,TValue&gt;SortedList集合中的数据是有序的。可以通过key来匹配数据，也可以通过int下标来获取数据添加操作比ArrayList，Hashtable略慢；查找、删除操作比ArrayList快，比Hashtable慢 SortedDictionary&lt;TKey,TValue&gt;SortedDictionary&lt;TKey,TValue&gt;相比于SortedList&lt;TKey,TValue&gt;其性能优化了，SortedList&lt;TKey,TValue&gt;其内部维护的是数组而SortedDictionary&lt;TKey,TValue&gt;内部维护的是红黑树(平衡二叉树)的一种，因此其占用的内存，性能都好于SortedDictionary&lt;TKey,TValue&gt;。唯一差在不能用下标取值 ListDictionary(单向链表),LinkedList(双向链表)List,ArrayList,Hashtable等容器类，其内部维护的是数组Array来，ListDictionary和LinkedList不用Array，而是用链表的形式来保存。链表最大的好处就是节约内存空间ListDictionary是单向链表LinkedList双向链表。双向链表的优势，可以插入到任意位置 HybridDictionaryHybridDictionary的类，充分利用了Hashtable查询效率高和ListDictionary占用内存空间少的优点，内置了Hashtable和ListDictionary两个容器，添加数据时内部逻辑如下:当数据量小于8时，Hashtable为null，用ListDictionary保存数据当数据量大于8时，实例化Hashtable，数据转移到Hashtable中，然后将ListDictionary置为null BitArrayBitArray用于二进制运算，”或”、”非”、”与”、”异或非”等这种操作，只能存true或false 字符串动态匹配算法BF算法RK算法BM算法KPM算法Sunday算法 动态规划可理解为数列求通项过程f(n) = f(n - 1) + f(n - 2) 逻辑运算符短路效应123if(A &amp;&amp; B) // 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 falseif(A || B) // 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true]]></content>
  </entry>
  <entry>
    <title><![CDATA[字符串匹配算法]]></title>
    <url>%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.html</url>
    <content type="text"><![CDATA[写在前面 ## 展开/折叠示例]]></content>
  </entry>
  <entry>
    <title><![CDATA[栈与队列Stack&Queue]]></title>
    <url>%2F%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97Stack%26Queue.html</url>
    <content type="text"><![CDATA[写在前面 栈与队列线性表插入和删除操作不受限制 在任意位置进行栈和队列是两种特殊的线性表。他们的数据元素之间具有顺序的逻辑关系，都采用顺序结构和链式结构存储 栈的插入和删除操作只允许在线性表的尾端(栈顶Top)进行队列插入操作限定在线性表的尾部而其它操作限定在表的头部进行 栈的特点为后进先出，队列先进先出 栈表尾称为栈顶（Top）,另一端称为栈底（Bottom），当栈中没有数据元素时叫空栈（Empty Stack）方法： Push（）入栈 //添加数据Pop（）出栈 //删除数据，返回被删除的数据Peek（）//取得栈顶的元素，不删除ToArray() //方法创建数组并将堆栈元素复制到其中Contains() //方法判断一个元素是否在栈中Clear（）//清空所有数据Count //取得栈中元素的个数 接口定义： 123456789public interface IStack&#123;int Count&#123;get;&#125;//求栈中元素个数int GetLength();//求栈的长度bool IsEmpty();//判断栈是否为空void Clear();//清空操作void Push(T item);//入栈操作T Pop();//出栈操作T Peek();//取栈顶元素&#125; 栈的本质是一个线性表，线性表有两种存储形式，那么栈也有分为栈的顺序存储结构和栈的链式存储结构用连续的存储空间来存储栈中的数据元素(使用数组)，这样的栈称为顺序栈(Sequence Stack)类似于顺序表，用一维数组来存放顺序栈中的数据元素栈顶指示器 top 设在数组下标为 0 的端，top随着插入和删除而变化，当栈为空时，top=-1 栈的另外一种存储方式是链式存储，这样的栈称为链栈(Linked Stack)由于链栈的操作只是在一端进行，为了操作方便，把栈顶设在链表的头部，并且不需要头结点 示例 123456789101112131415161718192021222324252627282930313233// Stack&lt;T&gt; staA = new Stack&lt;T&gt;();Stack&lt;string&gt; staA = new Stack&lt;string&gt;(); staA.Push("one"); staA.Push("two"); staA.Push("three"); staA.Push("four"); staA.Push("five"); foreach (string a in staA)//遍历元素，将之变成string类型 &#123; Console.WriteLine(a); &#125; //peek是把栈顶元素弹出（取出），但不删除 Console.WriteLine("取出的元素是：&#123;0&#125;", staA.Peek()); //pop是把栈顶的元素弹出（取出），并将其删除 Console.WriteLine("删除的栈顶元素是：&#123;0&#125;",staA .Pop ()); //此时再输出一次栈的元素，会发现five被删除了 foreach (string b in staA) &#123; Console.ForegroundColor = ConsoleColor.Blue; Console.WriteLine(b); &#125; //ToArray从栈底到栈顶将一个栈复制到另一个栈中 Stack&lt;string&gt; staB = new Stack&lt;string&gt;(staA.ToArray()); foreach (string c in staB) &#123; Console.ForegroundColor = ConsoleColor.Cyan; Console.WriteLine(c); &#125; Console.WriteLine(" "); Console.ForegroundColor = ConsoleColor.DarkRed; //contains方法，判断一个元素是否在栈中 Console.WriteLine("six是否在栈中？"); Console.WriteLine(staA .Contains ("six")); 队列插入操作的表尾称为队尾(Rear)，把进行其它操作的头部称为队头(Front)。当队列中没有数据元素时称为空队列(EmptyQueue)方法： Enqueue() 入队（放在队尾）Dequeue() 出队（移除队首元素，并返回被移除的元素）Peek() 取得队首的元素，不移除Clear() 清空元素 接口定义： 123456789public interface IQueue&lt;T&gt;&#123;int Count&#123;get;&#125;//取得队列长度的属性int GetLength();//求队列的长度bool IsEmpty();//判断队列是否为空void Clear();//清空队列void Enqueue(T item);//入队T Dequque();//出队T Peek();//取队头元素&#125; 用连续的存储空间来存储队列中的数据元素，这样的队列称为顺序队列(SequenceQueue)类似于顺序栈，用一维数组来存放顺序队列中的数据元素。队头位置设在数组下标为 0 的端，用 front 表示；队尾位置设在数组的另一端，用rear 表示front 和 rear 随着插入和删除而变化。当队列为空时， front=rear=-1 队列的另外一种存储方式是链式存储，这样的队列称为链队列(LinkedQueue)由于链队列的操作只是在一端进行，为了操作方便，把队头设在链表的头部，并且不需要头结点 展开/折叠示例]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hashmap、Hashtabel、Dictionary]]></title>
    <url>%2FHashmap%E3%80%81Hashtabel%E3%80%81Dictionary.html</url>
    <content type="text"><![CDATA[写在前面 参考：https://blog.csdn.net/woshimaxiao1/article/details/83661464 HashmapHashMap是Java 1.2引进的Map接口的一个实现，c#中无HashMap 数组 采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(logn)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n) 线性链表 对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n) 二叉树 对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(logn)。 哈希表 相比上述几种数据结构，在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)。 当要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作。 存储位置 = 哈希函数f(关键字) 哈希冲突两个不同的元素，通过哈希函数得出的实际存储地址相同HashMap采用了链地址法，也就是数组+链表的方式解决哈希冲突HashMap数组的每一个元素不止是一个Entry对象，也是一个链表的头节点。每一个Entry对象通过Next指针指向它的下一个Entry节点。当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可HashMap可以简单理解为由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的 Hashtable哈希表（HashTable）又叫做散列表，是根据关键码值（即键值对）而直接访问的数据结构。也就是说，它通过把关键码映射到表中一个位置来访问记录，以加快查找速度，Hashtable是基于Dictionary类的 Hashtable 与 Hashmap区别Hashtable底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化初始size为11，扩容：newsize = olesize*2+1计算index的方法：index = (hash &amp; 0x7FFFFFFF) % tab.length Hashmap底层数组+链表实现，可以存储null键和null值，线程不安全初始size为16，扩容：newsize = oldsize*2，size一定为2的n次幂扩容针对整个Map，每次扩容时，原来数组中的元素依次重新计算存放位置，并重新插入插入元素后才判断该不该扩容，有可能无效扩容（插入后如果扩容，如果没有再次插入，就会产生无效扩容）当Map中元素总数超过Entry数组的75%，触发扩容操作，为了减少链表长度，元素分配更均匀计算index方法：index = hash &amp; (tab.length – 1) HashTable和Dictionary区别 HashTable不支持泛型，而Dictionary支持泛型。 Hashtable 的元素属于 Object 类型，所以在存储或检索值类型时通常发生装箱和拆箱的操作，所以你可能需要进行一些类型转换的操作，而且对于int,float这些值类型还需要进行装箱等操作，非常耗时。 单线程程序中推荐使用 Dictionary, 有泛型优势, 且读取速度较快, 容量利用更充分。多线程程序中推荐使用 Hashtable, 默认的 Hashtable 允许单线程写入, 多线程读取, 对 Hashtable 进一步调用 Synchronized() 方法可以获得完全线程安全的类型. 而 Dictionary 非线程安全, 必须人为使用 lock 语句进行保护, 效率大减。 在通过代码测试的时候发现key是整数型Dictionary的效率比Hashtable快，如果key是字符串型，Dictionary的效率没有Hashtable快。]]></content>
  </entry>
  <entry>
    <title><![CDATA[动态EV(ETP)测试]]></title>
    <url>%2F%E5%8A%A8%E6%80%81EV(ETP)%E6%B5%8B%E8%AF%95.html</url>
    <content type="text"><![CDATA[说明 动态EV或ETP工位简单说明 新版本ETP测试工况分四部分：加速、匀速、滑行、制动测试内容除了基本电流电压等BMS数据读取还包括各阶段的效率及能量消耗率的计算等 程序配置最新程序增加是否为同轴滚筒的配置：在EvDynamicTestCurve.xml中isCoaxial配置为true表示为同轴滚筒非同轴滚筒计算时F为左右滚筒的合力 计算方法加速、匀速过程中电能转化为动能，效率计算公式为 Fvt/UIt滑行、制动过程中动能转化为电能，效率计算公式为 UIt/Fvt其中F、v、U、I均为各阶段的平均值 能量消耗率C = E/D 单位为(kWh)/100km程序中的计算公式为：整个过程中的平均100UIt/d 说明由于I为负数时表示放电加速所以计算时简单处理为I为负：效率 = Fvt/UItI为正：效率 = UIt/Fvt]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PostgreSQL数据库]]></title>
    <url>%2FPostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content type="text"><![CDATA[写在前面 BBK设备数据库常用操作说明 新增数据表创建脚本修改字段和表名打开数据表所在路径： 更改图中相应字段表名后点击黑色方框中的执行按钮并确认输出窗口为成功即可 新增字段当保存数据时Systemerror.log中存在警告缺少字段是可在数据库中新增缺少的字段 图中Miss Field List:后面就是数据库中缺少的字段名 创建脚本新增字段 如下所示，新增字段并根据需要更改字段长度即可 1234567-- Column: "前轮侧滑"-- ALTER TABLE public."侧滑表" DROP COLUMN "前轮侧滑";ALTER TABLE public."侧滑表" ADD COLUMN "新增字段1" character varying(10);ALTER TABLE public."侧滑表" ADD COLUMN "新增字段2" character varying(10);ALTER TABLE public."侧滑表" ADD COLUMN "新增字段3" character varying(10);]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[BBK检测线联网]]></title>
    <url>%2FBBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91.html</url>
    <content type="text"><![CDATA[写在前面 检测线联网相关的基本配置说明 设备设置1、设备及服务器安装好运行环境2、关闭防火墙3、分配IP4、保证工位与服务器相互可以Ping通 工位配置PostgreSQL配置打开PostgreSQL菜单：工具-服务器配置-pg_hba.conf新增如图配置后保存 BBK软件配置1、确认流程中有初始化联网步骤，一般在Init_InitConst中一般命名为InitNet 2、确认流程中有上图中的红框中的设备号、线号的步骤若没有可参考带有初始化联网的程序进行添加3、打开BBK软件在菜单中配置线号、设备号、服务器IP 服务器软件配置打开服务软件所在文件夹中Set.mdb数据库进行服务器联网配置 StationConfig 该表中每一行代表一个工位字段说明： DeviceID：对应工位配置的设备号DeviceIDDescribe：用于服务器显示的设备描述LineID：对应工位配置的线号LineIDIPAdsress：工位IPStationNo：用于服务器显示工位顺序StationUpload：设置当前工位需要上传的表名 逗号为英文字符 车辆查看配置 改表为显示测试数据页面的相关配置，根据需求进行相应配置即可]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[BBKTimeLock]]></title>
    <url>%2FBBKTimeLock.html</url>
    <content type="text"><![CDATA[Enter password to read！ Incorrect Password! No content to display! ]]></content>
  </entry>
  <entry>
    <title><![CDATA[BBK软件设置密码方法]]></title>
    <url>%2FBBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[写在前面 BBK软件设置密码方法 步骤一在Bin文件夹中找到LoginLock.Lock文件，将其复制到C盘根目录下若无此文件可新建文本文档后另存为此名称，内容为 12SuperAccount = &quot;BBKTSTSYS&quot;;SuperPassword = &quot;ZMY20140527&quot;; 均为英文字符 步骤二编辑方式打开设备程序使用的always文件(桌面快捷方式对应文件)1、双击打开组合列表中Always下的InitForm组合2、双击打开Menu，点击HELP进入菜单编辑界面3、选择需要设置密码的菜单项及子项后，选择右侧需要权限,权限0为不需要权限，不同应权限可设置相应密码0~9为权限等级，高等级可访问低等级权限，比如权限9可访问所有内容4、更改完成后依次点击保存后退出 步骤三设置权限密码双击打开always程序，点击左上角登录弹出如下界面 输入管理员账号后点击设置进行账户管理SuperAccount = “BBKTSTSYS”SuperPassword = “ZMY20140527” 设置完成后便可登录相应等级账户]]></content>
  </entry>
  <entry>
    <title><![CDATA[VCU]]></title>
    <url>%2FVCU.html</url>
    <content type="text"><![CDATA[写在前面 协议需求CANID： 静态预充截止电压PreChargeVoltageGetTest： (D01E- Battery External Voltage电池包外侧总电压)绝缘电阻InsulationResistanceGetTest： (D01C- Battery Insulation Resistance电池包的绝缘值)电池静态温度BatteryTemperatureRiseTestT1： (D02B- Battery Average Temperature电池温升) 动态MCU转速MCUSpeedGetTest： (电机当前转速D034- Motor Actual Speed)MCU温度MCUTempretureGetTest：D061 (MCU温度D02E- Inverter Actual Temperature)电机温度MotorTempretureGetTest：C952 (电机温度D036- Motor Actual Temperature)放电电流BatteryTotalCurrentTest：D030 (充电电流D027- Battery Total Current充电时电流为负值)电池温升BatteryTemperatureRiseTestT2：D047 (D02B- Battery Average Temperature电池温升)车速传感器SpeedSensorGetTest：判断制动踏板ReadBrakeStatus：刹车回馈电流FeedbackCurrentGetTest：D030 (D027- Battery Total Current回馈电流) MCU转速与实际车速差值PreChargeVoltageGetTest： 展开/折叠示例]]></content>
  </entry>
  <entry>
    <title><![CDATA[lambda Expressions]]></title>
    <url>%2Flambda%20Expressions.html</url>
    <content type="text"><![CDATA[写在前面 Expression lambda使用 lambda 声明运算符 =&gt; 从其主体中分离 lambda 参数列表。 若要创建 Lambda 表达式，需要在 Lambda 运算符左侧指定输入参数（如果有），然后在另一侧输入表达式或语句块。 任何 Lambda 表达式都可以转换为委托类型。 Lambda 表达式可以转换的委托类型由其参数和返回值的类型定义。如果 lambda 表达式不返回值，则可以将其转换为 Action 委托类型之一；否则，可将其转换为 Func 委托类型之一。 例如，有 2 个参数且不返回值的 Lambda 表达式可转换为 Action&lt;T1,T2&gt; 委托。 有 1 个参数且不返回值的 Lambda 表达式可转换为 Func&lt;T,TResult&gt; 委托。 以下示例中，lambda 表达式 x =&gt; x * x （指定名为 x 的参数并返回 x 平方值）将分配给委托类型的变量： 1234Func&lt;int, int&gt; square = x =&gt; x * x;Console.WriteLine(square(5));// Output:// 25 仅当 lambda 只有一个输入参数时，括号才是可选的；否则括号是必需的。 12345678910// 使用空括号指定零个输入参数：Action line = () =&gt; Console.WriteLine();// 括号内的两个或更多输入参数使用逗号加以分隔：Func&lt;int, int, bool&gt; testForEquality = (x, y) =&gt; x == y;// 有时，编译器无法推断输入类型。 可以显式指定类型，如下面的示例所示：Func&lt;int, string, bool&gt; isTooLong = (int x, string s) =&gt; s.Length &gt; x;// 输入参数类型必须全部为显式或全部为隐式； Statement lambda1234567891011(input-parameters) =&gt; &#123; &lt;sequence-of-statements&gt; &#125;Func&lt;int, int, int&gt; func = (x, y) =&gt; &#123; for (int i = 0; i &lt; y; i++) &#123; x += i; &#125; return x; &#125;; 展开/折叠示例]]></content>
  </entry>
  <entry>
    <title><![CDATA[工作日志]]></title>
    <url>%2F%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97.html</url>
    <content type="text"><![CDATA[写在前面 记录所有项目工作日志以便查询，年份、项目号分类 2020March3郑州日产登录工位偶发卡死现象处理1、更改原有C++程序，在更新登录表处增加try…catch…2、用新程序替换，程序中UDP更新服务器表格应在程序处理前 解决方式：更新登录表数据增加超时时间为0解决 金华零跑MES 7月青岛五菱双轴制动台改单轴测试小轴距E50ABS现场制动台车型获取说明:扫完VIN后通过桌面上小黄车的软件从MES获取车型信息包括轴距、ABS类型等，调用的测试流程在SpecialNeed中进行判断赋值，车型库不需要手动维护，MES下载后自动维护。现场更新不兼容程序有： CANCmdLib.dllCanCmdOpraLib.dll 更改后100V车型K线通讯出现指令数据丢失MBKDeviceWithOPC.dll 更新后无法控制滚筒转动 E50ABS程序中读取DTC无法判断五菱现场的当前故障码 8月郑州日产增加compactor标定 中牟日产增加国六打印程序，客户只查看不打印，很多信息均从客户配置的excel中读取 9月十堰小康RFID调试、国六数据上传国家 长春一汽轿车新增E111ESP标定和动态测试，跟205、141程序一样。 更改4线服务器线号更改3线转毂线号，速度表主键丢失导致 一汽红旗更新绝缘检测程序，提升20s测试节拍调试HUD，测试完成传结果给手持，更改测试项判断修正界面显示整体合格]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python爬虫基础]]></title>
    <url>%2FPython%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80.html</url>
    <content type="text"><![CDATA[HTTPURL格式：http://host[:port][path]host：合法的Internet主机域名或IP地址port：端口号，默认为80path：请求资源的路径 Urllib Urllib库 说明 urllib.request 请求模块 urllib.error 异常处理模块 urllib.parse url解析模块 urllib.robotparser robots.txt解析模块 urllib.request.urlopen(url,data=None,[timeout,]*,cafile=None,cadefault=False,context=None) Requests1r = requests.get(url,params=None,**kwargs) Requests方法 说明 requests.request() 构造一个请求，支撑以下各方法 requests.get() 获取HTML网页，对应HTTP的GET requests.head() 获取HTMLheader，对应HTML的HEAD requests.post() 向HTML网页提交POST请求 requests.put() 向HTML网页提交PUT请求 requests.patch() 向HTML网页提交局部修改请求 requests.delete() 向HTML网页提交删除请求 Requests对象属性 说明 r.status_code HTTP请求返回的状态，200连接成功，404表示失败 r.text HTTP响应内容的字符串形式，URL对应的页面内容 r.encoding HTTP header中猜测的响应内容编码方式 r.apparent_encoding 内容中分析出的响应内容编码格式（备选编码格式） r.content HTTP响应内容的二进制格式 r.encoding：如果header中不存在charset，则默认编码为ISO-8859-1(不支持解析中文)将r.apparent_encoding设置为utf-8可解决上述可能出现乱码问题 baidu搜索关键词百度搜索关键词对应：wd=keyword 12kv = &#123;'wd':'Python'&#125;r = requests.get("http://www.baidu.com/s",params = kv) 通用代码框架123456789101112131415import requestsdef GetHTMLText(url): try: header = &#123;'user-agent':'Mozilla/5.0'&#125; r = requests.get(url,headers=header) r.raise_for_status() #如果状态不是200则引发HTTPError异常 r.encoding = r.apparent_encoding return r.text except: return "异常"if __name__ == "__main__": url = "http://" print(GetHTMLText(url)) 信息标记形式XML标签、属性、内容 123&lt;name&gt; ... &lt;/name&gt;&lt;name /&gt;&lt;!-- --&gt; JSON有类型的键值对表示无法注释 123"key":"value""key":["value1","value2"]"key":&#123;"subkey":"subvalue"&#125; YAML无类型键值对 123456key:valuekey:#comments-value1-value2key: subkey:subvalue Selenium声明浏览器对象1234567from selenium import webdriverbrowser = webdriver.Chrome()browser = webdriver.Firefox()browser = webdriver.Edge()browser = webdriver.Safari()browser = webdriver.PhantomJS() 1234567891011121314151617# 打开网页browser = webdriver.Chrome()browser.get("https://www.baidu.com")print(browser.page_source)browser.close()#查找单个元素first = browser.find_element_by_id('q')second = browser.find_element_by_css_selector('#q')# #表示id,.表示类,不加前缀表示标签third = browser.find_element_by_xpath('//*[@id="q"]')print(first,second,third)## 通用方法from selenium.webdriver.common.by import Bycommon = browser.find_element(By.ID,'q')commons = browser.find_elements(By.ID,'q') # 查找多个元素browser.close() 元素交互实现淘宝搜索功能123456789101112from selenium import webdriverimport timebrowser = webdriver.Chrome()browser.get("https://www.taobao.com")input = browser.find_element_by_id('q') #找到网页中搜索框对应的idinput.send_keys('iPhone') #向搜索框中传递的参数time.sleep(1)input.clear()input.send_keys('iPad')button = browser.find_element_by_class_name('btn_search') #找到搜索按钮对应的namebutton.click() 实例爬取图片、视频等展开/折叠示例 123456789101112131415161718import requestsimport osurl = ""root = "D://Python//Pic"path = root + url.split('/')[-1]try: if not os.path.exists(root): os.mkdir(root) if not os.path.exists(path): r = requests.get(url) with open(path,'wb') as f f.write(r.content) f.close() print("文件保存成功") else: print("文件已存在")except: print("爬取失败")]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络学习随记]]></title>
    <url>%2F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0.html</url>
    <content type="text"><![CDATA[写在前面 应用层-表示层-会话层---HTTP/FTP/DNS/Telnet... 传输层---TCP/UDP 网络层---IP/ARP/ICMP/RARP 数据链路层 物理层 物理层-Bit流 数据链路层 帧交换机 可识别MACFCS|Data|SIP|DIP|SMAC|DMAC 网络层 包协议IP、ARP、ICMP、IGMP路由器 可识别IPData|SIP|DIP ARPARP广播查询目标MAC地址ipconfig /all查看网卡MACarp -a查询局域网内MACARP欺骗arp -s ip mac设置静态MAC(更改网络通讯中IP对应的MAC)网卡属性中修复可重置 ICMPPING-Packet Internet Grope因特网包探索器ping局域网延迟一般小于10msTTL数据包生存周期，每过一个路由-1，防止网络回路ping ip -i n 通过n值查看途经路由器IP默认TTL： Linux : 64Windows : 128Unix : 255 tracert ip 跟踪数据包路径pathping 跟踪数据包路径，计算丢包情况 路由静态路由 管理员配置路径动态路由 RIP协议 最大15级 传输层netstat -n查看会话netstat -nb查看会话及会话进程netstat -an查看监听端口 端口16位常用端口：0-1023登机端口：1024-49151客户端端口：49152-65535常见应用层协议端口 协议 端口 http TCP:80 https TCP:443 ftp TCP:21 RDP TCP:3389 远程桌面 SMTP TCP:25 POP3 TCP:110 Telnet TCP:23 SQL TCP:1433 DNS UDP:53(一般) 套接字socket=IP:Port 其他设置开/关机/登录启动脚本gpedit.msc 展开/折叠示例]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python script save somethings]]></title>
    <url>%2FPython%20script%20save%20somethings.html</url>
    <content type="text"><![CDATA[写在前面 保存图片urllib用法：urlretrieve(url, filename=None, reporthook=None, data=None) 参数 finename 指定了保存本地路径（如果参数未指定，urllib会生成一个临时文件保存数据）参数 reporthook 是一个回调函数，当连接上服务器、以及相应的数据块传输完毕时会触发该回调，我们可以利用这个回调函数来显示当前的下载进度参数 data 指 post 到服务器的数据，该方法返回一个包含两个元素的(filename, headers)元组，filename 表示保存到本地的路径，header 表示服务器的响应头 123456789# -*- coding: utf-8 -*-import urllib#常用img_src = 'http://724.169pp.net/bizhi/2017/039/1.jpg'urllib.request.urlretrieve(img_src,r'C:\\Users\\ME\\Desktop\\1.jpg')#seconddata = urllib.urlopen(img_src).read()with open("bbb.jpg", "wb")as f: # wb是写二进制 f.write(data) PIL+requestsPIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用requests是python实现的最简单易用的HTTP库，建议爬虫使用requests库。默认安装好python之后，是没有安装requests模块的，需要单独通过pip安装BytesIO是用来操作二进制数据的，因为图片是二进制数据，和它相对的自然是StringIO，这是用来存str的。他们的区别就好似python读写普通文件和二进制文件 1234567891011121314# -*- coding: utf-8 -*-import requestsfrom PIL import Imagefrom io import BytesIOimg_src = 'http://724.169pp.net/bizhi/2017/039/1.jpg'response = requests.get(img_src)image = Image.open(BytesIO(response.content))#image = Image.open(StringIO(response.content))image.save(r'C:\\Users\\ME\\Desktop\\' + '1.jpg')#second 常用src = "https://i0.hdslb.com/bfs/sycp/creative_img/201912/01b2f081d58e49c708c1d32b7b8c20ed.jpg"#r = requests.get(src,headers=header)with open("bbb.jpg", "wb")as f: # wb是写二进制 f.write(requests.get(src,headers=header).content) 保存视频1234567import reimport requestsresponse = requests.get('https://vd4.bdstatic.com/mda-jcrx64vi5vct2d2u/sc/mda-jcrx64vi5vct2d2u.mp4?auth_key=1557734214-0-0-d6a29a90222c6caf233e8a2a34c2e37a&amp;bcevod_channel=searchbox_feed&amp;pd=bjh&amp;abtest=all')video = response.content #把文件保存成二进制with open(r'D:\图片\绿色.mp4','wb') as fw: fw.write(video) #将文件内容写入该文件 fw.flush() #刷新 展开/折叠示例]]></content>
      <categories>
        <category>Python3</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python learning - Script]]></title>
    <url>%2FPython%20learning%20-%20Script.html</url>
    <content type="text"><![CDATA[写在前面 例：获取Bilibili播放量点击展开/折叠示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# -*- coding: UTF-8 -*-from urllib.request import urlopenfrom bs4 import BeautifulSoupimport requestsimport csvimport timeimport urllibimport refrom selenium import webdriver#html = requests.get("https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=1")#html = urlopen("https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=1")#html.encoding = 'utf-8'with open("test.csv", "w+") as csvfile: writer = csv.writer(csvfile, delimiter=',') writer.writerow(["Name", "Viewers"]) for i in range(1,50): option = webdriver.ChromeOptions() # 设置不加载页面 option.add_argument("headless") # 设置默认编码为 utf-8 option.add_argument('lang=zh_CN.UTF-8') option.add_argument('--disable - plugins') #option.add_argument('blink-settings=imagesEnabled=false') #prefs = &#123;"profile.managed_default_content_settings.images": 2&#125; #option.add_experimental_option("prefs", prefs) driver = webdriver.Chrome(chrome_options=option) html = "https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=" + str(i) print(html) html.encode('utf-8') driver.get(html) time.sleep(3) driver.minimize_window() bsObj = BeautifulSoup(driver.page_source.replace('&amp;nbsp;', ' '),"lxml") #AnimeList = bsObj.select("bangumi-item") AnimeList = bsObj.findAll(class_="bangumi-item") for ani in AnimeList: writer.writerow([ani.find("a",class_="bangumi-title").get_text(),ani.find("div",class_="shadow").get_text()]) url = ani.find("div",class_="common-lazy-img").find("img")['src'] if len(url) &lt; 2: continue reg = re.search(r'@(.*)',url).group() url = url.replace('//','https://').replace(reg,'') urllib.request.urlretrieve(url,"&#123;0&#125;.jpg".format(ani.find("a",class_="bangumi-title").get_text().replace('/','-'))) #with open("testpic.png","wb") as pic: #pic.write(response.content) driver.quit()'''except: print("报错退出")finally: driver.quit()'''#for anime in AnimeList: #print(anime.find("a",class_="bangumi-title").get_text())'''taskkill /im chromedriver.exe /F taskkill /im chrome.exe /F''' chrome OptionschromeOptions 是一个配置 chrome 启动是属性的类。通过这个类，我们可以为chrome配置如下参数： 设置 chrome 二进制文件位置 (binary_location)添加启动参数 (add_argument)添加扩展应用 (add_extension, add_encoded_extension)添加实验性质的设置参数 (add_experimental_option)设置调试器地址 (debugger_address) 1234567891011121314# .\Lib\site-packages\selenium\webdriver\chrome\options.pyclass Options(object): def __init__(self): # 设置 chrome 二进制文件位置 self._binary_location = '' # 添加启动参数 self._arguments = [] # 添加扩展应用 self._extension_files = [] self._extensions = [] # 添加实验性质的设置参数 self._experimental_options = &#123;&#125; # 设置调试器地址 self._debugger_address = None 常用配置点击展开/折叠示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556from selenium import webdriveroptions = webdriver.ChromeOptions()# 设置默认编码为 utf-8options.add_argument('lang=zh_CN.UTF-8')# 禁止图片的加载prefs = &#123;"profile.managed_default_content_settings.images": 2&#125;options.add_experimental_option("prefs", prefs)# 设置无账号密码的代理options.add_argument('--proxy-server=http://ip:port') # 设置有账号密码的代理proxyauth_plugin_path = create_proxyauth_extension( proxy_host='host', proxy_port='port', proxy_username="username", proxy_password="password" )options.add_extension(proxyauth_plugin_path)options.add_argument('window-size=1920x3000') # 指定浏览器分辨率options.add_argument('--disable-gpu') # 谷歌文档提到需要加上这个属性来规避bugoptions.add_argument('--disable-infobars') # 禁用浏览器正在被自动化程序控制的提示options.add_argument('--hide-scrollbars') # 隐藏滚动条, 应对一些特殊页面options.add_argument('blink-settings=imagesEnabled=false') # 不加载图片, 提升速度options.add_argument('--headless') # 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败options.binary_location = r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" # 手动指定使用的浏览器位置''' –user-data-dir=”[PATH]” 指定用户文件夹User Data路径，可以把书签这样的用户数据保存在系统分区以外的分区。 –disk-cache-dir=”[PATH]“ 指定缓存Cache路径 –disk-cache-size= 指定Cache大小，单位Byte –first run 重置到初始状态，第一次运行 –incognito 隐身模式启动 –disable-javascript 禁用Javascript --omnibox-popup-count="num" 将地址栏弹出的提示菜单数量改为num个。我都改为15个了。 --user-agent="xxxxxxxx" 修改HTTP请求头部的Agent字符串，可以通过about:version页面查看修改效果 --disable-plugins 禁止加载所有插件，可以增加速度。可以通过about:plugins页面查看效果 --disable-javascript 禁用JavaScript，如果觉得速度慢在加上这个 --disable-java 禁用java --start-maximized 启动就最大化 --no-sandbox 取消沙盒模式 --single-process 单进程运行 --process-per-tab 每个标签使用单独进程 --process-per-site 每个站点使用单独进程 --in-process-plugins 插件不启用单独进程 --disable-popup-blocking 禁用弹出拦截 --disable-plugins 禁用插件 --disable-images 禁用图像 --incognito 启动进入隐身模式 --enable-udd-profiles 启用账户切换菜单 --proxy-pac-url 使用pac代理 [via 1/2] --lang=zh-CN 设置语言为简体中文 --disk-cache-dir 自定义缓存目录 --disk-cache-size 自定义缓存最大值（单位byte） --media-cache-size 自定义多媒体缓存最大值（单位byte） --bookmark-menu 在工具 栏增加一个书签按钮 --enable-sync 启用书签同步'''driver = webdriver.Chrome(chrome_options = options)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSharp调用SQL存储过程]]></title>
    <url>%2FCSharp%E8%B0%83%E7%94%A8SQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html</url>
    <content type="text"><![CDATA[写在前面 C# 执行SQLServer数据库中的存储过程，新增数据 123456789存储过程名：SP_Check_Equipotential 参数： @Part2GNDInfo varchar(3000),-- @Part2GND decimal(3,2),-- @Resultflag int output,--1保存成功 0保存失败 @ResultMessage varchar(4000)output--返回success 或 错误信息 返回值： @Resultflag int output,--1保存成功 0保存失败 @ResultMessage varchar(4000)output--返回success 或 错误信息 展开/折叠示例 1234567891011121314151617181920212223SqlConnection DbConnection = new SqlConnection(m_MESConnString);SqlCommand command = new SqlCommand("SP_Check_Equipotential", DbConnection);DbConnection.Open();InitCommand(ref command);command.Parameters["@Part2GNDInfo"].Value = Part2GNDInfo;command.Parameters["@Part2GND"].Value = Convert.ToDecimal(mo2o(dr["步骤一最大值"],true));command.ExecuteNonQuery();int result = command.Parameters["@Resultflag"].Value.zInt32();string ResultMessage = command.Parameters["@ResultMessage"].Value.ToString();private static void InitCommand(ref SqlCommand command)&#123; command.CommandType = CommandType.StoredProcedure; command.Parameters.Add("@Part2GNDInfo", SqlDbType.VarChar, 3000); SqlParameter Part2GND = new SqlParameter("@Part2GND", SqlDbType.Decimal); Part2GND.Precision = 3; Part2GND.Scale = 2; command.Parameters.Add(Part2GND); command.Parameters.Add("@Resultflag", SqlDbType.Int, 1); command.Parameters["@Resultflag"].Direction = ParameterDirection.Output; command.Parameters.Add("@ResultMessage", SqlDbType.VarChar, 4000); command.Parameters["@ResultMessage"].Direction = ParameterDirection.Output;&#125;]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上汽通用五菱]]></title>
    <url>%2F%E4%B8%8A%E6%B1%BD%E9%80%9A%E7%94%A8%E4%BA%94%E8%8F%B1.html</url>
    <content type="text"><![CDATA[写在前面 上汽通用五菱现场跟其他现场程序主要区别在于`PlatABS`，及时记录每次更改。 程序路径在D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS 柳州20191125在RBABS_SGMW增加齿讯学习 青岛印尼]]></content>
      <categories>
        <category>现场</category>
      </categories>
      <tags>
        <tag>上汽</tag>
        <tag>五菱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git command]]></title>
    <url>%2Fgit%20command.html</url>
    <content type="text"><![CDATA[写在前面 BashBash 常用命令 command 说明 cd 切换目录 pwd 查看当前目录 ls(ll) 查看当前目录文件 touch file.* 新建文件 rm file.* 删除文件 mkdir fold 新建文件夹 rm -r fold 删除文件夹 mv file destfold file 移动文件 clear 清屏 history 查看历史命令 git设置用户名与邮箱git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;email@example.com&quot; command 说明 git init 在指定路径下执行，创建本地仓库 git config -l 查看git环境详细配置 git config –system –list 查看系统config git config –global –list 查看当前用户（global）配置 git config –local –list 查看当前仓库配置信息 git add 提交文件到暂存区，多个文件空格分开 git commit 提交到仓库分支 git commit -m “说明” 添加本次提交的说明便于查看更改记录 git log 历史版本信息 Git中版本用HEAD做标识，当前版本为HEAD，上一个版本是HEAD^ git reset –hard HEAD^ 退回到上个版本 git reset –hard commit_id HEAD 可用commit id前几位 git reflog 查看之前所有版本信息 git status 查看状态 git diff HEAD – file 查看工作区与版本库中的区别 git checkout – file 将工作区恢复到暂存区或版本库中的内容 git reset HEAD file 将暂存区恢复到版本库的内容 git rm file 删除文件 git remote add origin git@github.com:yourgithubname/Repositoryname.git 关联远程库 git push -u origin master 将本地仓库推送到远程仓库master分支并关联本地master分支 git push origin master 推送到远程master分支 git clone git@github.com:githubname/Repositoryname.git clone到本地 git branch bra 创建bra分支 git checkout bra 切换到bra分支 git checkout -b bra 等效于上面两条指令 git branch 查看分支，当前分支用*标识，切换分支后提交到当前分支 git checkout master 切换到master分支 git merge 合并指定分支到当前分支 git branch -d bra 删除bra分支 git switch -c bra 创建并切换分支 git switch master 切换到master分支]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[IDMDownload]]></title>
    <url>%2FIDMDownload.html</url>
    <content type="text"><![CDATA[写在前面 Google Chrome 利用IDM下载器下载资源，可下载百度网盘资源 安装Google Chrome安装浏览器插件Tampermonkey安装百度网盘直接下载助手脚本安装IDM integration Module]]></content>
  </entry>
  <entry>
    <title><![CDATA[IBMMQ错误代码]]></title>
    <url>%2FIBMMQ%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81.html</url>
    <content type="text"><![CDATA[写在前面 IBM官方说明：https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.0.0/com.ibm.mq.tro.doc/q040710_.htm ErrorCode Description 0 (0000) (RC0): MQRC_NONE 900 (0384) (RC900) MQRC_APPL_FIRST 999 (03E7) (RC999) MQRC_APPL_LAST 2001 (07D1) (RC2001) MQRC_ALIAS_BASE_Q_TYPE_ERROR 2002 (07D2) (RC2002) MQRC_ALREADY_CONNECTED 2003 (07D3) (RC2003) MQRC_BACKED_OUT 2004 (07D4) (RC2004) MQRC_BUFFER_ERROR 2005 (07D5) (RC2005) MQRC_BUFFER_LENGTH_ERROR 2006 (07D6) (RC2006) MQRC_CHAR_ATTR_LENGTH_ERROR 2007 (07D7) (RC2007) MQRC_CHAR_ATTRS_ERROR 2008 (07D8) (RC2008) MQRC_CHAR_ATTRS_TOO_SHORT 2009 (07D9) (RC2009) MQRC_CONNECTION_BROKEN 2010 (07DA) (RC2010) MQRC_DATA_LENGTH_ERROR 2011 (07DB) (RC2011) MQRC_DYNAMIC_Q_NAME_ERROR 2012 (07DC) (RC2012) MQRC_ENVIRONMENT_ERROR 2013 (07DD) (RC2013) MQRC_EXPIRY_ERROR 2014 (07DE) (RC2014) MQRC_FEEDBACK_ERROR 2016 (07E0) (RC2016) MQRC_GET_INHIBITED 2017 (07E1) (RC2017) MQRC_HANDLE_NOT_AVAILABLE 2018 (07E2) (RC2018) MQRC_HCONN_ERROR 2019 (07E3) (RC2019) MQRC_HOBJ_ERROR 2020 (07E4) (RC2020) MQRC_INHIBIT_VALUE_ERROR 2021 (07E5) (RC2021) MQRC_INT_ATTR_COUNT_ERROR 2022 (07E6) (RC2022) MQRC_INT_ATTR_COUNT_TOO_SMALL 2023 (07E7) (RC2023) MQRC_INT_ATTRS_ARRAY_ERROR 2024 (07E8) (RC2024) MQRC_SYNCPOINT_LIMIT_REACHED 2025 (07E9) (RC2025) MQRC_MAX_CONNS_LIMIT_REACHED 2026 (07EA) (RC2026) MQRC_MD_ERROR 2027 (07EB) (RC2027) MQRC_MISSING_REPLY_TO_Q 2029 (07ED) (RC2029) MQRC_MSG_TYPE_ERROR 2030 (07EE) (RC2030) MQRC_MSG_TOO_BIG_FOR_Q 2031 (07EF) (RC2031) MQRC_MSG_TOO_BIG_FOR_Q_MGR 2033 (07F1) (RC2033) MQRC_NO_MSG_AVAILABLE 2034 (07F2) (RC2034) MQRC_NO_MSG_UNDER_CURSOR 2035 (07F3) (RC2035) MQRC_NOT_AUTHORIZED 2036 (07F4) (RC2036) MQRC_NOT_OPEN_FOR_BROWSE 2037 (07F5) (RC2037) MQRC_NOT_OPEN_FOR_INPUT 2038 (07F6) (RC2038) MQRC_NOT_OPEN_FOR_INQUIRE 2039 (07F7) (RC2039) MQRC_NOT_OPEN_FOR_OUTPUT 2040 (07F8) (RC2040) MQRC_NOT_OPEN_FOR_SET 2041 (07F9) (RC2041) MQRC_OBJECT_CHANGED 2042 (07FA) (RC2042) MQRC_OBJECT_IN_USE 2043 (07FB) (RC2043) MQRC_OBJECT_TYPE_ERROR 2044 (07FC) (RC2044) MQRC_OD_ERROR 2045 (07FD) (RC2045) MQRC_OPTION_NOT_VALID_FOR_TYPE 2046 (07FE) (RC2046) MQRC_OPTIONS_ERROR 2047 (07FF) (RC2047) MQRC_PERSISTENCE_ERROR 2048 (0800) (RC2048) MQRC_PERSISTENT_NOT_ALLOWED 2049 (0801) (RC2049) MQRC_PRIORITY_EXCEEDS_MAXIMUM 2050 (0802) (RC2050) MQRC_PRIORITY_ERROR 2051 (0803) (RC2051) MQRC_PUT_INHIBITED 2052 (0804) (RC2052) MQRC_Q_DELETED 2053 (0805) (RC2053) MQRC_Q_FULL 2055 (0807) (RC2055) MQRC_Q_NOT_EMPTY 2056 (0808) (RC2056) MQRC_Q_SPACE_NOT_AVAILABLE 2057 (0809) (RC2057) MQRC_Q_TYPE_ERROR 2058 (080A) (RC2058) MQRC_Q_MGR_NAME_ERROR 2059 (080B) (RC2059) MQRC_Q_MGR_NOT_AVAILABLE 2061 (080D) (RC2061) MQRC_REPORT_OPTIONS_ERROR [z/OS]2062 (080E) (RC2062) MQRC_SECOND_MARK_NOT_ALLOWED 2063 (080F) (RC2063) MQRC_SECURITY_ERROR 2065 (0811) (RC2065) MQRC_SELECTOR_COUNT_ERROR 2066 (0812) (RC2066) MQRC_SELECTOR_LIMIT_EXCEEDED 2067 (0813) (RC2067) MQRC_SELECTOR_ERROR 2068 (0814) (RC2068) MQRC_SELECTOR_NOT_FOR_TYPE [z/OS][Windows]2069 (0815) (RC2069) MQRC_SIGNAL_OUTSTANDING [z/OS][Windows]2070 (0816) (RC2070) MQRC_SIGNAL_REQUEST_ACCEPTED 2071 (0817) (RC2071) MQRC_STORAGE_NOT_AVAILABLE 2072 (0818) (RC2072) MQRC_SYNCPOINT_NOT_AVAILABLE 2075 (081B) (RC2075) MQRC_TRIGGER_CONTROL_ERROR 2076 (081C) (RC2076) MQRC_TRIGGER_DEPTH_ERROR 2077 (081D) (RC2077) MQRC_TRIGGER_MSG_PRIORITY_ERR 2078 (081E) (RC2078) MQRC_TRIGGER_TYPE_ERROR 2079 (081F) (RC2079) MQRC_TRUNCATED_MSG_ACCEPTED 2080 (0820) (RC2080) MQRC_TRUNCATED_MSG_FAILED 2082 (0822) (RC2082) MQRC_UNKNOWN_ALIAS_BASE_Q 2085 (0825) (RC2085) MQRC_UNKNOWN_OBJECT_NAME 2086 (0826) (RC2086) MQRC_UNKNOWN_OBJECT_Q_MGR 2087 (0827) (RC2087) MQRC_UNKNOWN_REMOTE_Q_MGR 2090 (082A) (RC2090) MQRC_WAIT_INTERVAL_ERROR 2091 (082B) (RC2091) MQRC_XMIT_Q_TYPE_ERROR 2092 (082C) (RC2092) MQRC_XMIT_Q_USAGE_ERROR 2093 (082D) (RC2093) MQRC_NOT_OPEN_FOR_PASS_ALL 2094 (082E) (RC2094) MQRC_NOT_OPEN_FOR_PASS_IDENT 2095 (082F) (RC2095) MQRC_NOT_OPEN_FOR_SET_ALL 2096 (0830) (RC2096) MQRC_NOT_OPEN_FOR_SET_IDENT 2097 (0831) (RC2097) MQRC_CONTEXT_HANDLE_ERROR 2098 (0832) (RC2098) MQRC_CONTEXT_NOT_AVAILABLE [z/OS][Windows]2099 (0833) (RC2099) MQRC_SIGNAL1_ERROR 2100 (0834) (RC2100) MQRC_OBJECT_ALREADY_EXISTS 2101 (0835) (RC2101) MQRC_OBJECT_DAMAGED 2102 (0836) (RC2102) MQRC_RESOURCE_PROBLEM [UNIX, Linux, Windows, IBM i]2103 (0837) (RC2103) MQRC_ANOTHER_Q_MGR_CONNECTED 2104 (0838) (RC2104) MQRC_UNKNOWN_REPORT_OPTION [z/OS]2105 (0839) (RC2105) MQRC_STORAGE_CLASS_ERROR [z/OS]2106 (083A) (RC2106) MQRC_COD_NOT_VALID_FOR_XCF_Q 2107 (083B) (RC2107) MQRC_XWAIT_CANCELED [z/OS]2108 (083C) (RC2108) MQRC_XWAIT_ERROR 2109 (083D) (RC2109) MQRC_SUPPRESSED_BY_EXIT 2110 (083E) (RC2110) MQRC_FORMAT_ERROR 2111 (083F) (RC2111) MQRC_SOURCE_CCSID_ERROR 2112 (0840) (RC2112) MQRC_SOURCE_INTEGER_ENC_ERROR 2113 (0841) (RC2113) MQRC_SOURCE_DECIMAL_ENC_ERROR 2114 (0842) (RC2114) MQRC_SOURCE_FLOAT_ENC_ERROR 2115 (0843) (RC2115) MQRC_TARGET_CCSID_ERROR 2116 (0844) (RC2116) MQRC_TARGET_INTEGER_ENC_ERROR 2117 (0845) (RC2117) MQRC_TARGET_DECIMAL_ENC_ERROR 2118 (0846) (RC2118) MQRC_TARGET_FLOAT_ENC_ERROR 2119 (0847) (RC2119) MQRC_NOT_CONVERTED 2120 (0848) (RC2120) MQRC_CONVERTED_MSG_TOO_BIG [IBM i][UNIX][Windows]2121 (0849) (RC2121) MQRC_NO_EXTERNAL_PARTICIPANTS [IBM i][UNIX][Windows]2122 (084A) (RC2122) MQRC_PARTICIPANT_NOT_AVAILABLE [UNIX][Windows]2123 (084B) (RC2123) MQRC_OUTCOME_MIXED [UNIX][Windows][z/OS]2124 (084C) (RC2124) MQRC_OUTCOME_PENDING 2125 (084D) (RC2125) MQRC_BRIDGE_STARTED 2126 (084E) (RC2126) MQRC_BRIDGE_STOPPED [z/OS]2127 (084F) (RC2127) MQRC_ADAPTER_STORAGE_SHORTAGE [IBM i][UNIX][Windows]2128 (0850) (RC2128) MQRC_UOW_IN_PROGRESS [z/OS]2129 (0851) (RC2129) MQRC_ADAPTER_CONN_LOAD_ERROR [z/OS]2130 (0852) (RC2130) MQRC_ADAPTER_SERV_LOAD_ERROR [z/OS]2131 (0853) (RC2131) MQRC_ADAPTER_DEFS_ERROR [z/OS]2132 (0854) (RC2132) MQRC_ADAPTER_DEFS_LOAD_ERROR [z/OS]2133 (0855) (RC2133) MQRC_ADAPTER_CONV_LOAD_ERROR [IBM i][UNIX][Windows]2134 (0856) (RC2134) MQRC_BO_ERROR [IBM i][UNIX][Windows]2135 (0857) (RC2135) MQRC_DH_ERROR [IBM i][UNIX][Windows]2136 (0858) (RC2136) MQRC_MULTIPLE_REASONS [IBM i][UNIX][Windows]2137 (0859) (RC2137) MQRC_OPEN_FAILED [z/OS]2138 (085A) (RC2138) MQRC_ADAPTER_DISC_LOAD_ERROR [IBM i][UNIX][Windows]2139 (085B) (RC2139) MQRC_CNO_ERROR [z/OS]2140 (085C) (RC2140) MQRC_CICS_WAIT_FAILED 2141 (085D) (RC2141) MQRC_DLH_ERROR 2142 (085E) (RC2142) MQRC_HEADER_ERROR 2143 (085F) (RC2143) MQRC_SOURCE_LENGTH_ERROR 2144 (0860) (RC2144) MQRC_TARGET_LENGTH_ERROR 2145 (0861) (RC2145) MQRC_SOURCE_BUFFER_ERROR 2146 (0862) (RC2146) MQRC_TARGET_BUFFER_ERROR [Windows][V9.0.0.6 Mar 2019]2147 (0863) (RC2147) MQRC_INCOMPLETE_TRANSACTION 2148 (0864) (RC2148) MQRC_IIH_ERROR 2149 (0865) (RC2149) MQRC_PCF_ERROR 2150 (0866) (RC2150) MQRC_DBCS_ERROR [IBM i][UNIX][Windows]2152 (0868) (RC2152) MQRC_OBJECT_NAME_ERROR [IBM i][UNIX][Windows]2153 (0869) (RC2153) MQRC_OBJECT_Q_MGR_NAME_ERROR [IBM i][UNIX][Windows]2154 (086A) (RC2154) MQRC_RECS_PRESENT_ERROR [IBM i][UNIX][Windows]2155 (086B) (RC2155) MQRC_OBJECT_RECORDS_ERROR [IBM i][UNIX][Windows]2156 (086C) (RC2156) MQRC_RESPONSE_RECORDS_ERROR [z/OS]2157 (086D) (RC2157) MQRC_ASID_MISMATCH [IBM i][UNIX][Windows]2158 (086E) (RC2158) MQRC_PMO_RECORD_FLAGS_ERROR [IBM i][UNIX][Windows]2159 (086F) (RC2159) MQRC_PUT_MSG_RECORDS_ERROR [z/OS]2160 (0870) (RC2160) MQRC_CONN_ID_IN_USE 2161 (0871) (RC2161) MQRC_Q_MGR_QUIESCING 2162 (0872) (RC2162) MQRC_Q_MGR_STOPPING [z/OS]2163 (0873) (RC2163) MQRC_DUPLICATE_RECOV_COORD 2173 (087D) (RC2173) MQRC_PMO_ERROR 2182 (0886) (RC2182) MQRC_API_EXIT_NOT_FOUND 2183 (0887) (RC2183) MQRC_API_EXIT_LOAD_ERROR 2184 (0888) (RC2184) MQRC_REMOTE_Q_NAME_ERROR 2185 (0889) (RC2185) MQRC_INCONSISTENT_PERSISTENCE 2186 (088A) (RC2186) MQRC_GMO_ERROR [z/OS]2187 (088B) (RC2187) MQRC_CICS_BRIDGE_RESTRICTION 2188 (088C) (RC2188) MQRC_STOPPED_BY_CLUSTER_EXIT 2189 (088D) (RC2189) MQRC_CLUSTER_RESOLUTION_ERROR 2190 (088E) (RC2190) MQRC_CONVERTED_STRING_TOO_BIG [IBM i][UNIX][Windows]2191 (088F) (RC2191) MQRC_TMC_ERROR 2192 (0890) (RC2192) MQRC_PAGESET_FULL [z/OS]2192 (0890) (RC2192) MQRC_STORAGE_MEDIUM_FULL [z/OS]2193 (0891) (RC2193) MQRC_PAGESET_ERROR 2194 (0892) (RC2194) MQRC_NAME_NOT_VALID_FOR_TYPE 2195 (0893) (RC2195) MQRC_UNEXPECTED_ERROR 2196 (0894) (RC2196) MQRC_UNKNOWN_XMIT_Q 2197 (0895) (RC2197) MQRC_UNKNOWN_DEF_XMIT_Q 2198 (0896) (RC2198) MQRC_DEF_XMIT_Q_TYPE_ERROR 2199 (0897) (RC2199) MQRC_DEF_XMIT_Q_USAGE_ERROR [z/OS]2201 (0899) (RC2201) MQRC_NAME_IN_USE 2202 (089A) (RC2202) MQRC_CONNECTION_QUIESCING 2203 (089B) (RC2203) MQRC_CONNECTION_STOPPING [z/OS]2204 (089C) (RC2204) MQRC_ADAPTER_NOT_AVAILABLE 2206 (089E) (RC2206) MQRC_MSG_ID_ERROR 2207 (089F) (RC2207) MQRC_CORREL_ID_ERROR 2208 (08A0) (RC2208) MQRC_FILE_SYSTEM_ERROR 2209 (08A1) (RC2209) MQRC_NO_MSG_LOCKED 2210 (08A2) (RC2210) MQRC_SOAP_DOTNET_ERROR 2211 (08A3) (RC2211) MQRC_SOAP_AXIS_ERROR 2212 (08A4) (RC2212) MQRC_SOAP_URL_ERROR [z/OS]2217 (08A9) (RC2217) MQRC_CONNECTION_NOT_AUTHORIZED 2218 (08AA) (RC2218) MQRC_MSG_TOO_BIG_FOR_CHANNEL 2219 (08AB) (RC2219) MQRC_CALL_IN_PROGRESS 2220 (08AC) (RC2220) MQRC_RMH_ERROR 2222 (08AE) (RC2222) MQRC_Q_MGR_ACTIVE 2223 (08AF) (RC2223) MQRC_Q_MGR_NOT_ACTIVE 2224 (08B0) (RC2224) MQRC_Q_DEPTH_HIGH 2225 (08B1) (RC2225) MQRC_Q_DEPTH_LOW 2226 (08B2) (RC2226) MQRC_Q_SERVICE_INTERVAL_HIGH 2227 (08B3) (RC2227) MQRC_Q_SERVICE_INTERVAL_OK 2228 (08B4) (RC2228) MQRC_RFH_HEADER_FIELD_ERROR 2229 (08B5) (RC2229) MQRC_RAS_PROPERTY_ERROR 2232 (08B8) (RC2232) MQRC_UNIT_OF_WORK_NOT_STARTED [IBM i][UNIX][Windows]2233 (08B9) (RC2233) MQRC_CHANNEL_AUTO_DEF_OK [IBM i][UNIX][Windows]2234 (08BA) (RC2234) MQRC_CHANNEL_AUTO_DEF_ERROR [IBM i][UNIX][Windows]2235 (08BB) (RC2235) MQRC_CFH_ERROR [IBM i][UNIX][Windows]2236 (08BC) (RC2236) MQRC_CFIL_ERROR [IBM i][UNIX][Windows]2237 (08BD) (RC2237) MQRC_CFIN_ERROR [IBM i][UNIX][Windows]2238 (08BE) (RC2238) MQRC_CFSL_ERROR [IBM i][UNIX][Windows]2239 (08BF) (RC2239) MQRC_CFST_ERROR 2241 (08C1) (RC2241) MQRC_INCOMPLETE_GROUP 2242 (08C2) (RC2242) MQRC_INCOMPLETE_MSG [IBM i][UNIX][Windows]2243 (08C3) (RC2243) MQRC_INCONSISTENT_CCSIDS [IBM i][UNIX][Windows]2244 (08C4) (RC2244) MQRC_INCONSISTENT_ENCODINGS 2245 (08C5) (RC2245) MQRC_INCONSISTENT_UOW [IBM i][UNIX][Windows]2246 (08C6) (RC2246) MQRC_INVALID_MSG_UNDER_CURSOR 2247 (08C7) (RC2247) MQRC_MATCH_OPTIONS_ERROR 2248 (08C8) (RC2248) MQRC_MDE_ERROR 2249 (08C9) (RC2249) MQRC_MSG_FLAGS_ERROR 2250 (08CA) (RC2250) MQRC_MSG_SEQ_NUMBER_ERROR 2251 (08CB) (RC2251) MQRC_OFFSET_ERROR 2252 (08CC) (RC2252) MQRC_ORIGINAL_LENGTH_ERROR [IBM i][UNIX][Windows]2253 (08CD) (RC2253) MQRC_SEGMENT_LENGTH_ZERO [IBM i][UNIX][Windows]2255 (08CF) (RC2255) MQRC_UOW_NOT_AVAILABLE 2256 (08D0) (RC2256) MQRC_WRONG_GMO_VERSION 2257 (08D1) (RC2257) MQRC_WRONG_MD_VERSION [IBM i][UNIX][Windows]2258 (08D2) (RC2258) MQRC_GROUP_ID_ERROR [IBM i][UNIX][Windows]2259 (08D3) (RC2259) MQRC_INCONSISTENT_BROWSE 2260 (08D4) (RC2260) MQRC_XQH_ERROR [IBM i][UNIX][Windows]2261 (08D5) (RC2261) MQRC_SRC_ENV_ERROR [IBM i][UNIX][Windows]2262 (08D6) (RC2262) MQRC_SRC_NAME_ERROR [IBM i][UNIX][Linux]2263 (08D7) (RC2263) MQRC_DEST_ENV_ERROR [IBM i][UNIX][Windows]2264 (08D8) (RC2264) MQRC_DEST_NAME_ERROR 2265 (08D9) (RC2265) MQRC_TM_ERROR 2266 (08DA) (RC2266) MQRC_CLUSTER_EXIT_ERROR 2267 (08DB) (RC2267) MQRC_CLUSTER_EXIT_LOAD_ERROR 2268 (08DC) (RC2268) MQRC_CLUSTER_PUT_INHIBITED 2269 (08DD) (RC2269) MQRC_CLUSTER_RESOURCE_ERROR 2270 (08DE) (RC2270) MQRC_NO_DESTINATIONS_AVAILABLE [z/OS]2271 (08DF) (RC2271) MQRC_CONN_TAG_IN_USE 2272 (08E0) (RC2272) MQRC_PARTIALLY_CONVERTED 2273 (08E1) (RC2273) MQRC_CONNECTION_ERROR 2274 (08E2) (RC2274) MQRC_OPTION_ENVIRONMENT_ERROR [IBM i][UNIX][Windows]2277 (08E5) (RC2277) MQRC_CD_ERROR [IBM i][UNIX][Windows]2278 (08E6) (RC2278) MQRC_CLIENT_CONN_ERROR 2279 (08E7) (RC2279) MQRC_CHANNEL_STOPPED_BY_USER [UNIX, Linux, Windows, IBM i]2280 (08E8) (RC2280) MQRC_HCONFIG_ERROR [UNIX, Linux, Windows, IBM i]2281 (08E9) (RC2281) MQRC_FUNCTION_ERROR 2282 (08EA) (RC2282) MQRC_CHANNEL_STARTED 2283 (08EB) (RC2283) MQRC_CHANNEL_STOPPED 2284 (08EC) (RC2284) MQRC_CHANNEL_CONV_ERROR [UNIX, Linux, Windows, IBM i]2285 (08ED) (RC2285) MQRC_SERVICE_NOT_AVAILABLE [UNIX, Linux, Windows, IBM i]2286 (08EE) (RC2286) MQRC_INITIALIZATION_FAILED [UNIX, Linux, Windows, IBM i]2287 (08EF) (RC2287) MQRC_TERMINATION_FAILED [UNIX, Linux, Windows, IBM i]2288 (08F0) (RC2288) MQRC_UNKNOWN_Q_NAME [UNIX, Linux, Windows, IBM i]2289 (08F1) (RC2289) MQRC_SERVICE_ERROR [UNIX, Linux, Windows, IBM i]2290 (08F2) (RC2290) MQRC_Q_ALREADY_EXISTS [UNIX, Linux, Windows, IBM i]2291 (08F3) (RC2291) MQRC_USER_ID_NOT_AVAILABLE [UNIX, Linux, Windows, IBM i]2292 (08F4) (RC2292) MQRC_UNKNOWN_ENTITY [UNIX, Linux, Windows, IBM i]2294 (08F6) (RC2294) MQRC_UNKNOWN_REF_OBJECT 2295 (08F7) (RC2295) MQRC_CHANNEL_ACTIVATED 2296 (08F8) (RC2296) MQRC_CHANNEL_NOT_ACTIVATED 2297 (08F9) (RC2297) MQRC_UOW_CANCELED 2298 (08FA) (RC2298) MQRC_FUNCTION_NOT_SUPPORTED 2299 (08FB) (RC2299) MQRC_SELECTOR_TYPE_ERROR 2300 (08FC) (RC2300) MQRC_COMMAND_TYPE_ERROR 2301 (08FD) (RC2301) MQRC_MULTIPLE_INSTANCE_ERROR 2302 (08FE) (RC2302) MQRC_SYSTEM_ITEM_NOT_ALTERABLE 2303 (08FF) (RC2303) MQRC_BAG_CONVERSION_ERROR 2304 (0900) (RC2304) MQRC_SELECTOR_OUT_OF_RANGE 2305 (0901) (RC2305) MQRC_SELECTOR_NOT_UNIQUE 2306 (0902) (RC2306) MQRC_INDEX_NOT_PRESENT 2307 (0903) (RC2307) MQRC_STRING_ERROR 2308 (0904) (RC2308) MQRC_ENCODING_NOT_SUPPORTED 2309 (0905) (RC2309) MQRC_SELECTOR_NOT_PRESENT 2310 (0906) (RC2310) MQRC_OUT_SELECTOR_ERROR 2311 (0907) (RC2311) MQRC_STRING_TRUNCATED 2312 (0908) (RC2312) MQRC_SELECTOR_WRONG_TYPE 2313 (0909) (RC2313) MQRC_INCONSISTENT_ITEM_TYPE 2314 (090A) (RC2314) MQRC_INDEX_ERROR 2315 (090B) (RC2315) MQRC_SYSTEM_BAG_NOT_ALTERABLE 2316 (090C) (RC2316) MQRC_ITEM_COUNT_ERROR 2317 (090D) (RC2317) MQRC_FORMAT_NOT_SUPPORTED 2318 (090E) (RC2318) MQRC_SELECTOR_NOT_SUPPORTED 2319 (090F) (RC2319) MQRC_ITEM_VALUE_ERROR 2320 (0910) (RC2320) MQRC_HBAG_ERROR 2321 (0911) (RC2321) MQRC_PARAMETER_MISSING 2322 (0912) (RC2322) MQRC_CMD_SERVER_NOT_AVAILABLE 2323 (0913) (RC2323) MQRC_STRING_LENGTH_ERROR 2324 (0914) (RC2324) MQRC_INQUIRY_COMMAND_ERROR 2325 (0915) (RC2325) MQRC_NESTED_BAG_NOT_SUPPORTED 2326 (0916) (RC2326) MQRC_BAG_WRONG_TYPE 2327 (0917) (RC2327) MQRC_ITEM_TYPE_ERROR 2328 (0918) (RC2328) MQRC_SYSTEM_BAG_NOT_DELETABLE 2329 (0919) (RC2329) MQRC_SYSTEM_ITEM_NOT_DELETABLE 2330 (091A) (RC2330) MQRC_CODED_CHAR_SET_ID_ERROR 2331 (091B) (RC2331) MQRC_MSG_TOKEN_ERROR [z/OS]2332 (091C) (RC2332) MQRC_MISSING_WIH 2333 (091D) (RC2333) MQRC_WIH_ERROR 2334 (091E) (RC2334) MQRC_RFH_ERROR 2335 (091F) (RC2335) MQRC_RFH_STRING_ERROR 2336 (0920) (RC2336) MQRC_RFH_COMMAND_ERROR 2337 (0921) (RC2337) MQRC_RFH_PARM_ERROR 2338 (0922) (RC2338) MQRC_RFH_DUPLICATE_PARM 2339 (0923) (RC2339) MQRC_RFH_PARM_MISSING [z/OS]2340 (0924) (RC2340) MQRC_CHAR_CONVERSION_ERROR [z/OS]2341 (0925) (RC2341) MQRC_UCS2_CONVERSION_ERROR [z/OS]2342 (0926) (RC2342) MQRC_DB2_NOT_AVAILABLE [z/OS]2343 (0927) (RC2343) MQRC_OBJECT_NOT_UNIQUE [z/OS]2344 (0928) (RC2344) MQRC_CONN_TAG_NOT_RELEASED [z/OS]2345 (0929) (RC2345) MQRC_CF_NOT_AVAILABLE [z/OS]2346 (092A) (RC2346) MQRC_CF_STRUC_IN_USE [z/OS]2347 (092B) (RC2347) MQRC_CF_STRUC_LIST_HDR_IN_USE [z/OS]2348 (092C) (RC2348) MQRC_CF_STRUC_AUTH_FAILED [z/OS]2349 (092D) (RC2349) MQRC_CF_STRUC_ERROR [z/OS]2350 (092E) (RC2350) MQRC_CONN_TAG_NOT_USABLE [Windows][z/OS]2351 (092F) (RC2351) MQRC_GLOBAL_UOW_CONFLICT [Windows][z/OS]2352 (0930) (RC2352) MQRC_LOCAL_UOW_CONFLICT [Windows]2353 (0931) (RC2353) MQRC_HANDLE_IN_USE_FOR_UOW [HPNSS][Windows]2354 (0932) (RC2354) MQRC_UOW_ENLISTMENT_ERROR [HPNSS][Windows]2355 (0933) (RC2355) MQRC_UOW_MIX_NOT_SUPPORTED 2356 (0934) (RC2356) MQRC_WXP_ERROR 2357 (0935) (RC2357) MQRC_CURRENT_RECORD_ERROR 2358 (0936) (RC2358) MQRC_NEXT_OFFSET_ERROR 2359 (0937) (RC2359) MQRC_NO_RECORD_AVAILABLE [z/OS]2360 (0938) (RC2360) MQRC_OBJECT_LEVEL_INCOMPATIBLE 2361 (0939) (RC2361) MQRC_NEXT_RECORD_ERROR 2362 (093A) (RC2362) MQRC_BACKOUT_THRESHOLD_REACHED 2363 (093B) (RC2363) MQRC_MSG_NOT_MATCHED 2364 (093C) (RC2364) MQRC_JMS_FORMAT_ERROR [z/OS]2365 (093D) (RC2365) MQRC_SEGMENTS_NOT_SUPPORTED [z/OS]2366 (093E) (RC2366) MQRC_WRONG_CF_LEVEL 2367 (093F) (RC2367) MQRC_CONFIG_CREATE_OBJECT 2368 (0940) (RC2368) MQRC_CONFIG_CHANGE_OBJECT 2369 (0941) (RC2369) MQRC_CONFIG_DELETE_OBJECT 2370 (0942) (RC2370) MQRC_CONFIG_REFRESH_OBJECT 2371 (0943) (RC2371) MQRC_CHANNEL_SSL_ERROR [z/OS]2373 (0945) (RC2373) MQRC_CF_STRUC_FAILED [UNIX][Windows]2374 (0946) (RC2374) MQRC_API_EXIT_ERROR [UNIX][Windows]2375 (0947) (RC2375) MQRC_API_EXIT_INIT_ERROR [UNIX][Windows]2376 (0948) (RC2376) MQRC_API_EXIT_TERM_ERROR [UNIX][Windows]2377 (0949) (RC2377) MQRC_EXIT_REASON_ERROR [UNIX][Windows]2378 (094A) (RC2378) MQRC_RESERVED_VALUE_ERROR [UNIX, Linux, Windows, IBM i]2379 (094B) (RC2379) MQRC_NO_DATA_AVAILABLE [UNIX][Windows]2380 (094C) (RC2380) MQRC_SCO_ERROR [UNIX][Windows]2381 (094D) (RC2381) MQRC_KEY_REPOSITORY_ERROR [UNIX][Windows]2382 (094E) (RC2382) MQRC_CRYPTO_HARDWARE_ERROR [UNIX][Windows]2383 (094F) (RC2383) MQRC_AUTH_INFO_REC_COUNT_ERROR [UNIX][Windows]2384 (0950) (RC2384) MQRC_AUTH_INFO_REC_ERROR [UNIX][Windows]2385 (0951) (RC2385) MQRC_AIR_ERROR [UNIX][Windows]2386 (0952) (RC2386) MQRC_AUTH_INFO_TYPE_ERROR [UNIX][Windows]2387 (0953) (RC2387) MQRC_AUTH_INFO_CONN_NAME_ERROR [UNIX][Windows]2388 (0954) (RC2388) MQRC_LDAP_USER_NAME_ERROR [UNIX][Windows]2389 (0955) (RC2389) MQRC_LDAP_USER_NAME_LENGTH_ERR [UNIX][Windows]2390 (0956) (RC2390) MQRC_LDAP_PASSWORD_ERROR [UNIX][Windows]2391 (0957) (RC2391) MQRC_SSL_ALREADY_INITIALIZED [UNIX][Windows]2392 (0958) (RC2392) MQRC_SSL_CONFIG_ERROR [UNIX][Windows]2393 (0959) (RC2393) MQRC_SSL_INITIALIZATION_ERROR [z/OS]2394 (095A) (RC2394) MQRC_Q_INDEX_TYPE_ERROR [IBM i][UNIX][Windows]2395 (095B) (RC2395) MQRC_CFBS_ERROR 2396 (095C) (RC2396) MQRC_SSL_NOT_ALLOWED 2397 (095D) (RC2397) MQRC_JSSE_ERROR 2398 (095E) (RC2398) MQRC_SSL_PEER_NAME_MISMATCH 2399 (095F) (RC2399) MQRC_SSL_PEER_NAME_ERROR 2400 (0960) (RC2400) MQRC_UNSUPPORTED_CIPHER_SUITE 2401 (0961) (RC2401) MQRC_SSL_CERTIFICATE_REVOKED 2402 (0962) (RC2402) MQRC_SSL_CERT_STORE_ERROR 2406 (0966) (RC2406) MQRC_CLIENT_EXIT_LOAD_ERROR 2407 (0967) (RC2407) MQRC_CLIENT_EXIT_ERROR 2409 (0969) (RC2409) MQRC_SSL_KEY_RESET_ERROR 2411 (096B) (RC2411) MQRC_LOGGER_STATUS 2412 (096C) (RC2412) MQRC_COMMAND_MQSC 2413 (096D) (RC2413) MQRC_COMMAND_PCF 2414 (096E) (RC2414) MQRC_CFIF_ERROR 2415 (096F) (RC2415) MQRC_CFSF_ERROR 2416 (0970) (RC2416) MQRC_CFGR_ERROR 2417 (0971) (RC2417) MQRC_MSG_NOT_ALLOWED_IN_GROUP An explanation of the error, completion code, and programmer response. 2418 (0972) (RC2418) MQRC_FILTER_OPERATOR_ERROR 2419 (0973) (RC2419) MQRC_NESTED_SELECTOR_ERROR 2420 (0974) (RC2420) MQRC_EPH_ERROR 2421 (0975) (RC2421) MQRC_RFH_FORMAT_ERROR [IBM i][UNIX][Windows]2422 (0976) (RC2422) MQRC_CFBF_ERROR 2423 (0977) (RC2423) MQRC_CLIENT_CHANNEL_CONFLICT 2424 (0978) (RC2424) MQRC_SD_ERROR 2425 (0979) (RC2425) MQRC_TOPIC_STRING_ERROR 2426 (097A) (RC2426) MQRC_STS_ERROR 2428 (097C) (RC2428) MQRC_NO_SUBSCRIPTION 2429 (097D) (RC2429) MQRC_SUBSCRIPTION_IN_USE 2430 (097E) (RC2430) MQRC_STAT_TYPE_ERROR 2431 (097F) (RC2431) MQRC_SUB_USER_DATA_ERROR 2432 (0980) (RC2432) MQRC_SUB_ALREADY_EXISTS 2434 (0982) (RC2434) MQRC_IDENTITY_MISMATCH 2435 (0983) (RC2435) MQRC_ALTER_SUB_ERROR 2436 (0984) (RC2436) MQRC_DURABILITY_NOT_ALLOWED 2437 (0985) (RC2437) MQRC_NO_RETAINED_MSG 2438 (0986) (RC2438) MQRC_SRO_ERROR 2440 (0988) (RC2440) MQRC_SUB_NAME_ERROR 2441 (0989) (RC2441) MQRC_OBJECT_STRING_ERROR 2442 (098A) (RC2442) MQRC_PROPERTY_NAME_ERROR 2443 (098B) (RC2443) MQRC_SEGMENTATION_NOT_ALLOWED 2444 (098C) (RC2444) MQRC_CBD_ERROR 2445 (098D) (RC2445) MQRC_CTLO_ERROR 2446 (098E) (RC2446) MQRC_NO_CALLBACKS_ACTIVE 2448 (0990) (RC2448) MQRC_CALLBACK_NOT_REGISTERED 2449 (0991) (RC2449) MQRC_OPERATION_NOT_ALLOWED 2457 (0999) (RC2457) MQRC_OPTIONS_CHANGED 2458 (099A) (RC2458) MQRC_READ_AHEAD_MSGS 2459 (099B) (RC2459) MQRC_SELECTOR_SYNTAX_ERROR 2460 (099C) (RC2460) MQRC_HMSG_ERROR 2461 (099D) (RC2461) MQRC_CMHO_ERROR 2462 (099E) (RC2462) MQRC_DMHO_ERROR 2463 (099F) (RC2463) MQRC_SMPO_ERROR 2464 (09A0) (RC2464) MQRC_IMPO_ERROR 2465 (09A1) (RC2465) MQRC_PROPERTY_NAME_TOO_BIG 2466 (09A2) (RC2466) MQRC_PROP_VALUE_NOT_CONVERTED 2467 (09A3) (RC2467) MQRC_PROP_TYPE_NOT_SUPPORTED 2469 (09A5) (RC2469) MQRC_PROPERTY_VALUE_TOO_BIG 2470 (09A6) (RC2470) MQRC_PROP_CONV_NOT_SUPPORTED 2471 (09A7) (RC2471) MQRC_PROPERTY_NOT_AVAILABLE 2472 (09A8) (RC2472) MQRC_PROP_NUMBER_FORMAT_ERROR 2473 (09A9) (RC2473) MQRC_PROPERTY_TYPE_ERROR 2478 (09AE) (RC2478) MQRC_PROPERTIES_TOO_BIG 2479 (09AF) (RC2479) MQRC_PUT_NOT_RETAINED 2480 (09B0) (RC2480) MQRC_ALIAS_TARGTYPE_CHANGED 2481 (09B1) (RC2481) MQRC_DMPO_ERROR 2482 (09B2) (RC2482) MQRC_PD_ERROR 2483 (09B3) (RC2483) MQRC_CALLBACK_TYPE_ERROR 2484 (09B4) (RC2484) MQRC_CBD_OPTIONS_ERROR 2485 (09B5) (RC2485) MQRC_MAX_MSG_LENGTH_ERROR 2486 (09B6) (RC2486) MQRC_CALLBACK_ROUTINE_ERROR [z/OS]2487 (09B7) (RC2487) MQRC_CALLBACK_LINK_ERROR 2488 (09B8) (RC2488) MQRC_OPERATION_ERROR 2489 (09B9) (RC2489) MQRC_BMHO_ERROR 2490 (09BA) (RC2490) MQRC_UNSUPPORTED_PROPERTY 2492 (09BC) (RC2492) MQRC_PROP_NAME_NOT_CONVERTED 2494 (09BE) (RC2494) MQRC_GET_ENABLED 2495 (09BF) (RC2495) MQRC_MODULE_NOT_FOUND 2496 (09C0) (RC2496) MQRC_MODULE_INVALID 2497 (09C1) (RC2497) MQRC_MODULE_ENTRY_NOT_FOUND 2498 (09C2) (RC2498) MQRC_MIXED_CONTENT_NOT_ALLOWED 2499 (09C3) (RC2499) MQRC_MSG_HANDLE_IN_USE 2500 (09C4) (RC2500) MQRC_HCONN_ASYNC_ACTIVE 2501 (09C5) (RC2501) MQRC_MHBO_ERROR 2502 (09C6) (RC2502) MQRC_PUBLICATION_FAILURE 2503 (09C7) (RC2503) MQRC_SUB_INHIBITED 2504 (09C8) (RC2504) MQRC_SELECTOR_ALWAYS_FALSE 2507 (09CB) (RC2507) MQRC_XEPO_ERROR 2509 (09CD) (RC2509) MQRC_DURABILITY_NOT_ALTERABLE 2510 (09CE) (RC2510) MQRC_TOPIC_NOT_ALTERABLE 2512 (09D0) (RC2512) MQRC_SUBLEVEL_NOT_ALTERABLE 2513 (09D1) (RC2513) MQRC_PROPERTY_NAME_LENGTH_ERR 2514 (09D2) (RC2514) MQRC_DUPLICATE_GROUP_SUB 2515 (09D3) (RC2515) MQRC_GROUPING_NOT_ALTERABLE 2516 (09D4) (RC2516) MQRC_SELECTOR_INVALID_FOR_TYPE 2517 (09D5) (RC2517) MQRC_HOBJ_QUIESCED 2518 (09D6) (RC2518) MQRC_HOBJ_QUIESCED_NO_MSGS 2519 (09D7) (RC2519) MQRC_SELECTION_STRING_ERROR 2520 (09D8) (RC2520) MQRC_RES_OBJECT_STRING_ERROR 2521 (09D9) (RC2521) MQRC_CONNECTION_SUSPENDED 2522 (09DA) (RC2522) MQRC_INVALID_DESTINATION 2523 (09DB) (RC2523) MQRC_INVALID_SUBSCRIPTION 2524 (09DC) (RC2524) MQRC_SELECTOR_NOT_ALTERABLE 2525 (09DD) (RC2525) MQRC_RETAINED_MSG_Q_ERROR 2526 (09DE) (RC2526) MQRC_RETAINED_NOT_DELIVERED 2527 (09DF) (RC2527) MQRC_RFH_RESTRICTED_FORMAT_ERR 2528 (09E0) (RC2528) MQRC_CONNECTION_STOPPED 2529 (09E1) (RC2529) MQRC_ASYNC_UOW_CONFLICT 2530 (09E2) (RC2530) MQRC_ASYNC_XA_CONFLICT 2531 (09E3) (RC2531) MQRC_PUBSUB_INHIBITED 2532 (09E4) (RC2532) MQRC_MSG_HANDLE_COPY_FAILURE 2533 (09E5) (RC2533) MQRC_DEST_CLASS_NOT_ALTERABLE 2534 (09E6) (RC2534) MQRC_OPERATION_NOT_ALLOWED 2535 (09E7) MQRC_ACTION_ERROR 2537 (09E9) (RC2537) MQRC_CHANNEL_NOT_AVAILABLE 2538 (09EA) (RC2538) MQRC_HOST_NOT_AVAILABLE 2539 (09EB) (RC2539) MQRC_CHANNEL_CONFIG_ERROR 2540 (09EC) (RC2540) MQRC_UNKNOWN_CHANNEL_NAME 2541 (09ED) (RC2541) MQRC_LOOPING_PUBLICATION 2543 (09EF) (RC2543) MQRC_STANDBY_Q_MGR 2544 (09F0) (RC2544) MQRC_RECONNECTING 2545 (09F1) (RC2545) MQRC_RECONNECTED 2546 (09F2) (RC2546) MQRC_RECONNECT_QMID_MISMATCH 2547 (09F3) (RC2547) MQRC_RECONNECT_INCOMPATIBLE 2548 (09F4) (RC2548) MQRC_RECONNECT_FAILED 2549 (09F5) (RC2549) MQRC_CALL_INTERRUPTED 2550 (09F6) (RC2550) MQRC_NO_SUBS_MATCHED 2551 (09F7) (RC2551) MQRC_SELECTION_NOT_AVAILABLE 2552 (09F8) (RC2552) MQRC_CHANNEL_SSL_WARNING 2553 (09F9) (RC2553) MQRC_OCSP_URL_ERROR 2554 (09FA) (RC2554) MQRC_CONTENT_ERROR 2555 (09FB) (RC2555) MQRC_RECONNECT_Q_MGR_REQD 2556 (09FC) (RC2556) MQRC_RECONNECT_TIMED_OUT [UNIX, Linux, Windows, IBM i]2557 (09FD) (RC2557) MQRC_PUBLISH_EXIT_ERROR 2558 (09FE) (RC2558) MQRC_COMMINFO_ERROR 2560 (0A00) (RC2560) MQRC_MULTICAST_ONLY [z/OS]2561 (0A01) (RC2561) MQRC_DATA_SET_NOT_AVAILABLE 2562 (0A02) (RC2562) MQRC_GROUPING_NOT_ALLOWED 2563 (0A03) (RC2563) MQRC_GROUP_ADDRESS_ERROR 2564 (0A04) (RC2564) MQRC_MULTICAST_CONFIG_ERROR 2565 (0A05) (RC2565) MQRC_MULTICAST_INTERFACE_ERROR 2566 (0A06) (RC2566) MQRC_MULTICAST_SEND_ERROR 2567 (0A07) (RC2567) MQRC_MULTICAST_INTERNAL_ERROR 2568 (0A08) (RC2568) MQRC_CONNECTION_NOT_AVAILABLE 2569 (0A09) (RC2569) MQRC_SYNCPOINT_NOT_ALLOWED 2577 (0A11) (RC2577) MQRC_CHANNEL_BLOCKED 2578 (0A12) (RC2578) MQRC_CHANNEL_BLOCKED_WARNING 2583 (0A17) (RC2583) MQRC_INSTALLATION_MISMATCH 2587 (0A1B) (RC2587) MQRC_HMSG_NOT_AVAILABLE 2589 (0A1D) (RC2589) MQRC_INSTALLATION_MISSING 2590 (0A1E) (RC2590) MQRC_FASTPATH_NOT_AVAILABLE 2591 (0A1F) (RC2591) MQRC_CIPHER_SPEC_NOT_SUITE_B 2592 (0A20) (RC2592) MQRC_SUITE_B_ERROR 2593 (0A21)(RC2593) MQRC_CERT_VAL_POLICY_ERROR 2594 (0A22)(RC2594) MQRC_PASSWORD_PROTECTION_ERROR 2595 (0A23)(RC2595) MQRC_CSP_ERROR 2596 (0A24)(RC2596) MQRC_CERT_LABEL_NOT_ALLOWED 2598 (0A26)(RC2598) MQRC_ADMIN_TOPIC_STRING_ERROR 6100 (17D4) (RC6100) MQRC_REOPEN_EXCL_INPUT_ERROR 6101 (17D5) (RC6101) MQRC_REOPEN_INQUIRE_ERROR 6102 (17D6) (RC6102) MQRC_REOPEN_SAVED_CONTEXT_ERR 6103 (17D7) (RC6103) MQRC_REOPEN_TEMPORARY_Q_ERROR 6104 (17D8) (RC6104) MQRC_ATTRIBUTE_LOCKED 6105 (17D9) (RC6105) MQRC_CURSOR_NOT_VALID 6106 (17DA) (RC6106) MQRC_ENCODING_ERROR 6107 (17DB) (RC6107) MQRC_STRUC_ID_ERROR 6108 (17DC) (RC6108) MQRC_NULL_POINTER 6109 (17DD) (RC6109) MQRC_NO_CONNECTION_REFERENCE 6110 (17DE) (RC6110) MQRC_NO_BUFFER 6111 (17DF) (RC6111) MQRC_BINARY_DATA_LENGTH_ERROR 6112 (17E0) (RC6112) MQRC_BUFFER_NOT_AUTOMATIC 6113 (17E1) (RC6113) MQRC_INSUFFICIENT_BUFFER 6114 (17E2) (RC6114) MQRC_INSUFFICIENT_DATA 6115 (17E3) (RC6115) MQRC_DATA_TRUNCATED 6116 (17E4) (RC6116) MQRC_ZERO_LENGTH 6117 (17E5) (RC6117) MQRC_NEGATIVE_LENGTH 6118 (17E6) (RC6118) MQRC_NEGATIVE_OFFSET 6119 (17E7) (RC6119) MQRC_INCONSISTENT_FORMAT 6120 (17E8) (RC6120) MQRC_INCONSISTENT_OBJECT_STATE 6121 (17E9) (RC6121) MQRC_CONTEXT_OBJECT_NOT_VALID 6122 (17EA) (RC6122) MQRC_CONTEXT_OPEN_ERROR 6123 (17EB) (RC6123) MQRC_STRUC_LENGTH_ERROR 6124 (17EC) (RC6124) MQRC_NOT_CONNECTED 6125 (17ED) (RC6125) MQRC_NOT_OPEN 6126 (17EE) (RC6126) MQRC_DISTRIBUTION_LIST_EMPTY 6127 (17EF) (RC6127) MQRC_INCONSISTENT_OPEN_OPTIONS 6128 (17FO) (RC6128) MQRC_WRONG_VERSION 6129 (17F1) (RC6129) MQRC_REFERENCE_ERROR]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>IBMMQ</tag>
        <tag>ErrorCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[现场工作代码路径说明]]></title>
    <url>%2F%E7%8E%B0%E5%9C%BA%E5%B7%A5%E4%BD%9C%E4%BB%A3%E7%A0%81%E8%B7%AF%E5%BE%84%E8%AF%B4%E6%98%8E.html</url>
    <content type="text"><![CDATA[写在前面 程序版本更新后可能没有合入原有程序，本文作为各现场的程序在电脑中存放的路径进行说明 国六排放MES联网D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS 包含上汽临港、上汽南京、上汽宁德、上汽郑州、上汽无锡大通、长沙菲亚特、杭州福特(包含QLS，双怠速转速控制)、重庆福特、哈尔滨福特(继承杭州福特未测试) 上汽上汽检测线上汽DSA：D:\工作\software\Platforms_Using\Platforms2\SocketOpraLib 其中包括上汽郑州FAS、360；上汽宁德现场程序。 五菱五菱ABS：D:\工作\software\Platforms_Using\PlatABS\RBABS_SGMW 20191028新增宝骏现场更改保持在线3E 00为3E 80备份，目前调试未成功，采用备份程序 程序包含所有五菱现场最新的ABS程序 东风东风小康东风小康MES：D:\工作\现场工作文件整理\东风小康\319015-201905\Platforms2-正在使用\SpeciallNeed 程序为东风小康现场最新MES程序，新增64字节车型识别 东风乘用车(武汉)D:\工作\现场工作文件整理\武汉东风乘用车\Platforms2-武汉东风乘用车 其中SpecialNeed中包含FAS工位AEB相关提示，CanCmdOpraLib包含FAS相关安全算法ABS：D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS\RBABS_DF 合众D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS201909新增EP30ESC 比亚迪D:\BaiduNetdiskDownload\GX\Platforms2\Platforms2\CanCmdOpraLib201904增加联电供应商的转速控制 程序合并进行中PlatABS最新程序在D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS中 20191120将五菱ABS更新至本工程代码中，待测试，其中包含齿讯学习 ABS合众东风乘用车 国六 现场 功能 上汽临港 MES 上汽名爵 MES 上汽宁德 MES 上汽郑州一期 MES 上汽无锡大通 MES、车型信息获取、ZTS匹配 福特杭州 MES、QLS、双怠速转速控制 福特重庆 MES、QLS、双怠速转速控制 福特哈尔滨 MES、QLS、双怠速转速控制 菲亚特长沙 MES 其他北汽莱西FAS]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ETP指令说明]]></title>
    <url>%2FETP%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E.html</url>
    <content type="text"><![CDATA[写在前面 &emsp; 国六排放测试过程中常用通讯指令说明 详细资料请参考ISO15031-5或J1979-DA ISO15031-515765-4Service 01请求当前动力系统诊断数据01后最多可以读取6个PID(Parameter Identification)请求：01 PID PID PID PID PID PID回复：41 PID Data PID Data PID Data PID Data PID Data PID Data PID PID 说明 数据长度（byte） 计算 00 查看支持的PID 01 清除故障诊断码后的监视器状态 4 04 负载值 1 y=x/255 05 冷却液温度 1 y=x-40 0B 进气歧管绝对压力 1 y=x 0C 发动机转速 2 y=x/4 0D 车速 1 y=x 10 空气流量 2 y=x/100 11 节气门位置 1 y=x/255 44 Commanded Equivalence Ratio 2 y=2x/65535 5C 油温 1 y=x-40 6A 6E 78 尾气温度 7A 83 NOx传感器 85 NOx控制系统 PID 00请求：01 00回复： 41 00 A B C D //PID 01~2041 20 A B C D //PID 21~4041 40 A B C D //PID 41~6041 60 A B C D //PID 61~8041 80 A B C D //PID 81~A041 A0 A B C D //PID A1~C041 C0 A B C D //PID C1~E041 E0 A B C D //PID E1~FF 41 00 A B C DData A bit7 ~ Data D bit0 表示是否支持PID 01~20 如：41 00 90 39 00 00Data A = 90 = 1001 0000bit7 = 1; bit4 = 1表示支持 PID 01、PID 04Data B = 39 = 0011 1001bit5 = bit4 = bit3 = bit0 = 1表示支持 PID 0B、PID 0C、PID 0D、PID 10 Service 09PID PID 说明 数据长度（byte） 计算 02 VIN 17 04 Cal.ID 06 Cal.CVN 08 IPT ISO27145Service 2222 F4 对应 ISO15031的01服务22 F8 对应 ISO15031的09服务]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>ISO15031-5</tag>
        <tag>15765-4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rabbit MQ]]></title>
    <url>%2FRabbit%20MQ.html</url>
    <content type="text"><![CDATA[写在前面 安装Erlang安装Rabbit MQ安装前需先安装Erlang语言环境安装包下载地址：链接：https://pan.baidu.com/s/14_Z6JUdvQfY8PGQ4NBb73A提取码：abtt Rabbit MQ服务端安装安装软件安装在C盘(第一次安装到D盘后进入命令行程序不能执行，有兴趣可以研究研究)安装包下载地址：链接：https://pan.baidu.com/s/1NbHfVoGyo_oVAXzaTnZuAw提取码：9am0 启用管理工具在服务程序中确保RabbitMQ服务已启用安装完成后打开所有程序中的RabbitMQ Command Prompt (sbin dir)输入命令：’rabbitmq-plugins enable rabbitmq_management’打开浏览器输入http://localhost:15672默认账号、密码均为guest C# Producer项目中需要引用RabbitMQ.Client.dll下载链接为：链接：https://pan.baidu.com/s/1aJ-8RVJnJWibeqtPcTn9hw提取码：9d8n此版本支持.Net4.0，全版本请自行下载下载地址：http://www.rabbitmq.com/releases/rabbitmq-dotnet-client/ 展开/折叠示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445using RabbitMQ.Client;var factory = new ConnectionFactory();factory.HostName = "localhost";//RabbitMQ服务在本地运行127.0.0.1factory.UserName = "guest";//用户名factory.Password = "guest";//密码using (var connection = factory.CreateConnection())&#123; using (var channel = connection.CreateModel())//创建一个Channel &#123; try &#123; channel.QueueDeclarePassive(mqqueueString);//判断队列是否存在 &#125; catch (Exception e) &#123; Log(mqqueueString + "队列未创建!"); throw e; //return false; &#125; /*在创建队列的时候，只有RabbitMQ上该队列不存在，才会去创建。 消息是以二进制数组的形式传输的，所以如果消息是实体对象的话，需要序列化和然后转化为二进制数组。*/ IBasicProperties properties = channel.CreateBasicProperties(); properties.ContentType = "application/json"; properties.ContentEncoding = "UTF-8"; properties.Headers = new Dictionary&lt;string, object&gt;(); properties.Headers.Add("srcSystem", "EQP"); properties.Headers.Add("desSystem", "IMES"); properties.Headers.Add("msgType", "EQP_IMES_EM"); properties.Headers.Add("msgID", msgID); channel.ConfirmSelect(); channel.QueueDeclare(mqqueueString, true, false, false, null);//消息队列 var body = Encoding.UTF8.GetBytes(msgStr); channel.BasicPublish(mqExchange, mqRoutingKey, properties, body); //开始传递 if (channel.WaitForConfirms()) &#123; Log("数据发送成功"); return true; &#125; else &#123; Log("数据发送成功，但未收到确认消息"); return false; &#125; &#125;&#125; 发送成功后可登录网页在Queues中查看到上传的消息队列及内容 函数说明QueueDeclare转自https://blog.csdn.net/vbirdbest/article/details/78670550 1234queueDeclare(String queue, boolean durable, boolean exclusive, Map&lt;String, Object&gt; arguments); queue: 队列名称 durable： 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库 exclusive：是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常：com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=405, reply-text=RESOURCE_LOCKED - cannot obtain exclusive access to locked queue ‘queue_name’ in vhost ‘/‘, class-id=50, method-id=20)一般等于true的话用于一个队列只能有一个消费者来消费的场景 autoDelete：是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除 arguments：队列中的消息什么时候会自动被删除 Message TTL(x-message-ttl)：设置队列中的所有消息的生存周期(统一为整个队列的所有消息设置生命周期), 也可以在发布消息的时候单独为某个消息指定剩余生存时间,单位毫秒, 类似于redis中的ttl，生存时间到了，消息会被从队里中删除，注意是消息被删除，而不是队列被删除， 特性Features=TTL, 单独为某条消息设置过期时间AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties().builder().expiration(“6000”);channel.basicPublish(EXCHANGE_NAME, “”, properties.build(), message.getBytes(“UTF-8”)); Auto Expire(x-expires): 当队列在指定的时间没有被访问(consume, basicGet, queueDeclare…)就会被删除,Features=Exp Max Length(x-max-length): 限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉， 类似于mongodb中的固定集合，例如保存最新的100条消息, Feature=Lim Max Length Bytes(x-max-length-bytes): 限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小, Features=Lim B Dead letter exchange(x-dead-letter-exchange)： 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉,Features=DLX Dead letter routing key(x-dead-letter-routing-key)：将删除的消息推送到指定交换机的指定路由键的队列中去, Feature=DLK Maximum priority(x-max-priority)：优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费, Lazy mode(x-queue-mode=lazy)： Lazy Queues: 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中 Master locator(x-queue-master-locator) basicPublish1234basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body) String exchange – 交换机名称String routingKey – 路由关键字BasicProperties props – 消息的基本属性，例如路由头等byte[] body – 消息体 12345basicPublish(String exchange, String routingKey, boolean mandatory, BasicProperties props, byte[] body) boolean mandatory – 是否为强制性 123456basicPublish(String exchange, String routingKey, boolean mandatory, boolean immediate, BasicProperties props, byte[] body) boolean immediate – 消息是否立即发送出去 BasicProperties1234567891011121314151617public static class BasicProperties&#123; private String contentType; //上下文类型 private String contentEncoding; //编码集 private Map&lt;String,Object&gt; headers; //消息头 private Integer deliveryMode; //消息的投递模式 private Integer priority; //优先级 private String correlationId; // private String replyTo; // private String expiration; //过期时间 private String messageId; //消息编号 private Date timestamp; //发送消息时的时间戳 private String type; // 消息类型 private String userId; private String appId; private String clusterId;&#125; C# Consumer编写客户端链接RabbitMQ读取信息 展开/折叠示例 123456789101112131415161718192021222324using RabbitMQ.Client;using RabbitMQ.Client.Events;var factory = new ConnectionFactory();factory.HostName = "localhost";factory.UserName = "guest";factory.Password = "guest";using (var connection = factory.CreateConnection())&#123; using (var channel = connection.CreateModel()) &#123; channel.QueueDeclare("hello", false, false, false, null); var consumer = new EventingBasicConsumer(channel); channel.BasicConsume("hello", false, consumer); consumer.Received += (model, ea) =&gt; &#123; var body = ea.Body; var message = Encoding.UTF8.GetString(body); Console.WriteLine("已接收： &#123;0&#125;", message); &#125;; Console.ReadLine(); &#125;&#125; 函数说明BasicConsume123456789101112131415161718192021222324String basicConsume(String queue, Consumer callback)String basicConsume(String queue, boolean autoAck, Consumer callback)String basicConsume(String queue, boolean autoAck, Map&lt;String, Object&gt; arguments, Consumer callback)String basicConsume(String queue, boolean autoAck, String consumerTag, Consumer callback)String basicConsume(String queue, boolean autoAck, String consumerTag, boolean noLocal, boolean exclusive, Map&lt;String, Object&gt; arguments, Consumer callback) queue 队列名autoAck 是否自动确认消息,true自动确认,false 不自动要手动调用,建立设置为falseconsumerTag 消费者标签，用来区分多个消费者noLocal 设置为true，表示 不能将同一个Conenction中生产者发送的消息传递给这个Connection中 的消费者exclusive 是否排他arguments 消费者的参数callback 消费者 DefaultConsumer建立使用，重写其中的方法]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Rabbit MQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IBM MQ]]></title>
    <url>%2FIBM%20MQ.html</url>
    <content type="text"><![CDATA[写在前面 文中代码部分参考 https://blog.csdn.net/java_sparrow/article/details/80626705 若只做客户端部分的设计不需要安装客户端 网上关于IBMMQ相关资源实在太少，感谢前人的努力，站在前人的肩膀实在上太舒服了 IBMMQ 软件安装设置安装安装包(WebSphereMQ8.0)已上传网盘，下载后直接安装即可。链接：https://pan.baidu.com/s/1P9Dz74tvf8_SExH0Dl0hHA提取码：0a87 服务端配置下文中未提到的部分默认参数即可 创建队列管理器 设置侦听端口 创建通道 创建队列 添加用户组将当前用户添加到IBMMQ管理组 其中对象名为下图所示安装IBMMQ后自动创建的组mqm 至此，IBMMQ环境设置完毕 C# 连接MQ准备已安装IBMMQ软件程序中引用：amqmdnet.dll库文件（IBMMQ客户端安装后生成）路径分别为：C:\Program Files\IBM\WebSphere MQ\bin\amqmdnet.dll程序中添加using IBM.WMQ;程序安装完成后可能缺少mqdc.dll文件，可下载后放在安装路径C:\Program Files\IBM\WebSphere MQ\bin64 下链接：https://pan.baidu.com/s/19XMuE1q46K1E3BfO8lPPIQ提取码：5qhq 免安装IBMMQ准备好amqmdnet.dll在程序中直接引用即可下载地址：链接：https://pan.baidu.com/s/1Qb4bdDpqXmyQO5_Jx4hmnA提取码：soua若缺少其他文件请自取：IBMMQ8.0安装路径Bin文件夹链接：https://pan.baidu.com/s/1vdg4J2I1-1qLcHh_hnfXBA提取码：kgi9 C#代码初始化方式一123456789static MQQueueManager qMgr;static int CCSID = 437;MQEnvironment.Hostname = "10.91.232.46";MQEnvironment.Channel = "CHANNEL1";MQEnvironment.Port = 8802;MQEnvironment.UserId = "user";MQEnvironment.Password = "Password";// 队列管理器qMgr = new MQQueueManager("LG_2IN1_QMGR"); 方式二12345678910static MQQueueManager qMgr;Hashtable queueProperties = new Hashtable();queueProperties[MQC.TRANSPORT_PROPERTY] = MQC.TRANSPORT_MQSERIES_MANAGED;queueProperties[MQC.HOST_NAME_PROPERTY] = "192.168.1.9";queueProperties[MQC.PORT_PROPERTY] = 8802;queueProperties[MQC.CHANNEL_PROPERTY] = "CHANNEL1";queueProperties[MQC.USER_ID_PROPERTY] = "user";queueProperties[MQC.PASSWORD_PROPERTY] = "Password";queueProperties[MQC.CCSID_PROPERTY] = "1381";qMgr = new MQQueueManager("LG_2IN1_QMGR", queueProperties); 发送数据展开/折叠示例 123456789101112131415161718192021222324252627282930public static void sendMsg(String msgStr)&#123; int openOptions = MQC.MQOO_INPUT_AS_Q_DEF | MQC.MQOO_OUTPUT | MQC.MQOO_INQUIRE; MQQueue queue = null; try &#123; // 建立通道的连接 queue = qMgr.AccessQueue(queueString, openOptions, null, null, null); MQMessage msg = new MQMessage();// 要写入队列的消息 msg.Format = MQC.MQFMT_STRING; msg.CharacterSet = CCSID; msg.Encoding = CCSID; // msg.writeObject(msgStr); msg.WriteString(msgStr); //将消息写入消息对象中 MQPutMessageOptions pmo = new MQPutMessageOptions(); msg.Expiry = -1; // 设置消息用不过期 queue.Put(msg, pmo);// 将消息放入队列 &#125; catch (Exception e) &#123; XmlFO.LogOut("IBMMQ",e.ToString()); &#125; finally &#123; if (queue != null) &#123; try &#123; queue.Close(); // qMgr.disconnect(); XmlFO.LogOut("IBMMQ","写入的消息为：" + msgStr); &#125; catch (MQException e) &#123; XmlFO.LogOut("IBMMQ", e.ToString()); &#125; &#125; &#125;&#125; 读取数据展开/折叠示例 1234567891011121314151617181920212223242526272829303132public static void getMsg()&#123; int openOptions = MQC.MQOO_INPUT_AS_Q_DEF | MQC.MQOO_OUTPUT | MQC.MQOO_INQUIRE; MQQueue queue = null; try &#123; queue = qMgr.accessQueue(queueString, openOptions, null, null, null); System.out.println("==========================="); System.out.println("该队列当前的深度为:" + queue.getCurrentDepth()); System.out.println("==========================="); int depth = queue.getCurrentDepth(); // 将队列的里的消息读出来 while (depth-- &gt; 0) &#123; MQMessage msg = new MQMessage();// 要读的队列的消息 MQGetMessageOptions gmo = new MQGetMessageOptions(); queue.get(msg, gmo); System.out.println("消息的大小为：" + msg.getDataLength()); System.out.println("消息的内容：" + msg.readStringOfByteLength(msg.getDataLength())); System.out.println("---------------------------"); &#125; &#125; catch (Exception e) &#123; XmlFO.LogOut("IBMMQ", e.ToString()); &#125; finally &#123; if (queue != null) &#123; try &#123; queue.close(); qMgr.disconnect(); &#125; catch (MQException e) &#123; XmlFO.LogOut("IBMMQ", e.ToString()); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>IBMMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库自动备份、删除数据]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE.html</url>
    <content type="text"><![CDATA[文中指令可在windows命令行中执行测试本文介绍的是实用简单的方式实现所需功能，所有功能均可写在上位机软件中自动实现，但不同现场很难通用通过脚本的形式实现简单易改 Postgresql数据库备份脚本12345echo offset PRJDB=LocalDBset FileName=%PRJDB%_%date:~0,4%_%date:~5,2%_%date:~8,2%.backupif not exist &quot;D:\BBK\DBbackup&quot; (md D:\BBK\DBbackup)D:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin/pg_dump.exe --host localhost --port 5432 --username &quot;postgres&quot; --no-password --format custom --verbose --file &quot;D:\BBK\DBbackup\%FileName%&quot; &quot;LocalDB&quot; 说明： 备份保存路径为D:\BBK\DBbackup命名为：LocalDB_年_月_日.backupD:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin/pg_dump.exe为Postgresql数据库程序所在路径 删除表中数据12// 删除一个月以前的数据D:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin/psql -h 127.0.0.1 -p 5432 -d LocalDB -U postgres --command &quot;delete from 侧滑表 where 测试时间 &lt; (now() - interval &apos;1 month&apos;)&quot; 说明： D:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin为Postgresql数据库程序所在文件夹 时间扩展年interval &#39;2 years&#39;interval &#39;2 year&#39;interval &#39;2 y&#39;interval &#39;2 Y&#39;interval &#39;2Y&#39; 月interval &#39;1 month&#39;interval &#39;one month&#39; 周interval &#39;3 week&#39; 说明：interval 可以不写 运行时会提示数据用户名密码windows系统可在%APPDATA%\postgresql\pgpass.conf中添加服务器信息，实现免密操作格式：地址:端口:数据库:用户名:密码如：127.0.0.1:5432:LocalDB:postgres:123参考：https://www.postgresql.org/docs/current/libpq-pgpass.html 自动运行将上述shell指令分别复制到文本文档中另存为 name.bat，然后创建任务计划自动调用；任务计划创建方法：windows运行compmgmt.msc 新建任务计划程序按提示操作即可 SQLServer数据库自动备份打开数据库，依次进入：管理——维护计划，根据维护计划向导操作即可 删除数据启动SQL Server Agent服务，在步骤中新建作业，类型选择transact-SQL，命令中输入：declare @tm datetimedelete from tablename where tm&gt;=dateadd(month,-6,getdate())//删除表中6个月之前的数据然后打开计划自定义执行周期 Access直接用脚本复制重命名，新建任务计划自动执行 123set PRJDB=LocalDBset FileName=%PRJDB%_%date:~0,4%_%date:~5,2%_%date:~8,2%.backupcopy D:\BBK\LocalDB.mdb D:\BBK\DBbackup\%FileName%&quot;]]></content>
      <categories>
        <category>工作</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库链接字符串汇总]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E9%93%BE%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B1%87%E6%80%BB.html</url>
    <content type="text"><![CDATA[链接字符串：https://www.connectionstrings.com/ 通用示例12345678910string ConnStr_EOLDDATA = "$System.Data.SqlClient$Data Source=.;Initial Catalog=EOLDATA;Persist Security Info=True;User ID=sa;Password=321";string SqlLoginTable = string.Format("select * from [登录表] where [VIN] = '&#123;0&#125;'", textBoxVIN.Text);DbDataAdapter AdapLogin = BConnString.CreateDataAdapter(SqlLoginTable, ConnStr_EOLDDATA);DataTable dtLogin = new DataTable();AdapLogin.Fill(dtLogin);DataRow drLogin = null;if (dtLogin.Rows.Count &lt; 1) drLogin = dtLogin.Rows.Add();else drLogin = dtLogin.Rows[0];//drLogin = dtLogin.Rows.Count &lt; 1 ? dtLogin.Rows.Add() : dtLogin.Rows[0]; Access链接字符串：$System.Data.OleDb$Provider=Microsoft.Jet.OLEDB.4.0;Data Source=LoginSet.mdbSQL字符串：select * from [Table] where ZTS = &#39;zts&#39; Postgresql链接字符串：$Npgsql$Database=LocalDB;Host=LocalHost;Port=5432;Username=postgres;Password=123SQL字符串：select * from [Table] where VIN=&#39;vin&#39; order by ID desc 判断字段中包含某字符串所在位select * from [车型库] where POSITION(&#39;{0}&#39; in [VIN])&gt;0eg:postion(&#39;abc&#39; in &#39;123abc123&#39;)—&gt;4 SQLServerSQLServer字符串：$System.Data.SqlClient$Data Source=EOLSERVICE;Initial Catalog=EOLData;Persist Security Info=True;User ID=sa;Password=321SQL字符串：select * from [Table] where VIN=&#39;vin&#39; order by ID desc SQLServer判断字段中包含某字符串所在位select * from [车型库] where charindex(&#39;{0}&#39;,[VIN])&gt;0 选择左侧为某字符串select * from [车型库] where left([VIN],3)=&#39;LZW&#39; Oracle不需要借助客户端可直接访问数据库string Ora_ConnStr = &quot;User ID=jcxuser;Password=jcxuser;Data Source =(DESCRIPTION = (ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.111.89)(PORT = 1521))) (CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = yadata)))&quot;; 需要安装Oracle客户端并配置链接方可访问string Ora_ConnStrOLEDB = &quot;Provider=OraOLEDB.Oracle;Data Source=yadata;Persist Security Info=True;Password=jcxuser;User ID=jcxuser&quot;;有时间对比这两种链接字符串的区别，下面可访问但访问数据不全string Ora_ConnStr = &quot;$System.Data.OleDb$Provider=MSDAORA;Data Source=yadata;Persist Security Info=True;Password=jcxuser;User ID=jcxuser&quot;; 1234567OracleConnection conn = new OracleConnection(Ora_ConnStr);conn.Open();string OracleSqlStr = string.Format("select * from &#123;0&#125; where SN = '&#123;1&#125;'", Ora_tableForVSN, sVIN);DataTable dtVSN = new DataTable();OracleDataAdapter odaVSN = new OracleDataAdapter(OracleSqlStr, Ora_ConnStr);odaVSN.Fill(dtVSN);conn.Close(); 123456789OleDbConnection conn = new OleDbConnection(Ora_ConnStrOLEDB);conn.Open();OleDbCommand cmdVSN = conn.CreateCommand();cmdVSN.CommandText = string.Format("select * from &#123;0&#125; where SN = '&#123;1&#125;'", Ora_tableForVSN, sVIN);DataTable dtVSN = new DataTable();OleDbDataAdapter odaVSN = new OleDbDataAdapter();odaVSN.SelectCommand = cmdVSN;odaVSN.Fill(dtVSN);conn.Close(); SQLServer向Oracle数据库传数据 1234567891011121314151617181920212223using Oracle.ManagedDataAccess;OracleConnection cnn = new OracleConnection(mesConnStr);cnn.Open();DataTable dtMES = new DataTable();OracleDataAdapter oda = new OracleDataAdapter(oraSql, mesConnStr);OracleCommandBuilder ocb = new OracleCommandBuilder(oda);oda.SelectCommand.CommandText = oraSql;oda.InsertCommand = ocb.GetInsertCommand();oda.Fill(dtMES);cnn.Close();DataRow drMES = null;if (dtMES.Rows.Count &gt; 0) drMES = dtMES.Rows[0];else drMES = dtMES.Rows.Add();foreach (DataColumn dcEOL in upload.Columns)&#123; if (dtMES.Columns.Contains(dcEOL.ColumnName)) drMES[dcEOL.ColumnName] = drEOL[dcEOL.ColumnName];&#125;oda.Update(dtMES);dtMES.AcceptChanges(); SQLite12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//创建数据库表static void CreateTable()&#123; SQLiteConnection cn = new SQLiteConnection(connStr);//建立数据库连接 if (cn.State!= System.Data.ConnectionState.Open) &#123; cn.Open();//打开数据库 SQLiteCommand cmd = new SQLiteCommand(); cmd.Connection = cn;//把 SQLiteCommand的 Connection和SQLiteConnection 联系起来 cmd.CommandText = "CREATE TABLE IF NOT EXISTS t1(id varchar(4),score int)";//输入SQL语句 cmd.ExecuteNonQuery();//调用此方法运行 &#125; cn.Close();&#125;if(!File.Exists(dbPath)) SQLiteConnection.CreateFile(dbPath);SQLiteConnection sqliteConn = new SQLiteConnection("data source=" + dbPath); if (sqliteConn.State != System.Data.ConnectionState.Open) &#123; sqliteConn.Open(); SQLiteCommand cmd = new SQLiteCommand(); cmd.Connection = sqliteConn; //cmd.CommandText = "DROP TABLE IF EXISTS t1"; //cmd.CommandText = "CREATE TABLE " + "FirstTabel" + "(Name varchar,Team varchar, Number varchar)"; //cmd.CommandText = "INSERT INTO FirstTabel VALUES('Kobe','Lakers','24')"; //cmd.CommandText = "REPLACE INTO t1(id,age) VALUES(@id,@age)"; //cmd.CommandText = "UPDATE t1 SET id=@id,age=@age WHERE id='0123456789'"; //cmd.CommandText = "DELETE FROM t1 WHERE id='99999'"; //cmd.CommandText = "ALTER TABLE t1 ADD COLUMN age int"; cmd.CommandText = "insert into FirstTabel(Name,Team,Number) values(@name,@team,@number)"; cmd.Parameters.AddWithValue("@name", "Kobe"); cmd.Parameters.AddWithValue("@Team", "Lakers"); cmd.Parameters.AddWithValue("@Number", "24"); cmd.ExecuteNonQuery(); &#125; sqliteConn.Close();//常用SQLiteConnection cn = new SQLiteConnection(connStr);cn.Open();SQLiteCommand cmd = cn.CreateCommand();cmd.CommandText= string.Format("select * from &#123;0&#125; where SN = '&#123;1&#125;'", Ora_tableForVSN, sVIN);//方法一：用DataAdapter和DataTable类，调用方法为using System.DataSQLiteDataAdapter adapter = new SQLiteDataAdapter(cmd);DataTable table = new DataTable();adapter.Fill(table);cn.Close();//方法二：用DataReader，这个效率高些SQLiteDataReader reader = cmd.ExecuteReader(); Mysql12345678910111213141516171819202122232425262728293031using MySql.Data.MySqlClient;MySqlConnection myconn = new MySqlConnection("server=10.102.62.26;database=cartest_reporter;user id=root;password=root;Charset=utf8");myconn.Open();MySqlCommand mycom = myconn.CreateCommand();mycom.CommandText = "SELECT *FROM student1";MySqlDataAdapter adap = new MySqlDataAdapter(mycom);MySqlCommandBuilder mysqlcb = new MySqlCommandBuilder(adap);// insertDataTable dt = new DataTable();adap.Fill(dt);/*string MES_ConnStr = @"server = 10.23.1.67;Uid = testams;Pwd = test@ams;database= test;CharSet=utf8";MySqlConnection conn = new MySqlConnection(MES_ConnStr);if (conn.State != ConnectionState.Open) conn.Open();strOra_Sql = string.Format("select * from &#123;0&#125;", MESTableName);MySqlDataAdapter sdap = new MySqlDataAdapter();MySqlCommand mycmdFind = new MySqlCommand(strOra_Sql, conn);MySqlCommandBuilder cb = new MySqlCommandBuilder(sdap);DataTable dt = new DataTable();sdap.SelectCommand = mycmdFind;sdap.Fill(dt);DataRow dr = dt.NewRow();foreach (string s in ListMap.Keys)&#123; dr[s] = drEOL[ListMap[s]];&#125;dt.Rows.Add(dr);sdap.Update(dt);conn.Close();*/ Excel1234567DataSet ds = new DataSet();OleDbConnection conn = new OleDbConnection(strConn);string sql = string.Format("select * from [&#123;0&#125;$] where [VIN] like '%&#123;1&#125;%'", sourceTableName, VINString);OleDbDataAdapter oada = new OleDbDataAdapter(sql, conn);oada.Fill(ds);foreach (DataRow drr in ds.Tables[0].Rows)]]></content>
      <categories>
        <category>工作</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>链接字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[现场软件安装包下载]]></title>
    <url>%2F%E7%8E%B0%E5%9C%BA%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD.html</url>
    <content type="text"><![CDATA[百度网盘下载推荐用ENFI下载器链接：https://www.enfi.cloud/#/index 串口调试助手链接：https://pan.baidu.com/s/1KAisgybEesC8fMTwJ-oK3w提取码：au8d Socktools链接：https://pan.baidu.com/s/1lXWZWLjt9LE4xxCjK873-Q提取码：v5qn .NetFramework4.0链接：https://pan.baidu.com/s/1Hwdt4rEToEK4Ao4ljvmURA提取码：wlfc 虚拟串口链接：https://pan.baidu.com/s/1FrqtaKrp74EPmyvVqNOu6g提取码：wkv3 VisualStudio2010链接：https://pan.baidu.com/s/1Z-EUIWWsJmUN22KS8QNKcg提取码：rwpn SQLServer2008链接：https://pan.baidu.com/s/15hGavjba8ewaFxlyd_K-dw提取码：xdxa KepServer5.2链接：https://pan.baidu.com/s/1zmX5Myqts5zzG3DTjairdg提取码：7dwx Postgresql9.5.3链接：https://pan.baidu.com/s/1NA4aNTu9CGmAEYd9aeo-Gg提取码：l9h6 Setup_Npgsql-2.2.3.0-r2-net40链接：https://pan.baidu.com/s/1wLBTi8vgJUCvlqO8HvorOQ提取码：yv4h Orical 10g Client链接：https://pan.baidu.com/s/1btHhUl-ataDjq6J7KAWfuA提取码：ks71 psqlodbc_x86链接：https://pan.baidu.com/s/19FKNrVT4CxO5yHyvhVayOw提取码：9yud]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>安装包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[诊断指令说明--OBD模块]]></title>
    <url>%2F%E8%AF%8A%E6%96%AD%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E--OBD%E6%A8%A1%E5%9D%97.html</url>
    <content type="text"><![CDATA[通讯测试串口测试车辆通讯问题SendID：0730；RecvID：073833 33 07 38 FF FF 88 88 设置滤波 只接收ID为0738的指令55 55 07 30 02 10 03 00 00 00 00 00 88 88 发送指令 发送ID为0730其中： 02 10 03 00 00 00 00 00 为CAN指令，第一位为长度位。为什么用55指令测试通讯： 55指令中不包含CAN通讯等待的时间参数，不会出现第三版协议因超时时间较短而导致收不到车辆回复。 第三版协议指令说明发送数据F0 F0XX XX// 数据长度XX //指令类型:&emsp;&emsp;10: CAN数据（针对ISO15765协议而定）&emsp;&emsp;13: 设置CAN通信滤波ID&emsp;&emsp;14: 只发送指定长度(小于等于8)CAN数据&emsp;&emsp;15:设置CAN通信波特率及标准帧拓展帧&emsp;&emsp;20 :K线数据&emsp;&emsp;25: 设置K线初始化波特率及通信波特率&emsp;&emsp;05: 设置超时时间 CAN通讯短等待回复时间，默认100ms，长等待时间，默认5000msXX XX XX XX //本机IDXX XX XX XX //目标IDXX n…//数据FF//结尾 接收数据0F 0FXX XX// 数据长度XX //指令类型:&emsp;&emsp;10: CAN数据（针对ISO15765协议而定）&emsp;&emsp;13: 设置CAN通信滤波ID&emsp;&emsp;14: 接收到已设置了CAN通信滤波ID的CAN数据&emsp;&emsp;15:设置CAN通信波特率及标准帧拓展帧&emsp;&emsp;20: K线数据&emsp;&emsp;25: 设置K线初始化波特率及通信波特率&emsp;&emsp;05: 设置通信响应超时时间成功的响应指令&emsp;&emsp;7F: 收到错误回复，比如超时、数据格式错误等XX XX XX XX //本机IDXX XX XX XX //目标IDXX n…//数据FF//结尾 示例：发送：F0 F0 00 0C 10 00 00 07 20 00 00 07 30 10 03 FF接收：0F 0F 00 10 10 00 00 07 20 00 00 07 30 50 03 00 32 01 F4 FF 设置指定滤波ID及读取超时时间(0x12)发送：F0 F0 00 07 12 00 00 07 30 14 FF接收：若CAN总线上指定滤波ID(00 00 07 20)对应的数据及超时时间（20*10=200ms），则返回：0F 0F 00 0E 12 00 00 07 30 00 01 02 03 04 05 06 07 FF //(00 00 07 30 目标ID)否则返回超时提示； 设置滤波ID(0x13)发送：F0 F0 00 0A 13 00 00 07 20 FF FF FF FF FF接收：若CAN总线上有设置的ID对应的数据，则返回：0F 0F 00 0E 14 00 00 07 30 50 03 00 32 01 F4 FF//(00 00 07 30 目标ID)否则无返回； 只发送单帧数据(0x14)发送：F0 F0 00 0E 14 00 00 07 20 00 00 00 00 12 34 56 78 FF发送的目标ID: 00 00 07 20 发送的CAN数据: 12 34 56 78 设置波特率及标准帧拓展帧（0x15）第6字节及第7字节表示设置波特率大小，单位kbps第8字节及第9字节表示设置标准帧或拓展帧：00 00 标准帧 00 01 拓展帧接收数据01代表设置成功，无返回或者返回其他字节数目则设置失败，请注意检测数据格式。比如发送：F0 F0 00 06 15 01 F4 00 01 FF//设置波特率500K，拓展帧接收：0F 0F 00 03 15 01 FF//设置成功 设置波特率及标准帧拓展帧，无返回确认指令（针对0x15）(0x16)第6字节及第7字节表示设置波特率大小，单位kbps第8字节及第9字节表示设置标准帧或拓展帧：00 00 标准帧 00 01 拓展帧设置成功与否，都不返回数据发送：F0 F0 00 06 16 01 F4 00 01 FF//设置波特率500K，拓展帧接收：无 K-Line设置初始波特率及正常通讯波特率（0x25）第6字节及第7字节表示设置初始波特率（单位：bps），默认200bps第8字节及第9字节表示设置正常通讯波特率（单位：bps），默认10400bps接收数据01代表设置成功，无返回或者返回其他字节数目则设置失败，请注意检测数据格式。 发送：F0 F0 00 06 25 00 C8 28 A0 FF//设置波初始波特率200bps及正常通讯波特率10400bps接收：0F 0F 00 03 25 01 FF//设置成功 K线指令（0x20）发送：F0 F0 00 08 20 80 28 F1 01 81 1b FF接收：0F 0F 00 0A 20 80 F1 28 03 C1 6B 8F 57 FF 通讯错误的回复指令（0x7F）0F 0F 00 03 7F XX FF 故障码说明 XX故障码(Hex) 说明 00 等待接收或延时发送 02 发送单帧100ms超时未收到CAN数据 03 5000ms超时提示 04 接收多帧时，未收到数据100ms超时提示 05 读取指定ID数据，超时提示 11 接收多帧时未收到流控帧提示 12 接收到的CAN数据长度大于7错误提示 13 接收到未符合要求的数据类型 21 发送Kline数据500ms超时未收到CAN数据 F2 接收到PC数据不是以0xFF结尾 F1 CAN数据超过4096个字节 2A K线初始化后未接收到”格式”字节 2B K线初始化后自反馈是未接收到指定长度K线数据 2C K线未接收到0x80字节]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>诊断指令</tag>
        <tag>CAN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作-BBK]]></title>
    <url>%2F%E5%B7%A5%E4%BD%9C-BBK.html</url>
    <content type="text"><![CDATA[现场软件备份路径 现场问题整理 现场软件安装包下载]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTML常用标签]]></title>
    <url>%2FHTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE.html</url>
    <content type="text"><![CDATA[HTML标签HTML标题123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;h1&lt;/h1&gt; &lt;h2&gt;h2&lt;/h2&gt; &lt;h3&gt;h3&lt;/h3&gt; &lt;h4&gt;h4&lt;/h4&gt; &lt;h5&gt;h5&lt;/h5&gt; &lt;h6&gt;h6&lt;/h6&gt; &lt;/body&gt;&lt;/html&gt; 水平线/分割线&lt;hr/&gt; 注释html注释：&lt;!-- comment --&gt; 段落及换行html段落&lt;p&gt;以及段落换行&lt;br/&gt; 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;hello world&lt;/p&gt;&lt;p&gt;hello &lt;br/&gt; world&lt;/p&gt;&lt;hr/&gt;&lt;/body&gt;&lt;/html&gt; 文本格式化 标签 描述 &lt;b&gt; 加粗 &lt;big&gt; 大号字体 &lt;em&gt; 着重文字 &lt;i&gt; 斜体 &lt;small&gt; 小号字体 &lt;sub&gt; 下标 &lt;sup&gt; 上标 超链接&lt;a&gt;比较重要的属性有两个，分别是href、targethref指定超链接地址target指定打开方式&emsp;_blank 新页面打开 普通链接&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt; 邮件链接标签最简式&lt;a href=&quot;mailto:xxx@xx.com&quot;&gt;联系站长&lt;/a&gt; 图像使用格式：&lt;img src=&quot;url&quot;&gt;&emsp;alt 定义当图片无法加载时，显示什么信息&emsp;width 定义宽度，单位可以为像素 也可以为百分比&emsp;height 定义高度&lt; img src=“11.jpg” width=&quot;100px&quot; height=&quot;200px&quot; title=&quot;title&quot; alt=&quot;图片无法显示，请刷新&quot;/&gt; 表格表格由&lt;table&gt;来定义，每行&lt;tr&gt; 有许多单元格&lt;td&gt;。表头可以使用&lt;th&gt;&lt;table&gt;标签属性： border：表格边框属性；当使用border=”1”设置边框时，会在所有td以及table上嵌套边框，当border加大时，只有table框会加粗。cellspacing：单元格与单元格之间的间隙。当cellspacing=”0”时，单元格之间的间隙为0，但边框线并不会合并。☆☆合并边框的写法style=”border-collapse:collapse;” 使用边框合并时，无需设置cellspacing。cellpadding:单元格内边距，单元格中文字与单元格边框之间的距离。width/height:表格的宽高align：设置表格在父容器中的对齐方式 ，left/居左 center/居中 right/居右☆☆当表格使用align属性时，相当于使表格浮动，可能会导致表格后面的元素受表格浮动影响，导致布局错乱。bgcolor：背景色background：背景图，后接相对路径。背景图和背景色同时生效时，图会覆盖背景色bordercolor：设置边框颜色 在&lt;table&gt;中可以嵌入&lt;th&gt; &lt;tr&gt; &lt;td&gt;等标签 &lt;tr&gt; 定义行 &lt;th&gt; 定义表头 colspan 定义表头单元格可以横跨的列数。 rowspan 定义表头单元格横跨的行数 heardes 定义与表头单元格相关联的一个或者多个单元格。(html5新增) &lt;td&gt; 定义单元格 colspan 定义单元格可以横跨的列数。 rowspan 定义单元格横跨的行数 heardes 定义与单元格相关联的一个或者多个单元格。(html5新增) 表格固定高度：overflow-y:auto; 列表无序列表&lt;ul&gt;有序列表&lt;ol&gt; 123456789&lt;ul&gt; &lt;li&gt;male&lt;/li&gt; &lt;li&gt;female&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;ol&gt; &lt;li&gt;male&lt;/li&gt; &lt;li&gt;female&lt;/li&gt;&lt;/ol&gt;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content type="text"><![CDATA[Re库re.search 扫描整个字符串并返回第一个成功的匹配re.search(pattern,string,flag=0) pattern:正则表达式字符串string:待匹配字符串flag:控制标记 re.I或re.IGNORECASE表示忽略正则表达式的大小写，[A-Z]可匹配大小写re.M或re.MULTILINE正字表达式中的^操作符能将给定字符串的每一行当做匹配开始re.S或re.DOTALL正则表达式中的.操作符能匹配所有字符，默认不能匹配换行符 re.match(pattern,string,flag=0) re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配 re.findall在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表re.split(pattern,string,maxsplit=0,flag=0) 将字符串按照正则表达式匹配的结果进行分割，返回列表re.split([a],sadfab)返回s,df,b re.sub(pattern,repl,string,count=0,flag=0) 在一个字符串中替换所有正则表达式所匹配的子串，返回替换后的字符串repl:替换匹配字符串的字符串count:匹配的最大替换次数 Match对象属性 .string:待匹配文本.re:匹配时使用的pattern对象.pos:正则表达式搜索文本的开始位置.endpos:正则表达式搜索文本的结束位置 Match对象方法 .group():group(0)获取匹配后的字符串,group(n)匹配正则表达式中如(\d+)第n个括号所匹配字符串.start():匹配字符串在原始字符串的开始位置.end():.span():返回(.start(),.end()) 常用字符 字符 描述 实例 . 任意单个字符 [] 字符集，对单个字符给出取值范围 [abc]表示a或b或c的单个字符，[a-z]表示a-z的单个字符 [^] 非字符集，对单个字符给出排除范围 [^abc]表示非a或b或c的单个字符 * 前一个字符0次或无限次重复 abc*表示ab、abc、abccccc + 前一个字符的1次或无限次重复 abc+表示abc、abccc ? 前一个字符0次或1次重复 abc?表示ab或abc | 左右表达式任意一个 a|b 表示a或b {m} 重复前一个字符m次 ab{2}cb表示abbcb,注意次数 {m,n} 重复前面一个字符m至n次(包含n) ab{1,2}c表示abc或abbc ^ 匹配字符串开头 ^abc表示abc在一个字符串的开头 $ 匹配字符串结尾 abc$abc表示abc在一个字符串的结尾 () 分组标记，内部只能用|操作符 (abc)表示abc,(abc \d 数字，等价于[0-9] \w 单词字符，等价于[A-Za-z0-9] 非打印字符非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列： 字符 描述 \cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \f 匹配一个换页符。等价于 \x0c 和 \cL。 \n 匹配一个换行符。等价于 \x0a 和 \cJ。 \r 匹配一个回车符。等价于 \x0d 和 \cM。 \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 \t 匹配一个制表符。等价于 \x09 和 \cI。 \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。 特殊字符 字符 描述 $ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。 ( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。 * 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。 + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。 . 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。 [ 标记一个中括号表达式的开始。要匹配 [，请使用 [。 [] [abc]表示a或b或c，[az]表示az其中一个 [^] [^abc]表示非a或b或c ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。 \ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。 { 标记限定符表达式的开始。要匹配 {，请使用 {。 | 指明两项之间的一个选择。要匹配 |，请使用 |。 限定符限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。正则表达式的限定符有： 字符 描述 * 匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 \、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配* 定位符定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。正则表达式的定位符有： 字符 描述 ^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。 $ 匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。 \b 匹配一个单词边界，即字与空格间的位置。 \B 非单词边界匹配。 注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。 环视环视又叫预搜索和零宽断言环视只占用逻辑位置 不占用物理位置 环视 含义 (?=exp) 肯定顺序环视，子表达式能匹配右侧的文本 (?!exp) 否定顺序环视，子表达式不能匹配右侧的文本 (?&lt;=exp) 肯定逆序环视，子表达式能匹配左侧的文本 (?&lt;!exp) 否定逆序环视，子表达式不能匹配左侧的文本 示例：下列环视正则匹配均输出”AAA” 123456import reprint(re.findall("(?&lt;=B)AAA","BAAA"))print(re.findall("(?&lt;!B)AAA","CAAA"))#这里使用(?&lt;!B)、(?&lt;!=B)均可print(re.findall("AAA(?=B)","AAAB"))print(re.findall("AAA(?!B)","AAAC"))#这里使用(?!B)、(?!=B)均可]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[现场问题整理]]></title>
    <url>%2F%E7%8E%B0%E5%9C%BA%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86.html</url>
    <content type="text"><![CDATA[通讯测试串口测试车辆通讯问题SendID：0730；RecvID：073833 33 07 38 FF FF 88 88 设置滤波 只接收ID为0738的指令55 55 07 30 02 10 03 00 00 00 00 00 88 88 发送指令 发送ID为0730其中： 02 10 03 00 00 00 00 00 为CAN指令，第一位为长度位。 四轮大灯四轮设备中文乱码导致数据上传失败解决方法 更改时间、区域为China 详情请咨询 Coulsonxia 宝骏现场大灯数据单独上传实现方法 流程中新建TCPClient用于接收大灯通讯启动大灯需要发送车型信息，格式为：{0x02}{车辆信息_ToHLA_ZTS};{车辆信息_ToHLA_VIN}{0x0D}{0x0A}接收解析并保存大灯数据]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>现场问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[现场软件备份路径]]></title>
    <url>%2F%E7%8E%B0%E5%9C%BA%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD%E8%B7%AF%E5%BE%84.html</url>
    <content type="text"><![CDATA[网盘中软件工程下有相应文件夹的上传在相应文件夹中，没有的上传在对应项目文件夹中，后期会提醒Dean在软件工程中新建相应文件夹。Z:\4-软件共享John\软件工程 网盘地址内网：http://192.168.1.80:5000/外网：https://bbknick.synology.me:5001/ 北汽莱西被动式ACC更新时间：20190806 Z:\6-项目管理Jason\2018\218039 北汽新能源莱西工厂一套驾驶辅助标定设备项目-Jones\17-现场设备调试程序 北汽昆明更新时间：20190806 Z:\6-项目管理Jason\2017\117314 北汽新能源汽车工程技术中心（昆明）检测线项目-Jones\17-现场设备调试程序\设备程序 众泰贵港腾骏更新时间：20190806 Z:\4-软件共享John\软件工程\腾骏\腾骏贵港]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>现场软件备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库导入导出]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA.html</url>
    <content type="text"><![CDATA[Postgresql测试软件导出、Postgresql导入测试软件导出 连接数据库设置完筛选条件后点击导出到Excel重命名为：表名.csv 测试软件导入 1、打开导出表添加新的数据后，删除第一行表头以及第一列序号2、删除原数据库已有行后保存3、打开Postgres找到相应表右键导入4、文件名选择csv文件路径、格式选csv、字符编码可选5、点击导入即可 如果主键为自增序列执行6、76、将相应表的序列创建脚本后删除7、更改脚本中的START大于新增数据的主键ID后执行脚本 SQL shell(psql)导入 1、将excel处理好后，另存为csv（Comma Delimited）2、运行SQL shell(psql) 并登录3、运行’COPY mytable FROM ‘/myfile.csv’ WITH CSV HEADER SQL shell(psql)导出 COPY (select * from mytable) to ‘/myfile.csv’ with csv header;]]></content>
      <categories>
        <category>工作</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无处安放的矫情]]></title>
    <url>%2F%E6%97%A0%E5%A4%84%E5%AE%89%E6%94%BE%E7%9A%84%E7%9F%AB%E6%83%85.html</url>
    <content type="text"><![CDATA[Enter password to read！ Incorrect Password! No content to display! U2FsdGVkX19MGz/Ixnfy6ZXxE0T9ARutwORJhp/XH7o=]]></content>
  </entry>
  <entry>
    <title><![CDATA[csharp XML]]></title>
    <url>%2FCSharp%20XML.html</url>
    <content type="text"><![CDATA[XML创建、读取配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071static public void WirteConfig(string FileName, string KeyName, string Value)&#123; try &#123; string FilePath = OnlyOneStartUp.UseConfigPath; string AllFileName = FilePath + "\\" + FileName + ".xml"; if (!Directory.Exists(FilePath)) Directory.CreateDirectory(FilePath); DataSet ds = new DataSet(); if (File.Exists(AllFileName)) ds.ReadXml(AllFileName); if (ds.Tables.Count &lt; 1) ds.Tables.Add(); if (ds.Tables[0].Rows.Count &lt; 1) ds.Tables[0].Rows.Add(); if (!ds.Tables[0].Columns.Contains(KeyName)) ds.Tables[0].Columns.Add(KeyName); ds.Tables[0].Rows[0][KeyName] = Value; ds.WriteXml(AllFileName); &#125; catch (Exception e) &#123; string sError = string.Format("写入配置信息Error:&#123;0&#125;", e.Message); ErrorOut(MethodInfo.GetCurrentMethod().Name, sError); &#125;&#125;/// &lt;summary&gt;/// 读出配置文件/// &lt;/summary&gt;/// &lt;param name="FileName"&gt;配置文件名称&lt;/param&gt;/// &lt;param name="KeyName"&gt;键名&lt;/param&gt;/// &lt;param name="Value"&gt;返回的值&lt;/param&gt;static public bool ReadConfig(string FileName, string KeyName, ref string Value)&#123; try &#123; string FilePath = OnlyOneStartUp.UseConfigPath; string AllFileName = FilePath + "\\" + FileName + ".xml"; if (!Directory.Exists(FilePath)) return false; DataSet ds = new DataSet(); if (File.Exists(AllFileName)) ds.ReadXml(AllFileName); else return false; if (ds.Tables.Count &lt; 1) return false; if (ds.Tables[0].Rows.Count &lt; 1) return false; if (!ds.Tables[0].Columns.Contains(KeyName)) return false; Value = Convert.ToString(ds.Tables[0].Rows[0][KeyName]); return true; &#125; catch (Exception e) &#123; string sError = string.Format("读取配置信息Error:&#123;0&#125;", e.Message); ErrorOut(MethodInfo.GetCurrentMethod().Name, sError); return false; &#125;&#125;static public void ReadConfigEx(string FileName, string KeyName, ref string Value)&#123; if (!ReadConfig(FileName, KeyName, ref Value)) WirteConfig(FileName, KeyName, Value);&#125;]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据转换]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2.html</url>
    <content type="text"><![CDATA[IEEE to Double、Char、int在线转换工具http://www.binaryconvert.com C# IEEE to Single123456789101112131415161718192021222324252627private Single IEEE2Single(byte[] b)&#123; try &#123; Array.Reverse(b); Single d = BitConverter.ToSingle(b, 0); return (Single)Math.Round(d, 5); &#125; catch (System.Exception ex) &#123; return 0; &#125;&#125;private byte[] SingleToIEEE(Single d)&#123; try &#123; byte[] b = new byte[]&#123;&#125;; b = BitConverter.GetBytes(d); Array.Reverse(b); return b; &#125; catch (System.Exception ex) &#123; return new byte[] &#123; 0x00, 0x00, 0x00, 0x00&#125;; &#125;&#125; 3CA97E13-&gt;0.02069 格式转换Double to Hex12345int Height_LF = (int)Convert.ToDouble(XmlFO.ListObject["WBH_LF"].xValue);Height_RR *= 4;string s = string.Empty;s = s + ((byte)(Height_LF &gt;&gt; 8)).ToString("x2")+ " ";s = s + ((byte)(Height_LF)).ToString("x2") + " "; 2700-&gt;0a 8c Byte to uint1234567891011121314151617181920uint BytesToUint(byte[] bys)&#123; uint ReVal = 0; foreach (byte b in bys) &#123; ReVal &lt;&lt;= 8; ReVal += b; &#125; return ReVal;&#125;byte[] UintToBytes(uint UnVal, int Count)&#123; byte[] ReVal = new byte[Count]; for (int i = 0; i &lt; Count; i++) &#123; ReVal[Count - i - 1] = (byte)(UnVal &gt;&gt; (i * 8)); &#125; return ReVal;&#125; Int to Byte1234567891011121314151617181920212223242526272829public xState ToByte(string sPara)&#123; try &#123; string[] SepPara; if (!XmlFO.SepParams(sPara, 2, out SepPara)) return xState.xError; xBytes tmpbyte = (xBytes)XmlFO.GetCheckSpecTypeObject(SepPara[0], typeof(xBytes)); if (tmpbyte == null) return xState.xError; int Count = Convert.ToInt32(SepPara[1]); if (Count &gt; 4) Count = 4; if (Count &lt; 1) Count = 1; Byte[] TmpByte = new byte[Count]; for (int i = 0; i &lt; Count; i++) &#123; TmpByte[i] = (byte)((iValue &gt;&gt; ((Count - i - 1) * 8)) &amp; 0xFF); &#125; tmpbyte.Bytes = TmpByte; return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125; Bytepublic byte[] xHexToBytes(string InStr)&#123; if (!InStr.StartsWith("0x")) return System.Text.Encoding.GetEncoding(cPage).GetBytes(InStr); InStr = InStr.Substring(2); string NSpaceStr = InStr.Replace(" ", string.Empty); List&lt;byte&gt; ReByte = new List&lt;byte&gt;(); for (int i = 0; i &lt; NSpaceStr.Length / 2; i++) &#123; ReByte.Add(Convert.ToByte(NSpaceStr.Substring(i * 2, 2), 16)); &#125; return ReByte.ToArray();&#125;public byte[] StringAnaToBytes(string StrAna)&#123; List&lt;byte&gt; ReByte = new List&lt;byte&gt;(); try &#123; string[] strs = StrAna.Split('&#123;', '&#125;'); for (int i = 0; i &lt; strs.Length; i++) &#123; if (i % 2 == 0) ReByte.AddRange(System.Text.Encoding.GetEncoding(cPage).GetBytes(strs[i])); else ReByte.AddRange(xHexToBytes(strs[i])); &#125; &#125; catch (Exception e) &#123; string xError = string.Format("字符串转换到BYTE失败Error:&#123;0&#125; 字串：&#123;1&#125;", e.Message, StrAna); xErrorOut(MethodInfo.GetCurrentMethod().Name, xError); &#125; return ReByte.ToArray();&#125;public string PackBytes(byte[] ArrByte)&#123; string ReStr = "&#123;0x"; foreach (byte b in ArrByte) &#123; ReStr += b.ToString("X2"); &#125; ReStr += "&#125;"; return ReStr;&#125;public int cPage = Encoding.Default.CodePage;public byte[] StringToBytes(string InValue)&#123; string str = XmlFO.StringAnalysis(InValue); return StringAnaToBytes(str);&#125;public string BytesToString(byte[] InBytes)&#123; return System.Text.Encoding.GetEncoding(cPage).GetString(Bytes);&#125;public xState ToString(string sPara)&#123; try &#123; XmlFO.ListObject[sPara].xValue = BytesToString(Bytes); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState ToInt(string sPara)&#123; try &#123; xInt TmpInt = (xInt)XmlFO.GetCheckSpecTypeObject(sPara, typeof(xInt)); if (TmpInt == null) return xState.xError; int Count = Bytes.Length; int NumTmp = 0; if (Count &gt; 0) &#123; NumTmp = (sbyte)Bytes[0]; if (Count &gt; 4) Count = 4; for (int i = 1; i &lt; Count; i++) &#123; NumTmp &lt;&lt;= 8; NumTmp += Bytes[i]; &#125; &#125; TmpInt.iValue = NumTmp; return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState ToInt_MinusSign(string sPara)&#123; try &#123; xInt TmpInt = (xInt)XmlFO.GetCheckSpecTypeObject(sPara, typeof(xInt)); if (TmpInt == null) return xState.xError; int Count = Bytes.Length; int NumTmp = 0; if (Count &gt; 0) &#123; NumTmp = (Bytes[0] &amp; 0x7F); if (Count &gt; 4) Count = 4; for (int i = 1; i &lt; Count; i++) &#123; NumTmp &lt;&lt;= 8; NumTmp += Bytes[i]; &#125; if (Bytes[0] &gt; 0x7F) NumTmp = -NumTmp; &#125; TmpInt.iValue = NumTmp; return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState ToInt_Uint(string sPara)&#123; try &#123; xInt TmpInt = (xInt)XmlFO.GetCheckSpecTypeObject(sPara, typeof(xInt)); if (TmpInt == null) return xState.xError; int Count = Bytes.Length; int NumTmp = 0; if (Count &gt; 0) &#123; NumTmp = Bytes[0]; if (Count &gt; 4) Count = 4; for (int i = 1; i &lt; Count; i++) &#123; NumTmp &lt;&lt;= 8; NumTmp += Bytes[i]; &#125; &#125; TmpInt.iValue = NumTmp; return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState CopyFrom(string sPara)&#123; try &#123; xBytes TmpByte = (xBytes)XmlFO.GetCheckSpecTypeObject(sPara, typeof(xBytes)); if (TmpByte == null) return xState.xError; if (TmpByte.cPage != cPage) Bytes = Encoding.Convert(Encoding.GetEncoding(TmpByte.cPage), Encoding.GetEncoding(cPage), TmpByte.Bytes); else Bytes = TmpByte.Bytes.ToArray(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState SubByteFrom(string sPara)&#123; try &#123; string[] SepPara; if (!XmlFO.SepParams(sPara, 3, out SepPara)) return xState.xError; List&lt;Byte&gt; tmpByte = new List&lt;byte&gt;(); tmpByte.AddRange(StringToBytes(SepPara[0])); if (tmpByte.Count &gt; 0) &#123; int start = Convert.ToInt32(SepPara[1]);//start 0 int leng = Convert.ToInt32(SepPara[2]); if (start &gt;= tmpByte.Count) start = tmpByte.Count - 1; if ((start + leng) &gt; tmpByte.Count) leng = tmpByte.Count - start; Bytes = tmpByte.GetRange(start, leng).ToArray(); &#125; else Bytes = tmpByte.ToArray(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState IsEqual(string sPara)&#123; try &#123; string[] SepPara; if (!XmlFO.SepParams(sPara, 2, out SepPara)) return xState.xError; byte[] tmpByte = StringToBytes(SepPara[0]); int start = Convert.ToInt32(SepPara[1]);//start 0 if ((start + tmpByte.Length) &gt; Bytes.Length) return xState.xFalse; for (int i = 0; i &lt; tmpByte.Length; i++) &#123; if (tmpByte[i] != Bytes[start + i]) return xState.xFalse; &#125; return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState CheckBit(string sPara)&#123; try &#123; string[] SepPara; if (!XmlFO.SepParams(sPara, 2, out SepPara)) return xState.xError; int byteNo = Convert.ToInt32(SepPara[0]);//start 0 int bitNo = Convert.ToInt32(SepPara[1]);//start 7---0 if (bitNo &gt; 7) bitNo = 7; if (bitNo &lt; 0) bitNo = 0; int Num = (Bytes[byteNo] &lt;&lt; (7 - bitNo)) &amp; 0xFF; Num = (Num &gt;&gt; 7) &amp; 0xFF; if (Num == 1) return xState.xTrue; else return xState.xFalse; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xError; &#125;&#125;public xState UseDefaultCodePage(string sPara)&#123; cPage = Encoding.Default.CodePage; return xState.xTrue;&#125;public xState UseUTF8CodePage(string sPara)&#123; cPage = Encoding.UTF8.CodePage; return xState.xTrue;&#125;public xState UseUnicodeCodePage(string sPara)&#123; cPage = Encoding.Unicode.CodePage; return xState.xTrue;&#125;//转换public xState Convert_String_ASCII(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, Bytes.Length); XmlFO.ListObject[Sep.sName].xValue = Encoding.ASCII.GetString(Bytes, Sep.iStart, Sep.iCount); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;public xState Convert_String_BCD(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, Bytes.Length); string strTmp = string.Empty; for (int i = Sep.iStart; (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++) strTmp += Bytes[i].ToString("X2"); XmlFO.ListObject[Sep.sName].xValue = strTmp; return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;public xState Convert_Double(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, 1); int NumTmp = 0; for (int i = Sep.iStart; (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++) &#123; NumTmp &lt;&lt;= 8; NumTmp += Bytes[i]; &#125; double DoubTmp = (NumTmp * Sep.dRadio + Sep.dOffset); XmlFO.ListObject[Sep.sName].xValue = DoubTmp.ToString(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;public xState Convert_Double_Bit(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, 1); double NumTmp = 0; if (Sep.iCount &gt; 4) NumTmp = BitConverter.ToDouble(Bytes, Sep.iStart); else NumTmp = BitConverter.ToSingle(Bytes, Sep.iStart); double DoubTmp = (NumTmp * Sep.dRadio + Sep.dOffset); XmlFO.ListObject[Sep.sName].xValue = DoubTmp.ToString(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;public xState Convert_Double_Minus(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, 1); int NumTmp = (Bytes[0] &amp; 0x7F); for (int i = (Sep.iStart + 1); (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++) &#123; NumTmp &lt;&lt;= 8; NumTmp += Bytes[i]; &#125; if (Bytes[0] &gt; 0x7F) NumTmp = -NumTmp; double DoubTmp = (NumTmp * Sep.dRadio + Sep.dOffset); XmlFO.ListObject[Sep.sName].xValue = DoubTmp.ToString(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;public xState Convert_Int(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, 1); int NumTmp = 0; for (int i = Sep.iStart; (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++) &#123; NumTmp &lt;&lt;= 8; NumTmp += Bytes[i]; &#125; NumTmp = (int)(NumTmp * Sep.dRadio + Sep.dOffset); XmlFO.ListObject[Sep.sName].xValue = NumTmp.ToString(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;public xState Convert_Int_Bit(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, 1); int NumTmp = 0; if (Sep.iCount &gt; 4) NumTmp = (int)BitConverter.ToInt64(Bytes, Sep.iStart); else if (Sep.iCount &gt; 2) NumTmp = (int)BitConverter.ToInt32(Bytes, Sep.iStart); else if (Sep.iCount &gt; 1) NumTmp = (int)BitConverter.ToInt16(Bytes, Sep.iStart); else NumTmp = Bytes[Sep.iStart]; NumTmp = (int)(NumTmp * Sep.dRadio + Sep.dOffset); XmlFO.ListObject[Sep.sName].xValue = NumTmp.ToString(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;public xState Append_Double(string sPara)&#123; try &#123; cSepParams Sep = new cSepParams(sPara, 4); int iTmp = (int)(Convert.ToDouble(XmlFO.ListObject[Sep.sName].xValue) * Sep.dRadio + Sep.dOffset); List&lt;Byte&gt; ListTmp = new List&lt;byte&gt;(); ListTmp.AddRange(Bytes); for (int i = 0; i &lt; Sep.iCount; i++) &#123; ListTmp.Add((byte)((iTmp &gt;&gt; ((Sep.iCount - i - 1) * 8)) &amp; 0xFF)); &#125; Bytes = ListTmp.ToArray(); return xState.xTrue; &#125; catch (Exception e) &#123; xErrorOutException(e); return xState.xFalse; &#125;&#125;]]></content>
      <categories>
        <category>数据转换</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>IEEE</tag>
        <tag>Hex</tag>
        <tag>Double</tag>
        <tag>Byte</tag>
        <tag>int</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RGB颜色]]></title>
    <url>%2FRGB%E9%A2%9C%E8%89%B2.html</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>RGB</category>
      </categories>
      <tags>
        <tag>RGB颜色表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css常用属性]]></title>
    <url>%2Fcss%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.html</url>
    <content type="text"><![CDATA[文本设置123456789101112font: italic bold 36px 宋体; //顺序不可变font-wight: 100-900、bold（加粗）font-size: 10px; // 12px(12像素)、50%、larger、smallfont-style: initial（初始）、italic（斜体字）、normal（默认）、oblique（倾斜）font-family: "微软雅黑" // 宋体text-align: center; //横向排列 left、right 和 centerline-height: 200px; //文本行高 通俗的讲，文字高度加上文字上下的空白区域的高度 50%:基于字体大小的百分比vertical-align:-4px; //设置元素内容的垂直对齐方式 ,只对行内元素有效，对块级元素无效text-indent: 150px; //首行缩进letter-spacing: 10px; //字母间隙word-spacing: 20px; //单词间隙text-transform: capitalize; //单词大写 背景属性1234567background-color: cornflowerblue; //背景颜色background-image: url('1.jpg'); //背景图片background-repeat: no-repeat/repeat-x/repeat=t; //(默认铺满，不重复，x重复，y重复)background-size:600px 250px //大小background-position: right top（20px 20px）;//(横向：left center right)(纵向：top center bottom) //简写：&lt;body style="background: 20px 20px no-repeat #ff4 url('1.jpg')"&gt;&lt;div style="width: 300px;height: 300px;background: 20px 20px no-repeat #ff4 url('1.jpg')"&gt; 颜色属性1234&lt;div style="color:blueviolet"&gt;ppppp&lt;/div&gt; //颜色少&lt;div style="color:#ffee33"&gt;ppppp&lt;/div&gt; //百度颜色代码可以查询更多&lt;div style="color:rgb(255,0,0)"&gt;ppppp&lt;/div&gt; //三原色 红绿蓝256级&lt;div style="color:rgba(255,0,0,0.5)"&gt;ppppp&lt;/div&gt; //比上一个 加了一个透明度]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css属性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[泛型的特点]]></title>
    <url>%2F%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%89%B9%E7%82%B9.html</url>
    <content type="text"><![CDATA[泛型的主要特性泛型类型的一些重要特征使它们相比传统的非泛型类型具有如下的显著特征： 类型安全性能二进制代码复用 类型安全泛型最重要的特征之一是类型安全性。对于非泛型ArrayList类，如果使用对象类型，则可以向集合中添加任何类型，这些类型有时会导致严重的问题。下面的示例显示向ArrayList类型的集合添加一个整数、字符串和对象； 1234ArrayList obj = new ArrayList(); obj.Add(50); obj.Add("Dog"); obj.Add(new TestClass()); 现在，如果使用整数对象来使用foreach语句进行遍历的话，当编译器接受到代码，但是因为集合中的所有元素都不是整数，所以会导致运行时异常； 1234foreach(int i in obj) &#123; Console.WriteLine(i); &#125; 编程的经验法则是应该尽早检测到错误。对于泛型类Test，泛型类型T定义允许哪些类型。通过使用Test的定义，只能向集合添加整型类型的数据。这时候当Add()方法具有以下无效参数的时候编译器将不编译代码； 1234Test&lt;int&gt; obj = new Test&lt;int&gt;(); obj.Add(50); obj.Add("Dog"); //编译错误obj.Add(new TestClass()); //编译错误 性能在下面的示例中，ArrayList类存储对象，并且定义了Add()方法来存储一些整型参数。因此，整数类型被装箱。当使用foreach语句读取ArrayList中的值时，将发生拆箱。 1234567ArrayList obj = new ArrayList(); obj.Add(50); //装箱- 值类型转换成引用类型int x= (int)obj[0]; //拆箱foreach(int i in obj) &#123; Console.WriteLine(i); // 拆箱&#125; 注意：泛型比其他集合（如ArrayList）更快。 代替使用对象类型，TestClass类的泛型类型被定义为int，因此在从编译器动态生成的类中将使用int类型。所以将不会发生装箱和拆箱，如下所示； 1234567TestClass&lt;int&gt; obj = new TestClass&lt;int&gt;(); obj.Add(50); //没有装箱int x= obj[0]; // 没有拆箱foreach(int i in obj) &#123; Console.WriteLine(i); //没有拆箱&#125; 二进制代码复用泛型类型提供了一种源代码保护机制。泛型类可以定义一次，并且可以使用许多不同类型来进行实例化。泛型可以在一种CLR支持的语言中定义，并可以被另一种.NET语言使用。以下TestClass 使用int和string类型进行实例化： 12345TestClass&lt;int&gt; obj = new TestClass&lt;int&gt;(); obj.Add(50); TestClass&lt;string&gt; obj1 = new TestClass&lt;string&gt;(); Obj1.Add("hello");]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSharp Static]]></title>
    <url>%2FCSharp%20Static.html</url>
    <content type="text"><![CDATA[静态方法只能访问类的静态成员，不能访问类的非静态成员；非静态方法可以访问类的静态成员，也可以访问类的非静态成员；静态方法不能使用实例来调用，只能使用类名来调用。 static静态全局变量 特点： 1、该变量在全局数据区分配内存。2、初始化：如果不显式初始化，那么将被隐式初始化为0。 静态局部变量 特点： 1、该变量在全局数据区分配内存。2、初始化：如果不显式初始化，那么将被隐式初始化为0。3、它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。 静态数据成员 内存分配：在程序的全局数据区分配。初始化和定义： 1、静态数据成员定义时要分配空间，所以不能在类声明中定义。2、为了避免在多个使用该类的源文件中，对其重复定义，所以，不能在类的头文件中定义。3、静态数据成员因为程序一开始运行就必需存在，所以其初始化的最佳位置在类的内部实现。 特点 对相于 public,protected,private 关键字的影响它和普通数据成员一样，因为其空间在全局数据区分配，属于所有本类的对象共享，所以，它不属于特定的类对象，在没产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作它。 访问形式 类对象名.静态数据成员名 静态数据成员，主要用在类的所有实例都拥有的属性上。比如，对于一个存款类，帐号相对于每个实例都是不同的，但每个实例的利息是相同的。所以，应该把利息设为存款类的静态数据成员。这有两个好处，第一，不管定义多少个存款类对象，利息数据成员都共享分配在全局区的内存，所以节省存贮空间。第二，一旦利息需要改变时，只要改变一次，则所有存款类对象的利息全改变过来了，因为它们实际上是共用一个东西。 静态成员函数 特点： 1、静态成员函数与类相联系，不与类的对象相联系。2、静态成员函数不能访问非静态数据成员。原因很简单，非静态数据成员属于特定的类实例。 作用： 主要用于对静态数据成员的操作。 调用形式： 类对象名.静态成员函数名（） 总结静态方法只能访问类的静态成员，不能访问类的非静态成员；非静态方法可以访问类的静态成员，也可以访问类的非静态成员；静态方法不能使用实例来调用，只能使用类名来调用。 12345678910111213static int i = getNum();int j = getNum();static int num = 1;static int getNum()&#123; return num;&#125;static void Main(string[] args)&#123; Console.WriteLine("i=&#123;0&#125;",i); Console.WriteLine("j=&#123;0&#125;", new class1().j); Console.Read();&#125; 分析：Console.WriteLine(&quot;i={0}&quot;,i);这里i是static变量，而且类class1是第一次被引用，要先为class1里面所有的static变量分配内存。尽管现在有超线程技术，但是指令在逻辑还是一条一条的按顺序执行的，所以先为static int i分配内存，并且在该内存中保持int的缺省值0，接着再为static int num 变量分配内存，值当然也为0。 然后执行第二步，为变量赋值：先为static int i变量赋值，i＝getNum()，看getNum里面的代码，就是return num，这个时候num的值是0，于是i就为0了。然后对变量num赋值，num＝1；这行代码执行后，num就为1了。 static的优点是什么？为什么要使用static 变量或函数？？有一些频繁使用的东西，如果你每次使用都重新new一下，那么这个开销可能会很高，如果使用static，一直放在内存中，那么想用就直接用，而不需要重新new一块空间初始化数据。那么static就是为了实现一个系统的缓存作用的，其生命周期直到应用程序退出结束。 静态成员包括静态字段和静态属性，静态成员和类相关联，不依赖于对象而存在，只能由类访问，而不能由对象访问； 静态成员属于类所有，无认创建多少实例对象，静态成员在内存中只有一份；实例成员属于类的实例所有，每创建一个实例对象，实例成员都会在内存中分配一块内存区域。所以静态成员一般用于存放共享的数据段，如数据库连接字符串等。 一个类如果只包含静态成员和静态方法，则该类可以定义为静态类，给类加上static修饰符； 静态方法和非静态方法：一、性能上：静态方法和实例方法差别不大。所有方法，不管是静态方法还是实例方法，都是在JIT加载类时分配内存，不同的是静态方法以类名引用，而实例方法对对象实例引用。创建实例时，不会再为类的方法分配内存，所有的实例对象共用一个类的方法代码。因此静态方法和实例方法的调用，在性能上的差别微乎其微。 二、静态方法只能由类访问；实例方法只能由对象访问。 优点： 1、静态变量在类载入时，就装入内存2、使用时不用 New 就意味的不必 创建类中 所有对象，就可以调用 某个方法 缺点： 垃圾回收机制 不能 回收 静态变量，静态类变量 会常驻内存 c#中静态类的优缺点 缺点： 1、整个类型在程序运行期间只加载一次。 这样是对于那些经常使用的类型来说的，那就不用每次使用前都先加载。效率高些。但是对那些不常用的类型来说。2、如果是静态类型，那就要一直占用相当的内存；一直到程序停止。或者应用程序域被卸载。所以应该只对那些常用的类型定义成静态类型。 优点： 1、它们仅包含静态成员。2、它们不能被实例化。3、它们是密封的。4、它们不能包含实例构造函数（C# 编程指南）。]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSharp基础]]></title>
    <url>%2FCSharp%E5%9F%BA%E7%A1%80.html</url>
    <content type="text"><![CDATA[记录写bug过程中遇到的一些疑问 数据类型值类型存储在堆栈上，引用类型在栈中存储一个引用，其实际的存储位置位于托管堆。C#类为引用类型，结构为值类型。从值类型转化为引用类型称为装箱，如果方法需要把一个对象作为参数，而且传送一个值类型，装箱操作会自动进行；装箱的值类型可以使用拆箱操作转换为值类型，在拆箱时，需要使用类型转换运算符。 值类型结构体 数值类型(整数，浮点数，高精度浮点数) 可空类型 布尔 字符 枚举 引用类型数组，用户定义的类、接口、委托，object，字符串 装箱和拆箱装箱是一种通过将变量存储到System.Object中来显式地将值类型转换为引用类型的机制。当您装入值时，CLR会将新对象分配到堆中，并将值类型的值复制到该实例中。例如： 12int a = 20; object b = a; //装箱 相反的操作是拆箱，它是将引用类型转换回值类型的过程。此过程验证接收数据类型是否与装箱类型一致;int c = (int)b; // 拆箱 泛型 特征： 类型安全性能二进制代码复用 详见： 泛型的特点 为什么不用object代替泛型由于Object为所有类型的基类，所以可以处理任何数据类型的数据，但是其中存在这拆箱和装箱，如果数据太多会影响到程序的性能。在使用泛型的时候程序会在编译阶段根据我们提供的类型生成相应的二进制代码，无须进行装箱和拆箱操作。 接口为什么要用接口接口一般由上层人员发起，下层人员实现。写接口并不是为了扩展，而是为了扩展以后的模块仍然跟项目模块保持高度一致，为了扩展后的规范化。 实例化接口对象接口回调接口不仅可以声明对象，而且可以把对象实例化，还可以当做参数被传入。即继承中的向上转型，父类 FL=new 子类()，只不过这里的父类就是interface接口。 展开/折叠示例 12345678910111213141516171819202122232425interface Itemp&#123; double plus();&#125;public class num : Itemp&#123; double aa, bb; public num(double a, double b) &#123; this.bb = b; this.aa = a; &#125; public double plus() &#123; return (aa + bb); &#125;&#125;static void Main(string[] args)&#123; Itemp tm = null;//声明接口对象引用 tm = new num(1, 2);//接口回调(向上转型) Console.WriteLine(tm.plus());&#125; 类型参数约束&emsp;&emsp;在定义泛型类时，可以对客户端代码能够在实例化类时用于类型参数的类型种类施加限制。如果客户端代码尝试使用某个约束所不允许的类型来实例化类，则会产生编译时错误。这些限制称为约束。类型参数约束.NET支持的类型参数约束有以下五种： 123456where T : struct //类型参数必须是值类型；可以指定除 Nullable 以外的任何值类型where T : class //类型参数必须是引用类型；这一点也适用于任何类、接口、委托或数组类型where T : new() //类型参数必须具有无参数的公共构造函数。当与其他约束一起使用时，new() 约束必须最后指定where T : NameOfBaseClass //类型参数必须是指定的基类或派生自指定的基类where T : NameOfInterface //类型参数必须是指定的接口或实现指定的接口。可以指定多个接口约束。约束接口也可以是泛型的where T : U //为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数 当前程序运行路径Directory.GetCurrentDirectory() + &quot;\\Config]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客部署到Coding和github]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Coding%E5%92%8Cgithub.html</url>
    <content type="text"><![CDATA[部署到Github和Coding新建仓库 Github：新建Repository：name.github.io Coding：新建Repository：name.coding.me 添加SSH key若无SSHkey ssh-keygen -t rsa -C “your e-mail”Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt; 打开生成的id_rsa.pub文件并复制其中的内容添加到Github或Coding项目中然后在git中执行 Github： ssh -T git@github.com Coding： ssh -T git@git.coding.net //coding ssh -T git@git.dev.tencent.com //腾讯云 添加到腾讯云后需要开启Pages服务才可通过name.coding.me登录 更改博客配置文件123456deploy: type: git repository: github: git@github.com:silencejql/silencejql.github.io.git coding: git@git.dev.tencent.com:silencejql/silencejql.coding.me.git branch: master 不同格式相应作出调整即可 可能出现的问题http://name.coding.me 在google chrome中打开可能会默认https，修复方式为: 地址栏中输入 chrome://net-internals/#hsts在 Delete domain security policies 中输入项目的域名，并 Delete 删除可以在 Query domain 测试是否删除成功 这里如果还是不行， 请清除浏览器缓存！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Coding</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[托管DLL与非托管DLL]]></title>
    <url>%2F%E6%89%98%E7%AE%A1DLL%E4%B8%8E%E9%9D%9E%E6%89%98%E7%AE%A1DLL.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;托管DLL和非托管DLL的区别：狭义解释讲，托管DLL就在Dotnet环境生成的DLL文件；非托管DLL不是在Dotnet环境生成的DLL文件。&emsp;&emsp;托管DLL文件，可以在Dotnet环境通过 “添加引用” 的方式，直接把托管DLL文件添加到项目中，然后通过 Using DLL命名空间，来调用相应的DLL对象；非托管DLL文件，在Dotnet环境应用时，通过DllImport 调用。 概述&emsp;&emsp;托管dll虽然符合windows的PE格式规范，但是代码是以IL的形式保存在.Text 区的，而不是机器码，CLR会在运行时JIT编译成机器码再交给操作系统执行，这也就为什么托管代码称之为”托管”的意义。&emsp;&emsp;所以，要想注入托管dll，首先需要在目标进程中启动CLR，然后让CLR来加载managed dll。&emsp;&emsp;托管DLL，指完全由.NET托管代码实现的DLL，完全依赖于 .NET 平台的 CLR 运行。托管DLL，受.NET CLR管控，支持内存自动回收等的，对于.NET平台是安全DLL&emsp;&emsp;非托管DLL，是指完全或者部分 不是用.NET代码实现，不依赖于.NET平台即可运行，例如 COM方式 的DLL，不支持自动回收内存，对于.NET平台而言，也是非安全可控的。 &emsp;&emsp;正常编程所用的高级语言，是无法被计算机识别的。需要先将高级语言翻译为机器语言，才能被机器理解和运行。在标准C/C++中，编译过程是这样的：&emsp;&emsp;源代码首先经过预处理器，对头文件以及宏进行解析，然后经过编译器，生成汇编代码，接着，经过汇编，生成机器指令，最后将所有文件连接起来。这种编译方式的优点在于，最终直接生成了机器码，可以直接被计算机识别和运行，无需任何中间运行环境，但缺点也在于，由于不同平台能够识别的机器码不同，因此程序的跨平台能力较差。&emsp;&emsp;而在Java语言中，源代码并没有被直接翻译成机器码，而是编译成了一种中间代码（字节码Bytecode）。因此，运行Java程序需要一个额外的JRE（Java Runtime Enviromental）运行环境，在JRE中存在着JVM（Java Virtual Mechinal，Java虚拟机），在程序运行的时候，会将中间代码进一步解释为机器码，并在机器上运行。&emsp;&emsp;使用中间代码的好处在于，程序的跨平台性比较好，一次编译，可以在不同的设备上运行。&emsp;&emsp;托管/非托管是微软的.net framework中特有的概念，其中，非托管代码也叫本地（native）代码。与Java中的机制类似，也是先将源代码编译成中间代码（MSIL，Microsoft Intermediate Language），然后再由.net中的CLR将中间代码编译成机器代码。&emsp;&emsp;而C#与Java的区别在于，Java是先编译后解释，C#是两次编译。 调用DLL中的非托管函数一般方法首先，应该在C#语言源程序中声明外部方法，其基本形式是： [DLLImport(“DLL文件”)]修饰符 extern 返回变量类型 方法名称 （参数列表）其中： DLL文件：包含定义外部方法的库文件。修饰符： 访问修饰符，除了abstract以外在声明方法时可以使用的修饰符。返回变量类型：在DLL文件中你需调用方法的返回变量类型。方法名称：在DLL文件中你需调用方法的名称。参数列表：在DLL文件中你需调用方法的列表。 注意：需要在程序声明中使用System.Runtime.InteropServices命名空间。DllImport只能放置在方法声明上。DLL文件必须位于程序当前目录或系统定义的查询路径中（即：系统环境变量中Path所设置的路径）。返回变量类型、方法名称、参数列表一定要与DLL文件中的定义相一致。若要使用其它函数名，可以使用EntryPoint属性设置，如： 12345[DllImport("user32.dll", EntryPoint="MessageBoxA")]static extern int MsgBox(int hWnd, string msg, string caption, int type);[DllImportAttribute("CN210S_CSM_LV1.dll", EntryPoint = "uds_calc_key", CharSet = CharSet.Ansi)]private static extern void uds_calc_key_ldw(string seed, StringBuilder key); 其它可选的 DllImportAttribute 属性： CharSet： 指示用在入口点中的字符集，如：CharSet=CharSet.Ansi；SetLastError： 指示方法是否保留 Win32”上一错误”，如：SetLastError=true；ExactSpelling： 指示 EntryPoint 是否必须与指示的入口点的拼写完全匹配，如：ExactSpelling=false；PreserveSig： 指示方法的签名应当被保留还是被转换， 如：PreserveSig=true；CallingConvention： 指示入口点的调用约定， 如：CallingConvention=CallingConvention.Winapi；]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>托管DLL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[委托-匿名-Lambda表达式]]></title>
    <url>%2F%E5%A7%94%E6%89%98-%E5%8C%BF%E5%90%8D-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content type="text"><![CDATA[委托123456789101112131415161718192021222324252627282930313233delegate int calculator(int x, int y); //委托类型static void Main()&#123; calculator add = new calculator(Addition); int AddResult = add(1, 1); Console.Write(AddResult); calculator dec = new calculator(Subtraction); int SubResult = dec(2,1); Console.write(SubResult);&#125;/// &lt;summary&gt;/// 加法/// &lt;/summary&gt;/// &lt;param name="x"&gt;&lt;/param&gt;/// &lt;param name="y"&gt;&lt;/param&gt;/// &lt;returns&gt;x+y&lt;/returns&gt;public static int Addition(int x, int y)&#123; return x + y;&#125;/// &lt;summary&gt;/// 减法/// &lt;/summary&gt;/// &lt;param name="x"&gt;&lt;/param&gt;/// &lt;param name="y"&gt;&lt;/param&gt;/// &lt;returns&gt;x-y&lt;/returns&gt;public static int Subtraction(int x, int y)&#123; return x - y;&#125; 匿名方法12345678910111213141516delegate int calculator(int x, int y); //委托static void Main()&#123; calculator add = delegate(int num1,int num2) &#123; return num1 + num2; &#125;; calculator dec = delegate(int num1,int num2) &#123; return num1 - num2; &#125;; int AddResult = dec(1, 1); int SubResult = dec(2, 1); Console.Write(AddResult); Console.Write(SubResult);&#125; Lambda表达式1234567891011121314151617181920212223242526272829303132333435363738delegate bool MyBol(int x, int y);delegate bool MyBol_2(int x, string y);delegate int calculator(int x, int y); //委托类型delegate void VS();static void Main()&#123; MyBol Bol = (x, y) =&gt; x == y; MyBol_2 Bol_2 = (x, s) =&gt; s.Length &gt; x; calculator C = (X, Y) =&gt; X * Y; VS S = () =&gt; Console.Write("我是无参数Labada表达式"); int[] numbers = &#123; 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 &#125;; int oddNumbers = numbers.Count(n =&gt; n % 2 == 1); List&lt;People&gt; people = LoadData();//初始化 IEnumerable&lt;People&gt; results = people.Where(delegate(People p) &#123; return p.age &gt; 20; &#125;);&#125;private static List&lt;People&gt; LoadData()&#123; List&lt;People&gt; people = new List&lt;People&gt;(); //创建泛型对象 People p1 = new People(21, "guojing"); //创建一个对象 People p2 = new People(21, "wujunmin"); //创建一个对象 People p3 = new People(20, "muqing"); //创建一个对象 People p4 = new People(23, "lupan"); //创建一个对象 people.Add(p1); //添加一个对象 people.Add(p2); //添加一个对象 people.Add(p3); //添加一个对象 people.Add(p4); return people;&#125;public class People&#123; public int age &#123; get; set; &#125; //设置属性 public string name &#123; get; set; &#125; //设置属性 public People(int age, string name) //设置属性(构造函数构造) &#123; this.age = age; //初始化属性值age this.name = name; //初始化属性值name &#125;&#125; Func委托1234567891011121314//最后一个参数为返回值类型static void Main(string[] args)&#123; Func&lt;int, int, bool&gt; gwl = (p, j) =&gt; &#123; if (p + j == 10) &#123; return true; &#125; return false; &#125;; Console.WriteLine(gwl(5,5) + ""); //打印‘True’ Console.ReadKey();&#125;]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>委托</tag>
        <tag>匿名方法</tag>
        <tag>Lambda</tag>
        <tag>Func&lt;T&gt;委托</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Markdown]]></title>
    <url>%2FHexo%20Markdown.html</url>
    <content type="text"><![CDATA[Hexo指令新建文章12345678$ hexo new 布局 &quot;文章名&quot;$ hexo clean //清除静态页面缓存（清除 public 文件夹) $ hexo g //在本地生成静态页面（生成 public 文件夹） $ hexo s //启动本地服务 http://localhost:4000，进行预览调试 $ hexo d //远程部署，同步到 GitHub $ npm install hexo-deployer-git --save //自动部署$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d //发布 Markdown格式首行缩进&amp;ensp; //相当于1个空格 &amp;emsp; //相当于2个空格，1个汉字 分段: 两个回车换行: 两个空格 + 回车标题: # ~ ######，#号的个数表示几级标题，即表示一级标题到六级标题 强调123*斜体* | **加粗** | ***斜体加粗*** _斜体_ | __加粗__ | ___斜体加粗___ ~~删除线~~ 引用: &gt; 注意后面紧跟个空格 123&gt; 以下为引用效果继续引用&gt; &gt;二级引用 以下为引用效果继续引用 二级引用 表格: - 和 | 分割行和列 ， : 控制对齐方式 12345| 0 | 1 | 2|| :- | -: | :-: || 0 | 1 | 2 || 0 | 1 | 2 || 0 | 1 | 2 | 0 1 2 0 1 2 0 1 2 0 1 2 代码块: 四个空格开头或三个链接:文字邮件链接：xxx` 图片: ![图片说明](图片地址)，地址可以是本地路径，也可以是网络地址列表: * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格 设置字体段落格式1234&lt;center&gt;居中&lt;/center&gt;&lt;font color=&quot;#FF0000&quot;&gt; 设置颜色 &lt;/font&gt; &lt;font size=6&gt; 设置大小 &lt;/font&gt;&lt;font size=5 color=&quot;#FF0000&quot;&gt; 设置颜色和大小&lt;/font&gt; 居中 设置颜色 设置大小 设置颜色和大小 引用站内文章在写文章的过程中，有时候需要引用站内的其他文章。可以通过内置的标签插件的语法post_link来实现引用。 Hexo主题设计头像头像配置文件位于：主题配置文件中的 avatar下 版权信息版权信息的配置文件位于：next\layout\_macro\my-copyright中 添加文章密码方法一(测试可用)安装hexo-blog-encrypt根目录的package.json文件夹中添加： 1&quot;hexo-blog-encrypt&quot;: &quot;2.0.*&quot; 然后在命令行输入： 1npm install 根目录下的_config.yml文件中添加： 123# Securityencrypt: enable: true 使用在需要加密的文章头部写入password： 123password: abc123abstract: Welcome to my blog, enter password to read.message: Welcome to my blog, enter password to read. 方法二在 themes-&gt;next-&gt;layout-&gt;\_partials-&gt;head.swig 中添加下面内容 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误,交钱还是跑路？'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 然后在文章头部加入password。 添加边栏背景图在 themes\next\source\css\_custom\custom.styl文件中添加 12345678.sidebar &#123; background: url([https://ws2.sinaimg.cn/large/006tKfTcly1fq2wrm6g3cj309i0hq749.jpg](https://ws2.sinaimg.cn/large/006tKfTcly1fq2wrm6g3cj309i0hq749.jpg "https://ws2.sinaimg.cn/large/006tKfTcly1fq2wrm6g3cj309i0hq749.jpg")) no-repeat !important; background-size: cover !important; position: fixed !important; right: 0 !important; top: 0 !important; bottom: 0 !important;&#125; 网易云音乐插件主题文件夹layout\\\_custom\\sidebar.swig Warning: LF will be replaced by CRLFgit config --global core.autocrlf false //禁用自动转换 更改文章全局属性(标题)D:\GitProject\FirstHexo\themes\next\source\css\_common\components\post\post.styl 文章模板在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：hexo new photo “My Gallery”，在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md模板，并根据其内容建立文章，默认使用_config.yml 中的 default_layout 参数post代替 网页折叠更改post-details.js文件目录：themes/next/source/js/src/post-details.js 12345678$(document).ready(function()&#123; $(document).on('click', '.fold_hider', function()&#123; $('&gt;.fold', this.parentNode).slideToggle(); $('&gt;:first', this).toggleClass('open'); &#125;); //默认情况下折叠 $("div.fold").css("display","none");&#125;); 更改tags.js文件目录：themes/next/scripts/tags.js 123456789101112131415161718192021222324/* @haohuawu 修复 Nunjucks 的 tag 里写 ```代码块```，最终都会渲染成 undefined 的问题 https://github.com/hexojs/hexo/issues/2400*/const rEscapeContent = /&lt;escape(?:[^&gt;]*)&gt;([\s\S]*?)&lt;\/escape&gt;/g;const placeholder = '\uFFFD';const rPlaceholder = /(?:&lt;|&amp;lt;)\!--\uFFFD(\d+)--(?:&gt;|&amp;gt;)/g;const cache = [];function escapeContent(str) &#123; return '&lt;!--' + placeholder + (cache.push(str) - 1) + '--&gt;';&#125;hexo.extend.filter.register('before_post_render', function(data) &#123; data.content = data.content.replace(rEscapeContent, function(match, content) &#123; return escapeContent(content); &#125;); return data;&#125;);hexo.extend.filter.register('after_post_render', function(data) &#123; data.content = data.content.replace(rPlaceholder, function() &#123; return cache[arguments[1]]; &#125;); return data;&#125;); scripts中增加fold.js12345678/* global hexo */// Usage: &#123;% fold ???? %&#125; Something &#123;% endfold %&#125;function fold (args, content) &#123; var text = args[0]; if(!text) text = "点击显/隐"; return '&lt;div&gt;&lt;div class="fold_hider"&gt;&lt;div class="close hider_title"&gt;' + text + '&lt;/div&gt;&lt;/div&gt;&lt;div class="fold"&gt;\n' + hexo.render.renderSync(&#123;text: content, engine: 'markdown'&#125;) + '\n&lt;/div&gt;&lt;/div&gt;';&#125;hexo.extend.tag.register('fold', fold, &#123;ends: true&#125;); 添加样式custom.styl12345678910.hider_title&#123; font-family: "Microsoft Yahei"; cursor: pointer;&#125;.close:after&#123; content: "▼";&#125;.open:after&#123; content: "▲";&#125; 测试123&#123;% fold 折叠提示 %&#125;something you want to fold, include code block.&#123;% endfold %&#125;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
        <tag>文章密码</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[碎碎念]]></title>
    <url>%2F%E7%A2%8E%E7%A2%8E%E5%BF%B5.html</url>
    <content type="text"><![CDATA[Enter password to read！ Incorrect Password! No content to display! U2FsdGVkX18uRM4aykoDXvRN1KuaddXsRFcO/MAbEetx5UzEwKt550O5M8fcngJINPUgdBAWfRelCemo7+qrhgYo1PF5QQJnhIgL7vnMwjhv9EdSsmTtUmzzf/7LKhYA+zNRLQbK9m0ITmNWZ6Eo0MrU888PQLTeZsLvIFWiez4Q0AO+yd5Q1ftDBggxyA2uh1yLEe8TBiLilgFL7CttMWVC8A73hq6ryJ6Dvnz11lzSHKhGcXI2tN4ZApH3ssvlssu7Pl1KK13U1Yjr1mW7pMus409rW85jMLmvC9s499ZResbAFXopotWdYhrdbIwPETaNOuTIpSs+0DVRT5ejqwi5p/DMyCJTQWspLIppEdSkat7bQEZFDmRwuFr19ZzSmo31NIhDuwJJFlm9S2qM+tGf4tnsL1NULxBBfOgEtH3Moq4d+yqCFEWMIbpCy15QO8usLRCzYT+rJ+TOiGYoF95WQLs78JMUQF2F2HdyC0NuAaQqWvooKzP1gRXSH49QmG+5HPWF320duss8rjGyrCM76HFHrTL4EiPRdkOZo7b0CnUk7uejaFmvDo09fymLGMa1qwZ9PfOp7Nz4xyBvmeEMsrlkwpj2p6XxqtISpaTqd0x6j56/AYVtKfwMSCndyTe1k1vQkOUdJKfRsMWDyXdUTHvLtm4gIvz2/FrO8j25DVz7ExyWZ/9pZTlerFGp]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test Project]]></title>
    <url>%2FTest%20Project.html</url>
    <content type="text"><![CDATA[Test Filethis is my first Hexo text file]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
