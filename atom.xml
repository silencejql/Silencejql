<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silencejql</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://silencejql.github.io/"/>
  <updated>2020-06-23T10:25:27.064Z</updated>
  <id>https://silencejql.github.io/</id>
  
  <author>
    <name>Justin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>刷题记</title>
    <link href="https://silencejql.github.io/%E5%88%B7%E9%A2%98%E8%AE%B0.html"/>
    <id>https://silencejql.github.io/刷题记.html</id>
    <published>2020-06-21T08:37:21.000Z</published>
    <updated>2020-06-23T10:25:27.064Z</updated>
    
    <content type="html"><![CDATA[<center>简介</center>记录刷题过程中遇到问题及新知识<a id="more"></a><h2 id="System-Collections"><a href="#System-Collections" class="headerlink" title="System.Collections"></a>System.Collections</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>在C#中，数组由于是固定长度的，由于这种限制不方便，所以出现了ArrayList<br>ArrayList是可变长数组，可以将任意多的数据Add到ArrayList里面。其内部维护的数组，当长度不足时，会自动扩容为原来的两倍。<br>但是ArrayList也有一个缺点，就是存入ArrayList里面的数据都是Object类型的，所以如果将值类型存入和取出的时候会发生装箱、拆箱操作(就是值类型与引用类型之间的转换)，这个会影响程序性能。在.Net 2.0泛型出现以后，就提供了List<t>。</t></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List<t></t></h3><p>List<t>是ArrayList的泛型版本，它不再需要装箱拆箱，直接取，直接用，它基本与ArrayList一致，不过在使用的时候要先设置好它的类型，而设置好类型之后，不是这种类型的数据，是不允许Add进去的<br>就性能来说，如果要存进数组的只有一种数据，那么无疑List<t>是最优选择<br><strong>List存储的数据是有序并且可以重复的。 采用链表存储数据</strong></t></t></p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; ListInt = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add(T)</span><br><span class="line">AddRange(IEnumerable&lt;T&gt;)</span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">IndexOf(T)<span class="comment">//搜索指定的对象，并返回整个 List&lt;T&gt; 中第一个匹配项的从零开始的索引</span></span><br><span class="line">LastIndexOf(T)<span class="comment">//搜索指定对象并返回整个 List&lt;T&gt; 中最后一个匹配项的从零开始索引</span></span><br><span class="line">IndexOf(T, Int32)<span class="comment">//搜索指定对象并返回 List&lt;T&gt; 中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引</span></span><br><span class="line">IndexOf(T, Int32, Int32)<span class="comment">//搜索指定对象并返回 List&lt;T&gt; 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引</span></span><br><span class="line">Insert(Int32, T)<span class="comment">//将元素插入到 List&lt;T&gt; 中的指定索引处</span></span><br><span class="line">Remove(T) <span class="comment">//从 List&lt;T&gt; 中删除特定对象的第一个匹配项</span></span><br><span class="line">Reverse()<span class="comment">//将整个 List&lt;T&gt; 中元素的顺序反转</span></span><br><span class="line">Reverse(Int32, Int32)<span class="comment">//将指定范围中元素的顺序反转</span></span><br><span class="line">Sort()<span class="comment">//使用默认比较器对整个 List&lt;T&gt; 中的元素进行排序</span></span><br><span class="line">ToArray()<span class="comment">//将 List&lt;T&gt; 的元素复制到新数组中</span></span><br></pre></td></tr></table></figure></div></div><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>HashTable是一种根据key查找非常快的键值数据结构，不能有重复key，而且由于其特点，其长度总是一个素数，所以扩容后容量会比2倍大一点点，加载因子为0.72f。<br>当要大量使用key来查找value的时候，HashTable无疑是最有选择，HashTable与ArrayList一样，是非泛型的，value存进去是object,存取会发生装箱、拆箱，所以出现了Dictionary&lt;T,T&gt;</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count <span class="comment">//获取包含在 Hashtable 中的键/值对的数目</span></span><br><span class="line">Keys</span><br><span class="line">Values</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add(Object, Object)</span><br><span class="line">Clear()</span><br><span class="line">Clone()</span><br><span class="line">Contains(Object)</span><br><span class="line">ContainsKey(Object)</span><br><span class="line">ContainsValue(Object)</span><br><span class="line">GetHash(Object)<span class="comment">//返回指定键的哈希代码</span></span><br><span class="line">Remove(Object)</span><br></pre></td></tr></table></figure></div></div><h3 id="Dictionary-lt-T-T-gt"><a href="#Dictionary-lt-T-T-gt" class="headerlink" title="Dictionary&lt;T,T&gt;"></a>Dictionary&lt;T,T&gt;</h3><p>Dictionary&lt;T,T&gt;是HashTable的泛型版本，存取同样快，但是不需要装箱和拆箱了。而且，其优化了算法，Hashtable是0.72，它的浪费容量少了很多</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="keyword">string</span>,Person&gt; Dic = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>,Person&gt;();</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet<t></t></h3><p>HashSet<t>类，算法，存储结构都与哈希表相同，主要是设计用来做高性能集运算的，例如对两个集合求交集、并集、差集等。集合中包含一组不重复出现且无特定顺序的元素<br><strong>HashSet存储的数据是无序并且唯一的，底层使用HashMap存储数据</strong></t></p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;<span class="keyword">int</span>&gt; numbers1;</span><br><span class="line">HashSet&lt;<span class="keyword">int</span>&gt; numbers2;</span><br><span class="line"><span class="comment">//分别进行numbers1和numbers2的值初始化或赋值</span></span><br><span class="line">numbers1.UnionWith(numbers2);<span class="comment">//求两个集合的并集。</span></span><br><span class="line">numbers1.IntersectWith(numbers2);<span class="comment">//求两个集合的交集。</span></span><br><span class="line">numbers1.ExceptWith(numbers2);<span class="comment">//求两个集合的差集。</span></span><br><span class="line">numbers1.SymmetricExceptWith(numbers2);<span class="comment">//求两个集合的对称差集。</span></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count <span class="comment">//获取集中包含的元素数</span></span><br><span class="line">Comparer <span class="comment">//获取用于确定集中的值是否相等的 IEqualityComparer&lt;T&gt; 对象</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add() <span class="comment">//将项目添加到HashSet之中</span></span><br><span class="line">Clear() <span class="comment">//清空HashSet里面的值</span></span><br><span class="line">Remove() <span class="comment">//从HashSet中移除值</span></span><br><span class="line">Contains() <span class="comment">//判断HashSet是否包含指定项目</span></span><br><span class="line">Equals(Object) <span class="comment">//判断是否相等</span></span><br></pre></td></tr></table></figure></div></div><h3 id="Queue、Queue"><a href="#Queue、Queue" class="headerlink" title="Queue、Queue"></a>Queue、Queue<t></t></h3><p>Queue队列，Queue<t>泛型队列，队列，先进先出</t></p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Dequeue()<span class="comment">//移除并返回位于 Queue&lt;T&gt; 开始处的对象</span></span><br><span class="line">Enqueue(T)<span class="comment">//将一个对象添加到 Queue&lt;T&gt; 的末尾</span></span><br><span class="line">Peek()<span class="comment">//返回位于 Queue&lt;T&gt; 开始处的对象但不将其移除</span></span><br></pre></td></tr></table></figure></div></div><h3 id="Stack、Stack"><a href="#Stack、Stack" class="headerlink" title="Stack、Stack"></a>Stack、Stack<t></t></h3><p>Stack堆栈，先进后出</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Pop()<span class="comment">//删除并返回 Stack&lt;T&gt; 顶部的对象</span></span><br><span class="line">Push(T)<span class="comment">//在 Stack&lt;T&gt; 的顶部插入一个对象</span></span><br><span class="line">Peek()<span class="comment">//返回位于 Stack&lt;T&gt; 顶部的对象但不将其移除</span></span><br><span class="line">TryPop(T)<span class="comment">//返回一个值，该值指示 Stack&lt;T&gt; 的顶部是否有对象；如果有，则将其复制到 result 参数，并从 Stack&lt;T&gt; 中删除它</span></span><br></pre></td></tr></table></figure></div></div><h3 id="SortedList、SortedList-lt-TKey-TValue-gt"><a href="#SortedList、SortedList-lt-TKey-TValue-gt" class="headerlink" title="SortedList、SortedList&lt;TKey,TValue&gt;"></a>SortedList、SortedList&lt;TKey,TValue&gt;</h3><p>SortedList集合中的数据是有序的。可以通过key来匹配数据，也可以通过int下标来获取数据<br>添加操作比ArrayList，Hashtable略慢；查找、删除操作比ArrayList快，比Hashtable慢</p><h3 id="SortedDictionary-lt-TKey-TValue-gt"><a href="#SortedDictionary-lt-TKey-TValue-gt" class="headerlink" title="SortedDictionary&lt;TKey,TValue&gt;"></a>SortedDictionary&lt;TKey,TValue&gt;</h3><p>SortedDictionary&lt;TKey,TValue&gt;相比于SortedList&lt;TKey,TValue&gt;其性能优化了，SortedList&lt;TKey,TValue&gt;其内部维护的是数组而SortedDictionary&lt;TKey,TValue&gt;内部维护的是红黑树(平衡二叉树)的一种，因此其占用的内存，性能都好于SortedDictionary&lt;TKey,TValue&gt;。唯一差在不能用下标取值</p><h3 id="ListDictionary-单向链表-LinkedList-双向链表"><a href="#ListDictionary-单向链表-LinkedList-双向链表" class="headerlink" title="ListDictionary(单向链表),LinkedList(双向链表)"></a>ListDictionary(单向链表),LinkedList<t>(双向链表)</t></h3><p>List<t>,ArrayList,Hashtable等容器类，其内部维护的是数组Array来，ListDictionary和LinkedList<t>不用Array，而是用链表的形式来保存。链表最大的好处就是节约内存空间<br>ListDictionary是单向链表<br>LinkedList<t>双向链表。双向链表的优势，可以插入到任意位置</t></t></t></p><h3 id="HybridDictionary"><a href="#HybridDictionary" class="headerlink" title="HybridDictionary"></a>HybridDictionary</h3><p>HybridDictionary的类，充分利用了Hashtable查询效率高和ListDictionary占用内存空间少的优点，内置了Hashtable和ListDictionary两个容器，添加数据时内部逻辑如下:<br>当数据量小于8时，Hashtable为null，用ListDictionary保存数据<br>当数据量大于8时，实例化Hashtable，数据转移到Hashtable中，然后将ListDictionary置为null</p><h3 id="BitArray"><a href="#BitArray" class="headerlink" title="BitArray"></a>BitArray</h3><p>BitArray用于二进制运算，”或”、”非”、”与”、”异或非”等这种操作，只能存true或false</p><p>###</p><h2 id="字符串动态匹配算法"><a href="#字符串动态匹配算法" class="headerlink" title="字符串动态匹配算法"></a>字符串动态匹配算法</h2><p>BF算法<br>RK算法<br>BM算法<br>KPM算法<br>Sunday算法</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>可理解为数列求通项过程<br>f(n) = f(n - 1) + f(n - 2)</p><h2 id="逻辑运算符短路效应"><a href="#逻辑运算符短路效应" class="headerlink" title="逻辑运算符短路效应"></a>逻辑运算符短路效应</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(A &amp;&amp; B)  <span class="comment">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A || B) <span class="comment">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;简介&lt;/center&gt;
记录刷题过程中遇到问题及新知识
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字符串匹配算法</title>
    <link href="https://silencejql.github.io/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.html"/>
    <id>https://silencejql.github.io/字符串匹配算法.html</id>
    <published>2020-06-19T10:28:52.000Z</published>
    <updated>2020-06-19T10:28:52.945Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><p>##</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>栈与队列Stack&amp;Queue</title>
    <link href="https://silencejql.github.io/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97Stack&amp;Queue.html"/>
    <id>https://silencejql.github.io/栈与队列Stack&amp;Queue.html</id>
    <published>2020-06-19T03:33:44.000Z</published>
    <updated>2020-06-19T04:03:45.472Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>线性表插入和删除操作不受限制 在任意位置进行<br>栈和队列是两种特殊的线性表。他们的数据元素之间具有顺序的逻辑关系，都采用顺序结构和链式结构存储</p><blockquote><p>栈的插入和删除操作只允许在线性表的尾端(栈顶Top)进行<br>队列插入操作限定在线性表的尾部而其它操作限定在表的头部进行</p></blockquote><p>栈的特点为后进先出，队列先进先出</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>表尾称为栈顶（Top）,另一端称为栈底（Bottom），当栈中没有数据元素时叫空栈（Empty Stack）<br>方法：</p><blockquote><p>Push（）入栈 //添加数据<br>Pop（）出栈 //删除数据，返回被删除的数据<br>Peek（）//取得栈顶的元素，不删除<br>ToArray() //方法创建数组并将堆栈元素复制到其中<br>Contains() //方法判断一个元素是否在栈中<br>Clear（）//清空所有数据<br>Count //取得栈中元素的个数</p></blockquote><p>接口定义：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStack</span>&#123;</span><br><span class="line"><span class="keyword">int</span> Count&#123;<span class="keyword">get</span>;&#125;<span class="comment">//求栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span>(<span class="params"></span>)</span>;<span class="comment">//求栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span>(<span class="params"></span>)</span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span>;<span class="comment">//清空操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span>(<span class="params">T item</span>)</span>;<span class="comment">//入栈操作</span></span><br><span class="line"><span class="function">T <span class="title">Pop</span>(<span class="params"></span>)</span>;<span class="comment">//出栈操作</span></span><br><span class="line"><span class="function">T <span class="title">Peek</span>(<span class="params"></span>)</span>;<span class="comment">//取栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的本质是一个线性表，线性表有两种存储形式，那么栈也有分为栈的顺序存储结构和栈的链式存储结构<br>用连续的存储空间来存储栈中的数据元素(使用数组)，这样的栈称为顺序栈(Sequence Stack)<br>类似于顺序表，用一维数组来存放顺序栈中的数据元素<br>栈顶指示器 top 设在数组下标为 0 的端，top随着插入和删除而变化，当栈为空时，top=-1</p><p>栈的另外一种存储方式是链式存储，这样的栈称为链栈(Linked Stack)<br>由于链栈的操作只是在一端进行，为了操作方便，把栈顶设在链表的头部，并且不需要头结点</p><p>示例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stack&lt;T&gt; staA = new Stack&lt;T&gt;();</span></span><br><span class="line">Stack&lt;<span class="keyword">string</span>&gt; staA = <span class="keyword">new</span> Stack&lt;<span class="keyword">string</span>&gt;();            </span><br><span class="line">staA.Push(<span class="string">"one"</span>);            </span><br><span class="line">staA.Push(<span class="string">"two"</span>);            </span><br><span class="line">staA.Push(<span class="string">"three"</span>);            </span><br><span class="line">staA.Push(<span class="string">"four"</span>);            </span><br><span class="line">staA.Push(<span class="string">"five"</span>);            </span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> a <span class="keyword">in</span> staA)<span class="comment">//遍历元素，将之变成string类型            </span></span><br><span class="line">&#123;                </span><br><span class="line">  Console.WriteLine(a);            </span><br><span class="line">&#125;             </span><br><span class="line"><span class="comment">//peek是把栈顶元素弹出（取出），但不删除            </span></span><br><span class="line">Console.WriteLine(<span class="string">"取出的元素是：&#123;0&#125;"</span>, staA.Peek());            </span><br><span class="line"><span class="comment">//pop是把栈顶的元素弹出（取出），并将其删除            </span></span><br><span class="line">Console.WriteLine(<span class="string">"删除的栈顶元素是：&#123;0&#125;"</span>,staA .Pop ());             </span><br><span class="line"><span class="comment">//此时再输出一次栈的元素，会发现five被删除了            </span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> b <span class="keyword">in</span> staA)            </span><br><span class="line">&#123;                </span><br><span class="line">  Console.ForegroundColor = ConsoleColor.Blue;                </span><br><span class="line">  Console.WriteLine(b);            </span><br><span class="line">&#125;             </span><br><span class="line"><span class="comment">//ToArray从栈底到栈顶将一个栈复制到另一个栈中            </span></span><br><span class="line">Stack&lt;<span class="keyword">string</span>&gt; staB = <span class="keyword">new</span> Stack&lt;<span class="keyword">string</span>&gt;(staA.ToArray());            </span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> c <span class="keyword">in</span> staB)            </span><br><span class="line">&#123;                </span><br><span class="line">  Console.ForegroundColor = ConsoleColor.Cyan;                </span><br><span class="line">  Console.WriteLine(c);            </span><br><span class="line">&#125;             </span><br><span class="line">Console.WriteLine(<span class="string">" "</span>);            </span><br><span class="line">Console.ForegroundColor = ConsoleColor.DarkRed;            </span><br><span class="line"><span class="comment">//contains方法，判断一个元素是否在栈中            </span></span><br><span class="line">Console.WriteLine(<span class="string">"six是否在栈中？"</span>);            </span><br><span class="line">Console.WriteLine(staA .Contains (<span class="string">"six"</span>));</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>插入操作的表尾称为队尾(Rear)，把进行其它操作的头部称为队头(Front)。当队列中没有数据元素时称为空队列(EmptyQueue)<br>方法：</p><blockquote><p>Enqueue() 入队（放在队尾）<br>Dequeue() 出队（移除队首元素，并返回被移除的元素）<br>Peek() 取得队首的元素，不移除<br>Clear() 清空元素</p></blockquote><p>接口定义：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface IQueue&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">int</span> Count&#123;<span class="keyword">get</span>;&#125;<span class="comment">//取得队列长度的属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span>(<span class="params"></span>)</span>;<span class="comment">//求队列的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span>(<span class="params"></span>)</span>;<span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span>;<span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span>(<span class="params">T item</span>)</span>;<span class="comment">//入队</span></span><br><span class="line"><span class="function">T <span class="title">Dequque</span>(<span class="params"></span>)</span>;<span class="comment">//出队</span></span><br><span class="line"><span class="function">T <span class="title">Peek</span>(<span class="params"></span>)</span>;<span class="comment">//取队头元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用连续的存储空间来存储队列中的数据元素，这样的队列称为顺序队列(SequenceQueue)<br>类似于顺序栈，用一维数组来存放顺序队列中的数据元素。队头位置设在数组下标为 0 的端，用 front 表示；队尾位置设在数组的另一端，用rear 表示<br>front 和 rear 随着插入和删除而变化。当队列为空时， front=rear=-1</p><p>队列的另外一种存储方式是链式存储，这样的队列称为链队列(LinkedQueue)<br>由于链队列的操作只是在一端进行，为了操作方便，把队头设在链表的头部，并且不需要头结点</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hashmap、Hashtabel、Dictionary</title>
    <link href="https://silencejql.github.io/Hashmap%E3%80%81Hashtabel%E3%80%81Dictionary.html"/>
    <id>https://silencejql.github.io/Hashmap、Hashtabel、Dictionary.html</id>
    <published>2020-06-18T01:58:07.000Z</published>
    <updated>2020-06-19T04:10:51.980Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>参考：https://blog.csdn.net/woshimaxiao1/article/details/83661464<a id="more"></a><h2 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a>Hashmap</h2><p>HashMap是Java 1.2引进的Map接口的一个实现，c#中无HashMap</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>  采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(logn)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</p><h3 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h3><p>  对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>  对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(logn)。</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>  相比上述几种数据结构，在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)。<br>  当要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作。<br>  <strong>存储位置 = 哈希函数f(关键字)</strong></p><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><p>两个不同的元素，通过哈希函数得出的实际存储地址相同<br>HashMap采用了链地址法，也就是数组+链表的方式解决哈希冲突<br>HashMap数组的每一个元素不止是一个Entry对象，也是一个链表的头节点。每一个Entry对象通过Next指针指向它的下一个Entry节点。当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可<br>HashMap可以简单理解为由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的</p><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p>哈希表（HashTable）又叫做散列表，是根据关键码值（即键值对）而直接访问的数据结构。也就是说，它通过把关键码映射到表中一个位置来访问记录，以加快查找速度，Hashtable是基于Dictionary类的</p><h2 id="Hashtable-与-Hashmap区别"><a href="#Hashtable-与-Hashmap区别" class="headerlink" title="Hashtable 与 Hashmap区别"></a>Hashtable 与 Hashmap区别</h2><h3 id="Hashtable-1"><a href="#Hashtable-1" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化<br>初始size为11，扩容：newsize = olesize*2+1<br>计算index的方法：index = (hash &amp; 0x7FFFFFFF) % tab.length</p><h3 id="Hashmap-1"><a href="#Hashmap-1" class="headerlink" title="Hashmap"></a>Hashmap</h3><p>底层数组+链表实现，可以存储null键和null值，线程不安全<br>初始size为16，扩容：newsize = oldsize*2，size一定为2的n次幂<br>扩容针对整个Map，每次扩容时，原来数组中的元素依次重新计算存放位置，并重新插入<br>插入元素后才判断该不该扩容，有可能无效扩容（插入后如果扩容，如果没有再次插入，就会产生无效扩容）<br>当Map中元素总数超过Entry数组的75%，触发扩容操作，为了减少链表长度，元素分配更均匀<br>计算index方法：index = hash &amp; (tab.length – 1)</p><h2 id="HashTable和Dictionary区别"><a href="#HashTable和Dictionary区别" class="headerlink" title="HashTable和Dictionary区别"></a>HashTable和Dictionary区别</h2><p>  HashTable不支持泛型，而Dictionary支持泛型。<br>  Hashtable 的元素属于 Object 类型，所以在存储或检索值类型时通常发生装箱和拆箱的操作，所以你可能需要进行一些类型转换的操作，而且对于int,float这些值类型还需要进行装箱等操作，非常耗时。<br>  单线程程序中推荐使用 Dictionary, 有泛型优势, 且读取速度较快, 容量利用更充分。多线程程序中推荐使用 Hashtable, 默认的 Hashtable 允许单线程写入, 多线程读取, 对 Hashtable 进一步调用 Synchronized() 方法可以获得完全线程安全的类型. 而 Dictionary 非线程安全, 必须人为使用 lock 语句进行保护, 效率大减。<br>  在通过代码测试的时候发现key是整数型Dictionary的效率比Hashtable快，如果key是字符串型，Dictionary的效率没有Hashtable快。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
参考：https://blog.csdn.net/woshimaxiao1/article/details/83661464
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动态EV(ETP)测试</title>
    <link href="https://silencejql.github.io/%E5%8A%A8%E6%80%81EV(ETP)%E6%B5%8B%E8%AF%95.html"/>
    <id>https://silencejql.github.io/动态EV(ETP)测试.html</id>
    <published>2020-06-05T07:31:43.000Z</published>
    <updated>2020-06-07T05:13:33.572Z</updated>
    
    <content type="html"><![CDATA[<center>说明</center>动态EV或ETP工位简单说明<a id="more"></a><p>新版本ETP测试工况分四部分：加速、匀速、滑行、制动<br>测试内容除了基本电流电压等BMS数据读取还包括各阶段的效率及能量消耗率的计算等</p><h2 id="程序配置"><a href="#程序配置" class="headerlink" title="程序配置"></a>程序配置</h2><p>最新程序增加是否为同轴滚筒的配置：在EvDynamicTestCurve.xml中isCoaxial配置为true表示为同轴滚筒<br>非同轴滚筒计算时F为左右滚筒的合力</p><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p>加速、匀速过程中电能转化为动能，效率计算公式为 <strong>Fvt/UIt</strong><br>滑行、制动过程中动能转化为电能，效率计算公式为 <strong>UIt/Fvt</strong><br>其中F、v、U、I均为各阶段的平均值</p><h3 id="能量消耗率"><a href="#能量消耗率" class="headerlink" title="能量消耗率"></a>能量消耗率</h3><p>C = E/D 单位为(kW<em>h)/100km<br>程序中的计算公式为：整个过程中的平均100</em>UIt/d</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于I为负数时表示放电加速所以计算时简单处理为<br>I为负：效率 = Fvt/UIt<br>I为正：效率 = UIt/Fvt</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;说明&lt;/center&gt;
动态EV或ETP工位简单说明
    
    </summary>
    
      <category term="工作" scheme="https://silencejql.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>PostgreSQL数据库</title>
    <link href="https://silencejql.github.io/PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
    <id>https://silencejql.github.io/PostgreSQL数据库.html</id>
    <published>2020-05-27T06:53:36.000Z</published>
    <updated>2020-05-31T00:52:50.702Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>BBK设备数据库常用操作说明<a id="more"></a><h2 id="新增数据表"><a href="#新增数据表" class="headerlink" title="新增数据表"></a>新增数据表</h2><p>创建脚本修改字段和表名<br>打开数据表所在路径：<br><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/TablePath.png" alt></p><p>更改图中相应字段表名后点击黑色方框中的执行按钮并确认输出窗口为成功即可<br><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/CreatTableScript.png" alt></p><p><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/TableScript.png" alt></p><h2 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h2><p>当保存数据时Systemerror.log中存在警告缺少字段是可在数据库中新增缺少的字段<br><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/MissField.png" alt></p><p>图中Miss Field List:后面就是数据库中缺少的字段名</p><h3 id="创建脚本新增字段"><a href="#创建脚本新增字段" class="headerlink" title="创建脚本新增字段"></a>创建脚本新增字段</h3><p><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/CreatFieldScript.png" alt></p><p>如下所示，新增字段并根据需要更改字段长度即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Column: "前轮侧滑"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE public."侧滑表" DROP COLUMN "前轮侧滑";</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> public.<span class="string">"侧滑表"</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">"新增字段1"</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> public.<span class="string">"侧滑表"</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">"新增字段2"</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> public.<span class="string">"侧滑表"</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">"新增字段3"</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
BBK设备数据库常用操作说明
    
    </summary>
    
      <category term="PostgreSQL" scheme="https://silencejql.github.io/categories/PostgreSQL/"/>
    
    
  </entry>
  
  <entry>
    <title>BBK检测线联网</title>
    <link href="https://silencejql.github.io/BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91.html"/>
    <id>https://silencejql.github.io/BBK检测线联网.html</id>
    <published>2020-05-24T01:50:22.000Z</published>
    <updated>2020-05-24T02:58:59.424Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>检测线联网相关的基本配置说明<a id="more"></a><h2 id="设备设置"><a href="#设备设置" class="headerlink" title="设备设置"></a>设备设置</h2><p>1、设备及服务器安装好运行环境<br>2、关闭防火墙<br>3、分配IP<br>4、保证工位与服务器相互可以Ping通</p><h2 id="工位配置"><a href="#工位配置" class="headerlink" title="工位配置"></a>工位配置</h2><h3 id="PostgreSQL配置"><a href="#PostgreSQL配置" class="headerlink" title="PostgreSQL配置"></a>PostgreSQL配置</h3><p>打开PostgreSQL菜单：工具-服务器配置-pg_hba.conf<br>新增如图配置后保存<br><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/Postgreconfi.png" alt></p><h3 id="BBK软件配置"><a href="#BBK软件配置" class="headerlink" title="BBK软件配置"></a>BBK软件配置</h3><p>1、确认流程中有初始化联网步骤，一般在Init_InitConst中一般命名为InitNet<br><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/InitNet.png" alt></p><p>2、确认流程中有上图中的红框中的设备号、线号的步骤<br>若没有可参考带有初始化联网的程序进行添加<br>3、打开BBK软件在菜单中配置<em>线号、设备号、服务器IP</em><br><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/BBKConfig.png" alt></p><h2 id="服务器软件配置"><a href="#服务器软件配置" class="headerlink" title="服务器软件配置"></a>服务器软件配置</h2><p>打开服务软件所在文件夹中Set.mdb数据库进行服务器联网配置</p><h3 id="StationConfig"><a href="#StationConfig" class="headerlink" title="StationConfig"></a>StationConfig</h3><p><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/StationConfig.png" alt></p><p>该表中每一行代表一个工位<br><strong>字段说明：</strong></p><blockquote><p>DeviceID：对应工位配置的设备号DeviceID<br>Describe：用于服务器显示的设备描述<br>LineID：对应工位配置的线号LineID<br>IPAdsress：工位IP<br>StationNo：用于服务器显示工位顺序<br>StationUpload：设置当前工位需要上传的表名 <strong>逗号为英文字符</strong></p></blockquote><h3 id="车辆查看配置"><a href="#车辆查看配置" class="headerlink" title="车辆查看配置"></a>车辆查看配置</h3><p><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/ViewConfig.png" alt></p><p>改表为显示测试数据页面的相关配置，根据需求进行相应配置即可</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
检测线联网相关的基本配置说明
    
    </summary>
    
      <category term="工作" scheme="https://silencejql.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>BBKTimeLock</title>
    <link href="https://silencejql.github.io/BBKTimeLock.html"/>
    <id>https://silencejql.github.io/BBKTimeLock.html</id>
    <published>2020-05-11T08:04:37.000Z</published>
    <updated>2020-05-14T01:56:15.676Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read！" />    <label for="pass">Enter password to read！</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      交钱！
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BBK软件设置密码方法</title>
    <link href="https://silencejql.github.io/BBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95.html"/>
    <id>https://silencejql.github.io/BBK软件设置密码方法.html</id>
    <published>2020-05-09T02:15:29.000Z</published>
    <updated>2020-05-09T02:36:16.050Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>BBK软件设置密码方法<a id="more"></a><h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><p>在Bin文件夹中找到LoginLock.Lock文件，将其复制到C盘根目录下<br>若无此文件可新建文本文档后另存为此名称，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SuperAccount = &quot;BBKTSTSYS&quot;;</span><br><span class="line">SuperPassword = &quot;ZMY20140527&quot;;</span><br></pre></td></tr></table></figure><p>均为英文字符</p><h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><p>编辑方式打开设备程序使用的always文件(桌面快捷方式对应文件)<br>1、双击打开组合列表中Always下的InitForm组合<br>2、双击打开Menu，点击HELP进入菜单编辑界面<br>3、选择需要设置密码的菜单项及子项后，选择右侧<strong><em>需要权限</em></strong>,权限0为不需要权限，不同应权限可设置相应密码<br>0~9为权限等级，高等级可访问低等级权限，比如权限9可访问所有内容<br>4、更改完成后依次点击保存后退出</p><h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><h3 id="设置权限密码"><a href="#设置权限密码" class="headerlink" title="设置权限密码"></a>设置权限密码</h3><p>双击打开always程序，点击左上角登录弹出如下界面</p><p><img src="BBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95/Login.png" alt></p><p>输入管理员账号后点击<strong><em>设置</em></strong>进行账户管理<br>SuperAccount = “BBKTSTSYS”<br>SuperPassword = “ZMY20140527”</p><p><img src="BBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95/Account.png" alt></p><p>设置完成后便可登录相应等级账户</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
BBK软件设置密码方法
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VCU</title>
    <link href="https://silencejql.github.io/VCU.html"/>
    <id>https://silencejql.github.io/VCU.html</id>
    <published>2020-04-22T04:13:02.000Z</published>
    <updated>2020-04-22T06:44:11.890Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="协议需求"><a href="#协议需求" class="headerlink" title="协议需求"></a>协议需求</h2><p>CANID：</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>预充截止电压PreChargeVoltageGetTest：      (D01E- Battery External Voltage电池包外侧总电压)<br>绝缘电阻InsulationResistanceGetTest：      (D01C- Battery Insulation Resistance电池包的绝缘值)<br>电池静态温度BatteryTemperatureRiseTestT1：  (D02B- Battery Average Temperature电池温升)</p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>MCU转速MCUSpeedGetTest：                   (电机当前转速D034- Motor Actual Speed)<br>MCU温度MCUTempretureGetTest：D061         (MCU温度D02E- Inverter Actual Temperature)<br>电机温度MotorTempretureGetTest：C952        (电机温度D036- Motor Actual Temperature)<br>放电电流BatteryTotalCurrentTest：D030        (充电电流D027- Battery Total Current充电时电流为负值)<br>电池温升BatteryTemperatureRiseTestT2：D047    (D02B- Battery Average Temperature电池温升)<br>车速传感器SpeedSensorGetTest：<br>判断制动踏板ReadBrakeStatus：<br>刹车回馈电流FeedbackCurrentGetTest：D030     (D027- Battery Total Current回馈电流)</p><p>MCU转速与实际车速差值PreChargeVoltageGetTest：</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lambda Expressions</title>
    <link href="https://silencejql.github.io/lambda%20Expressions.html"/>
    <id>https://silencejql.github.io/lambda Expressions.html</id>
    <published>2020-04-10T03:57:41.000Z</published>
    <updated>2020-04-10T04:08:22.731Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="Expression-lambda"><a href="#Expression-lambda" class="headerlink" title="Expression lambda"></a>Expression lambda</h2><p>使用 lambda 声明运算符 =&gt; 从其主体中分离 lambda 参数列表。 若要创建 Lambda 表达式，需要在 Lambda 运算符左侧指定输入参数（如果有），然后在另一侧输入表达式或语句块。</p><p>任何 Lambda 表达式都可以转换为委托类型。 Lambda 表达式可以转换的委托类型由其参数和返回值的类型定义。如果 lambda 表达式不返回值，则可以将其转换为 Action 委托类型之一；否则，可将其转换为 Func 委托类型之一。 例如，有 2 个参数且不返回值的 Lambda 表达式可转换为 Action&lt;T1,T2&gt; 委托。 有 1 个参数且不返回值的 Lambda 表达式可转换为 Func&lt;T,TResult&gt; 委托。 以下示例中，lambda 表达式 x =&gt; x * x （指定名为 x 的参数并返回 x 平方值）将分配给委托类型的变量：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; square = x =&gt; x * x;</span><br><span class="line">Console.WriteLine(square(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 25</span></span><br></pre></td></tr></table></figure><p>仅当 lambda 只有一个输入参数时，括号才是可选的；否则括号是必需的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用空括号指定零个输入参数：</span></span><br><span class="line">Action line = () =&gt; Console.WriteLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 括号内的两个或更多输入参数使用逗号加以分隔：</span></span><br><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>&gt; testForEquality = (x, y) =&gt; x == y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时，编译器无法推断输入类型。 可以显式指定类型，如下面的示例所示：</span></span><br><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">string</span>, <span class="keyword">bool</span>&gt; isTooLong = (<span class="keyword">int</span> x, <span class="keyword">string</span> s) =&gt; s.Length &gt; x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入参数类型必须全部为显式或全部为隐式；</span></span><br></pre></td></tr></table></figure><h2 id="Statement-lambda"><a href="#Statement-lambda" class="headerlink" title="Statement lambda"></a>Statement lambda</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(input-parameters) =&gt; &#123; &lt;sequence-of-statements&gt; &#125;</span><br><span class="line"></span><br><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; func = (x, y)</span><br><span class="line">    =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作日志</title>
    <link href="https://silencejql.github.io/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97.html"/>
    <id>https://silencejql.github.io/工作日志.html</id>
    <published>2020-03-23T01:53:06.000Z</published>
    <updated>2020-04-04T02:35:22.471Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>记录所有项目工作日志以便查询，年份、项目号分类<a id="more"></a><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><h3 id="March3"><a href="#March3" class="headerlink" title="March3"></a>March3</h3><p>郑州日产登录工位偶发卡死现象处理<br>1、更改原有C++程序，在更新登录表处增加try…catch…<br>2、用新程序替换，程序中UDP更新服务器表格应在程序处理前</p><p>解决方式：更新登录表数据增加超时时间为0解决</p><p>金华零跑MES</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
记录所有项目工作日志以便查询，年份、项目号分类
    
    </summary>
    
      <category term="工作" scheme="https://silencejql.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫基础</title>
    <link href="https://silencejql.github.io/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80.html"/>
    <id>https://silencejql.github.io/Python爬虫基础.html</id>
    <published>2020-03-05T04:04:12.000Z</published>
    <updated>2020-03-07T07:44:15.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>URL格式：<a href="http://host[:port][path]" target="_blank" rel="noopener">http://host[:port][path]</a><br>host：合法的Internet主机域名或IP地址<br>port：端口号，默认为80<br>path：请求资源的路径</p><h2 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h2><table><thead><tr><th>Urllib库</th><th>说明</th></tr></thead><tbody><tr><td>urllib.request</td><td>请求模块</td></tr><tr><td>urllib.error</td><td>异常处理模块</td></tr><tr><td>urllib.parse</td><td>url解析模块</td></tr><tr><td>urllib.robotparser</td><td>robots.txt解析模块</td></tr></tbody></table><p>urllib.request.urlopen(url,data=None,[timeout,]*,cafile=None,cadefault=False,context=None)</p><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url,params=<span class="literal">None</span>,**kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th>Requests方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑以下各方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页，对应HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTMLheader，对应HTML的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求</td></tr><tr><td>requests.delete()</td><td>向HTML网页提交删除请求</td></tr></tbody></table><table><thead><tr><th>Requests对象属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求返回的状态，200连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，URL对应的页面内容</td></tr><tr><td>r.encoding</td><td>HTTP header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>内容中分析出的响应内容编码格式（备选编码格式）</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制格式</td></tr></tbody></table><p>r.encoding：如果header中不存在charset，则默认编码为ISO-8859-1(不支持解析中文)<br>将r.apparent_encoding设置为utf-8可解决上述可能出现乱码问题</p><h3 id="baidu搜索关键词"><a href="#baidu搜索关键词" class="headerlink" title="baidu搜索关键词"></a>baidu搜索关键词</h3><p>百度搜索关键词对应：wd=keyword</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kv = &#123;<span class="string">'wd'</span>:<span class="string">'Python'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">"http://www.baidu.com/s"</span>,params = kv)</span><br></pre></td></tr></table></figure><h3 id="通用代码框架"><a href="#通用代码框架" class="headerlink" title="通用代码框架"></a>通用代码框架</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    header = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">    r = requests.get(url,headers=header)</span><br><span class="line">    r.raise_for_status() <span class="comment">#如果状态不是200则引发HTTPError异常</span></span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"异常"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  url = <span class="string">"http://"</span></span><br><span class="line">  print(GetHTMLText(url))</span><br></pre></td></tr></table></figure><h2 id="信息标记形式"><a href="#信息标记形式" class="headerlink" title="信息标记形式"></a>信息标记形式</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>标签、属性、内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>有类型的键值对表示<br>无法注释</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"key":"value"</span><br><span class="line">"key":["value1","value2"]</span><br><span class="line">"key":&#123;"subkey":"subvalue"&#125;</span><br></pre></td></tr></table></figure><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>无类型键值对</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span><span class="string">value</span></span><br><span class="line"><span class="attr">key:</span><span class="comment">#comments</span></span><br><span class="line"><span class="bullet">-</span><span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span><span class="string">value2</span></span><br><span class="line"><span class="attr">key:</span></span><br><span class="line"><span class="attr">  subkey:</span><span class="string">subvalue</span></span><br></pre></td></tr></table></figure><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找单个元素</span></span><br><span class="line">first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)<span class="comment"># #表示id,.表示类,不加前缀表示标签</span></span><br><span class="line">third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(first,second,third)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 通用方法</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">common = browser.find_element(By.ID,<span class="string">'q'</span>)</span><br><span class="line">commons = browser.find_elements(By.ID,<span class="string">'q'</span>) <span class="comment"># 查找多个元素</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="元素交互"><a href="#元素交互" class="headerlink" title="元素交互"></a>元素交互</h3><h4 id="实现淘宝搜索功能"><a href="#实现淘宝搜索功能" class="headerlink" title="实现淘宝搜索功能"></a>实现淘宝搜索功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>) <span class="comment">#找到网页中搜索框对应的id</span></span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>) <span class="comment">#向搜索框中传递的参数</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'iPad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn_search'</span>) <span class="comment">#找到搜索按钮对应的name</span></span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="爬取图片、视频等"><a href="#爬取图片、视频等" class="headerlink" title="爬取图片、视频等"></a>爬取图片、视频等</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">root = <span class="string">"D://Python//Pic"</span></span><br><span class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">    os.mkdir(root)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f</span><br><span class="line">      f.write(r.content)</span><br><span class="line">      f.close()</span><br><span class="line">      print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"文件已存在"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;&lt;p&gt;URL格式：&lt;a href=&quot;http://host[:port][path]&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络学习随记</title>
    <link href="https://silencejql.github.io/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0.html"/>
    <id>https://silencejql.github.io/网络学习随记.html</id>
    <published>2020-02-27T05:54:46.000Z</published>
    <updated>2020-02-28T07:20:53.947Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>应用层-表示层-会话层---HTTP/FTP/DNS/Telnet...传输层---TCP/UDP网络层---IP/ARP/ICMP/RARP数据链路层物理层<a id="more"></a><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>-Bit流  </p><h2 id="数据链路层-帧"><a href="#数据链路层-帧" class="headerlink" title="数据链路层 帧"></a>数据链路层 帧</h2><p>交换机 可识别MAC<br>FCS|Data|SIP|DIP|SMAC|DMAC</p><h2 id="网络层-包"><a href="#网络层-包" class="headerlink" title="网络层 包"></a>网络层 包</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>IP、ARP、ICMP、IGMP<br>路由器 可识别IP<br>Data|SIP|DIP</p><h4 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h4><p>ARP广播查询目标MAC地址<br>ipconfig /all查看网卡MAC<br>arp -a查询局域网内MAC<br><strong><em>ARP欺骗</em></strong><br>arp -s ip mac设置静态MAC(更改网络通讯中IP对应的MAC)<br>网卡属性中修复可重置</p><h4 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h4><p>PING-Packet Internet Grope因特网包探索器<br>ping局域网延迟一般小于10ms<br>TTL数据包生存周期，每过一个路由-1，防止网络回路<br>ping ip -i n 通过n值查看途经路由器IP<br>默认TTL：</p><blockquote><p>Linux : 64<br>Windows : 128<br>Unix : 255</p></blockquote><p>tracert ip 跟踪数据包路径<br>pathping 跟踪数据包路径，计算丢包情况</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>静态路由 管理员配置路径<br>动态路由 RIP协议 最大15级</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>netstat -n查看会话<br>netstat -nb查看会话及会话进程<br>netstat -an查看监听端口</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>16位<br>常用端口：0-1023<br>登机端口：1024-49151<br>客户端端口：49152-65535<br>常见应用层协议端口</p><table><thead><tr><th>协议</th><th>端口</th></tr></thead><tbody><tr><td>http</td><td>TCP:80</td></tr><tr><td>https</td><td>TCP:443</td></tr><tr><td>ftp</td><td>TCP:21</td></tr><tr><td>RDP</td><td>TCP:3389  远程桌面</td></tr><tr><td>SMTP</td><td>TCP:25</td></tr><tr><td>POP3</td><td>TCP:110</td></tr><tr><td>Telnet</td><td>TCP:23</td></tr><tr><td>SQL</td><td>TCP:1433</td></tr><tr><td></td><td></td></tr><tr><td>DNS</td><td>UDP:53(一般)</td></tr></tbody></table><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>socket=IP:Port</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>设置开/关机/登录启动脚本<br>gpedit.msc</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
应用层-表示层-会话层---HTTP/FTP/DNS/Telnet...
传输层---TCP/UDP
网络层---IP/ARP/ICMP/RARP
数据链路层
物理层
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python script save somethings</title>
    <link href="https://silencejql.github.io/Python%20script%20save%20somethings.html"/>
    <id>https://silencejql.github.io/Python script save somethings.html</id>
    <published>2020-02-07T03:41:22.000Z</published>
    <updated>2020-03-07T11:18:50.274Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><p>用法：urlretrieve(url, filename=None, reporthook=None, data=None)</p><blockquote></blockquote><p>参数 finename 指定了保存本地路径（如果参数未指定，urllib会生成一个临时文件保存数据）<br>参数 reporthook 是一个回调函数，当连接上服务器、以及相应的数据块传输完毕时会触发该回调，我们可以利用这个回调函数来显示当前的下载进度<br>参数 data 指 post 到服务器的数据，该方法返回一个包含两个元素的(filename, headers)元组，filename 表示保存到本地的路径，header 表示服务器的响应头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#常用</span></span><br><span class="line">img_src = <span class="string">'http://724.169pp.net/bizhi/2017/039/1.jpg'</span></span><br><span class="line">urllib.request.urlretrieve(img_src,<span class="string">r'C:\\Users\\ME\\Desktop\\1.jpg'</span>)</span><br><span class="line"><span class="comment">#second</span></span><br><span class="line">data = urllib.urlopen(img_src).read()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"bbb.jpg"</span>, <span class="string">"wb"</span>)<span class="keyword">as</span> f:  <span class="comment"># wb是写二进制</span></span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure><h3 id="PIL-requests"><a href="#PIL-requests" class="headerlink" title="PIL+requests"></a>PIL+requests</h3><p>PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用<br>requests是python实现的最简单易用的HTTP库，建议爬虫使用requests库。默认安装好python之后，是没有安装requests模块的，需要单独通过pip安装<br>BytesIO是用来操作二进制数据的，因为图片是二进制数据，和它相对的自然是StringIO，这是用来存str的。他们的区别就好似python读写普通文件和二进制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">img_src = <span class="string">'http://724.169pp.net/bizhi/2017/039/1.jpg'</span></span><br><span class="line">response = requests.get(img_src)</span><br><span class="line">image = Image.open(BytesIO(response.content))</span><br><span class="line"><span class="comment">#image = Image.open(StringIO(response.content))</span></span><br><span class="line">image.save(<span class="string">r'C:\\Users\\ME\\Desktop\\'</span> + <span class="string">'1.jpg'</span>)</span><br><span class="line"><span class="comment">#second 常用</span></span><br><span class="line">src = <span class="string">"https://i0.hdslb.com/bfs/sycp/creative_img/201912/01b2f081d58e49c708c1d32b7b8c20ed.jpg"</span></span><br><span class="line"><span class="comment">#r = requests.get(src,headers=header)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"bbb.jpg"</span>, <span class="string">"wb"</span>)<span class="keyword">as</span> f:  <span class="comment"># wb是写二进制</span></span><br><span class="line">    f.write(requests.get(src,headers=header).content)</span><br></pre></td></tr></table></figure><h2 id="保存视频"><a href="#保存视频" class="headerlink" title="保存视频"></a>保存视频</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response =  requests.get(<span class="string">'https://vd4.bdstatic.com/mda-jcrx64vi5vct2d2u/sc/mda-jcrx64vi5vct2d2u.mp4?auth_key=1557734214-0-0-d6a29a90222c6caf233e8a2a34c2e37a&amp;bcevod_channel=searchbox_feed&amp;pd=bjh&amp;abtest=all'</span>)</span><br><span class="line">video = response.content         <span class="comment">#把文件保存成二进制</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'D:\图片\绿色.mp4'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fw:</span><br><span class="line">    fw.write(video)           <span class="comment">#将文件内容写入该文件</span></span><br><span class="line">    fw.flush()               <span class="comment">#刷新</span></span><br></pre></td></tr></table></figure><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
      <category term="Python3" scheme="https://silencejql.github.io/categories/Python3/"/>
    
    
  </entry>
  
  <entry>
    <title>Python learning - Script</title>
    <link href="https://silencejql.github.io/Python%20learning%20-%20Script.html"/>
    <id>https://silencejql.github.io/Python learning - Script.html</id>
    <published>2020-02-06T05:02:00.000Z</published>
    <updated>2020-02-07T06:03:05.565Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="例：获取Bilibili播放量"><a href="#例：获取Bilibili播放量" class="headerlink" title="例：获取Bilibili播放量"></a>例：获取Bilibili播放量</h2><div><div class="fold_hider"><div class="close hider_title">点击展开/折叠示例</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#html = requests.get("https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=1")</span></span><br><span class="line"><span class="comment">#html = urlopen("https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=1")</span></span><br><span class="line"><span class="comment">#html.encoding = 'utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.csv"</span>, <span class="string">"w+"</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">','</span>)</span><br><span class="line">    writer.writerow([<span class="string">"Name"</span>, <span class="string">"Viewers"</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># 设置不加载页面</span></span><br><span class="line">        option.add_argument(<span class="string">"headless"</span>)</span><br><span class="line">        <span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">        option.add_argument(<span class="string">'lang=zh_CN.UTF-8'</span>)</span><br><span class="line">        option.add_argument(<span class="string">'--disable - plugins'</span>)</span><br><span class="line">        <span class="comment">#option.add_argument('blink-settings=imagesEnabled=false')</span></span><br><span class="line">        <span class="comment">#prefs = &#123;"profile.managed_default_content_settings.images": 2&#125;</span></span><br><span class="line">        <span class="comment">#option.add_experimental_option("prefs", prefs)</span></span><br><span class="line">        driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">        html = <span class="string">"https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page="</span> + str(i)</span><br><span class="line">        print(html)</span><br><span class="line">        html.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        driver.get(html)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        driver.minimize_window()</span><br><span class="line">        bsObj = BeautifulSoup(driver.page_source.replace(<span class="string">'&amp;nbsp;'</span>, <span class="string">' '</span>),<span class="string">"lxml"</span>)</span><br><span class="line">        <span class="comment">#AnimeList = bsObj.select("bangumi-item")</span></span><br><span class="line">        AnimeList = bsObj.findAll(class_=<span class="string">"bangumi-item"</span>)</span><br><span class="line">        <span class="keyword">for</span> ani <span class="keyword">in</span> AnimeList:</span><br><span class="line">            writer.writerow([ani.find(<span class="string">"a"</span>,class_=<span class="string">"bangumi-title"</span>).get_text(),ani.find(<span class="string">"div"</span>,class_=<span class="string">"shadow"</span>).get_text()])</span><br><span class="line">            url = ani.find(<span class="string">"div"</span>,class_=<span class="string">"common-lazy-img"</span>).find(<span class="string">"img"</span>)[<span class="string">'src'</span>]</span><br><span class="line">            <span class="keyword">if</span> len(url) &lt; <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            reg = re.search(<span class="string">r'@(.*)'</span>,url).group()</span><br><span class="line">            url = url.replace(<span class="string">'//'</span>,<span class="string">'https://'</span>).replace(reg,<span class="string">''</span>)</span><br><span class="line">            urllib.request.urlretrieve(url,<span class="string">"&#123;0&#125;.jpg"</span>.format(ani.find(<span class="string">"a"</span>,class_=<span class="string">"bangumi-title"</span>).get_text().replace(<span class="string">'/'</span>,<span class="string">'-'</span>)))</span><br><span class="line">            <span class="comment">#with open("testpic.png","wb") as pic:</span></span><br><span class="line">                <span class="comment">#pic.write(response.content)</span></span><br><span class="line">        driver.quit()</span><br><span class="line"><span class="string">'''except:</span></span><br><span class="line"><span class="string">    print("报错退出")</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">    driver.quit()'''</span></span><br><span class="line"><span class="comment">#for anime in AnimeList:</span></span><br><span class="line">    <span class="comment">#print(anime.find("a",class_="bangumi-title").get_text())</span></span><br><span class="line"><span class="string">'''taskkill /im chromedriver.exe /F</span></span><br><span class="line"><span class="string">　　taskkill /im chrome.exe /F'''</span></span><br></pre></td></tr></table></figure></div></div><h2 id="chrome-Options"><a href="#chrome-Options" class="headerlink" title="chrome Options"></a>chrome Options</h2><p>chromeOptions 是一个配置 chrome 启动是属性的类。通过这个类，我们可以为chrome配置如下参数：</p><blockquote></blockquote><p>设置 chrome 二进制文件位置 (binary_location)<br>添加启动参数 (add_argument)<br>添加扩展应用 (add_extension, add_encoded_extension)<br>添加实验性质的设置参数 (add_experimental_option)<br>设置调试器地址 (debugger_address)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .\Lib\site-packages\selenium\webdriver\chrome\options.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Options</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 设置 chrome 二进制文件位置</span></span><br><span class="line">        self._binary_location = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 添加启动参数</span></span><br><span class="line">        self._arguments = []</span><br><span class="line">        <span class="comment"># 添加扩展应用</span></span><br><span class="line">        self._extension_files = []</span><br><span class="line">        self._extensions = []</span><br><span class="line">        <span class="comment"># 添加实验性质的设置参数</span></span><br><span class="line">        self._experimental_options = &#123;&#125;</span><br><span class="line">        <span class="comment"># 设置调试器地址</span></span><br><span class="line">        self._debugger_address = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><div><div class="fold_hider"><div class="close hider_title">点击展开/折叠示例</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">options.add_argument(<span class="string">'lang=zh_CN.UTF-8'</span>)</span><br><span class="line"><span class="comment"># 禁止图片的加载</span></span><br><span class="line">prefs = &#123;<span class="string">"profile.managed_default_content_settings.images"</span>: <span class="number">2</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">"prefs"</span>, prefs)</span><br><span class="line"><span class="comment"># 设置无账号密码的代理</span></span><br><span class="line">options.add_argument(<span class="string">'--proxy-server=http://ip:port'</span>)  </span><br><span class="line"><span class="comment"># 设置有账号密码的代理</span></span><br><span class="line">proxyauth_plugin_path = create_proxyauth_extension(</span><br><span class="line">            proxy_host=<span class="string">'host'</span>,</span><br><span class="line">            proxy_port=<span class="string">'port'</span>,</span><br><span class="line">            proxy_username=<span class="string">"username"</span>,</span><br><span class="line">            proxy_password=<span class="string">"password"</span></span><br><span class="line">        )</span><br><span class="line">options.add_extension(proxyauth_plugin_path)</span><br><span class="line"></span><br><span class="line">options.add_argument(<span class="string">'window-size=1920x3000'</span>)  <span class="comment"># 指定浏览器分辨率</span></span><br><span class="line">options.add_argument(<span class="string">'--disable-gpu'</span>)  <span class="comment"># 谷歌文档提到需要加上这个属性来规避bug</span></span><br><span class="line">options.add_argument(<span class="string">'--disable-infobars'</span>)  <span class="comment"># 禁用浏览器正在被自动化程序控制的提示</span></span><br><span class="line">options.add_argument(<span class="string">'--hide-scrollbars'</span>)  <span class="comment"># 隐藏滚动条, 应对一些特殊页面</span></span><br><span class="line">options.add_argument(<span class="string">'blink-settings=imagesEnabled=false'</span>)  <span class="comment"># 不加载图片, 提升速度</span></span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)  <span class="comment"># 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span></span><br><span class="line">options.binary_location = <span class="string">r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"</span>  <span class="comment"># 手动指定使用的浏览器位置</span></span><br><span class="line"><span class="string">''' –user-data-dir=”[PATH]” 指定用户文件夹User Data路径，可以把书签这样的用户数据保存在系统分区以外的分区。</span></span><br><span class="line"><span class="string">　　–disk-cache-dir=”[PATH]“ 指定缓存Cache路径</span></span><br><span class="line"><span class="string">　　–disk-cache-size= 指定Cache大小，单位Byte</span></span><br><span class="line"><span class="string">　　–first run 重置到初始状态，第一次运行</span></span><br><span class="line"><span class="string">　　–incognito 隐身模式启动</span></span><br><span class="line"><span class="string">　　–disable-javascript 禁用Javascript</span></span><br><span class="line"><span class="string">　　--omnibox-popup-count="num" 将地址栏弹出的提示菜单数量改为num个。我都改为15个了。</span></span><br><span class="line"><span class="string">　　--user-agent="xxxxxxxx" 修改HTTP请求头部的Agent字符串，可以通过about:version页面查看修改效果</span></span><br><span class="line"><span class="string">　　--disable-plugins 禁止加载所有插件，可以增加速度。可以通过about:plugins页面查看效果</span></span><br><span class="line"><span class="string">　　--disable-javascript 禁用JavaScript，如果觉得速度慢在加上这个</span></span><br><span class="line"><span class="string">　　--disable-java 禁用java</span></span><br><span class="line"><span class="string">　　--start-maximized 启动就最大化</span></span><br><span class="line"><span class="string">　　--no-sandbox 取消沙盒模式</span></span><br><span class="line"><span class="string">　　--single-process 单进程运行</span></span><br><span class="line"><span class="string">　　--process-per-tab 每个标签使用单独进程</span></span><br><span class="line"><span class="string">　　--process-per-site 每个站点使用单独进程</span></span><br><span class="line"><span class="string">　　--in-process-plugins 插件不启用单独进程</span></span><br><span class="line"><span class="string">　　--disable-popup-blocking 禁用弹出拦截</span></span><br><span class="line"><span class="string">　　--disable-plugins 禁用插件</span></span><br><span class="line"><span class="string">　　--disable-images 禁用图像</span></span><br><span class="line"><span class="string">　　--incognito 启动进入隐身模式</span></span><br><span class="line"><span class="string">　　--enable-udd-profiles 启用账户切换菜单</span></span><br><span class="line"><span class="string">　　--proxy-pac-url 使用pac代理 [via 1/2]</span></span><br><span class="line"><span class="string">　　--lang=zh-CN 设置语言为简体中文</span></span><br><span class="line"><span class="string">　　--disk-cache-dir 自定义缓存目录</span></span><br><span class="line"><span class="string">　　--disk-cache-size 自定义缓存最大值（单位byte）</span></span><br><span class="line"><span class="string">　　--media-cache-size 自定义多媒体缓存最大值（单位byte）</span></span><br><span class="line"><span class="string">　　--bookmark-menu 在工具 栏增加一个书签按钮</span></span><br><span class="line"><span class="string">　　--enable-sync 启用书签同步</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">driver = webdriver.Chrome(chrome_options = options)</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
      <category term="Python" scheme="https://silencejql.github.io/categories/Python/"/>
    
    
      <category term="Python3" scheme="https://silencejql.github.io/tags/Python3/"/>
    
      <category term="Script" scheme="https://silencejql.github.io/tags/Script/"/>
    
  </entry>
  
  <entry>
    <title>CSharp调用SQL存储过程</title>
    <link href="https://silencejql.github.io/CSharp%E8%B0%83%E7%94%A8SQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html"/>
    <id>https://silencejql.github.io/CSharp调用SQL存储过程.html</id>
    <published>2019-12-17T04:33:09.000Z</published>
    <updated>2020-02-06T05:59:24.514Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>C# 执行SQLServer数据库中的存储过程，新增数据<a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">存储过程名：SP_Check_Equipotential</span><br><span class="line">参数：</span><br><span class="line">@Part2GNDInfo varchar(3000),<span class="comment">--</span></span><br><span class="line">@Part2GND decimal(3,2),<span class="comment">--</span></span><br><span class="line">@Resultflag int output,<span class="comment">--1保存成功  0保存失败</span></span><br><span class="line">@ResultMessage varchar(4000)output<span class="comment">--返回success 或 错误信息</span></span><br><span class="line">返回值：</span><br><span class="line">@Resultflag int output,<span class="comment">--1保存成功  0保存失败</span></span><br><span class="line">@ResultMessage varchar(4000)output<span class="comment">--返回success 或 错误信息</span></span><br></pre></td></tr></table></figure><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection DbConnection = <span class="keyword">new</span> SqlConnection(m_MESConnString);</span><br><span class="line">SqlCommand command = <span class="keyword">new</span> SqlCommand(<span class="string">"SP_Check_Equipotential"</span>, DbConnection);</span><br><span class="line">DbConnection.Open();</span><br><span class="line">InitCommand(<span class="keyword">ref</span> command);</span><br><span class="line">command.Parameters[<span class="string">"@Part2GNDInfo"</span>].Value = Part2GNDInfo;</span><br><span class="line">command.Parameters[<span class="string">"@Part2GND"</span>].Value = Convert.ToDecimal(mo2o(dr[<span class="string">"步骤一最大值"</span>],<span class="literal">true</span>));</span><br><span class="line">command.ExecuteNonQuery();</span><br><span class="line"><span class="keyword">int</span> result = command.Parameters[<span class="string">"@Resultflag"</span>].Value.zInt32();</span><br><span class="line"><span class="keyword">string</span> ResultMessage = command.Parameters[<span class="string">"@ResultMessage"</span>].Value.ToString();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitCommand</span>(<span class="params"><span class="keyword">ref</span> SqlCommand command</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    command.CommandType = CommandType.StoredProcedure;</span><br><span class="line">    command.Parameters.Add(<span class="string">"@Part2GNDInfo"</span>, SqlDbType.VarChar, <span class="number">3000</span>);</span><br><span class="line">    SqlParameter Part2GND = <span class="keyword">new</span> SqlParameter(<span class="string">"@Part2GND"</span>, SqlDbType.Decimal);</span><br><span class="line">    Part2GND.Precision = <span class="number">3</span>;</span><br><span class="line">    Part2GND.Scale = <span class="number">2</span>;</span><br><span class="line">    command.Parameters.Add(Part2GND);</span><br><span class="line">    command.Parameters.Add(<span class="string">"@Resultflag"</span>, SqlDbType.Int, <span class="number">1</span>);</span><br><span class="line">    command.Parameters[<span class="string">"@Resultflag"</span>].Direction = ParameterDirection.Output;</span><br><span class="line">    command.Parameters.Add(<span class="string">"@ResultMessage"</span>, SqlDbType.VarChar, <span class="number">4000</span>);</span><br><span class="line">    command.Parameters[<span class="string">"@ResultMessage"</span>].Direction = ParameterDirection.Output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
C# 执行SQLServer数据库中的存储过程，新增数据
    
    </summary>
    
      <category term="C#" scheme="https://silencejql.github.io/categories/C/"/>
    
    
      <category term="存储过程" scheme="https://silencejql.github.io/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>上汽通用五菱</title>
    <link href="https://silencejql.github.io/%E4%B8%8A%E6%B1%BD%E9%80%9A%E7%94%A8%E4%BA%94%E8%8F%B1.html"/>
    <id>https://silencejql.github.io/上汽通用五菱.html</id>
    <published>2019-11-27T02:12:23.000Z</published>
    <updated>2019-11-27T02:28:54.393Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>上汽通用五菱现场跟其他现场程序主要区别在于`PlatABS`，及时记录每次更改。<p>程序路径在<code>D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS</code></p><a id="more"></a><h2 id="柳州"><a href="#柳州" class="headerlink" title="柳州"></a>柳州</h2><h3 id="20191125"><a href="#20191125" class="headerlink" title="20191125"></a>20191125</h3><p>在RBABS_SGMW增加齿讯学习</p><h2 id="青岛"><a href="#青岛" class="headerlink" title="青岛"></a>青岛</h2><h2 id="印尼"><a href="#印尼" class="headerlink" title="印尼"></a>印尼</h2>]]></content>
    
    <summary type="html">
    
      上汽通用五菱现场软件说明记录
    
    </summary>
    
      <category term="现场" scheme="https://silencejql.github.io/categories/%E7%8E%B0%E5%9C%BA/"/>
    
    
      <category term="上汽" scheme="https://silencejql.github.io/tags/%E4%B8%8A%E6%B1%BD/"/>
    
      <category term="五菱" scheme="https://silencejql.github.io/tags/%E4%BA%94%E8%8F%B1/"/>
    
  </entry>
  
  <entry>
    <title>git command</title>
    <link href="https://silencejql.github.io/git%20command.html"/>
    <id>https://silencejql.github.io/git command.html</id>
    <published>2019-11-20T10:10:47.000Z</published>
    <updated>2019-11-21T09:03:51.435Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><h3 id="Bash-常用命令"><a href="#Bash-常用命令" class="headerlink" title="Bash 常用命令"></a>Bash 常用命令</h3><table><thead><tr><th align="left">command</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">cd</td><td align="center">切换目录</td></tr><tr><td align="left">pwd</td><td align="center">查看当前目录</td></tr><tr><td align="left">ls(ll)</td><td align="center">查看当前目录文件</td></tr><tr><td align="left">touch file.*</td><td align="center">新建文件</td></tr><tr><td align="left">rm file.*</td><td align="center">删除文件</td></tr><tr><td align="left">mkdir fold</td><td align="center">新建文件夹</td></tr><tr><td align="left">rm -r fold</td><td align="center">删除文件夹</td></tr><tr><td align="left">mv file destfold file</td><td align="center">移动文件</td></tr><tr><td align="left">clear</td><td align="center">清屏</td></tr><tr><td align="left">history</td><td align="center">查看历史命令</td></tr></tbody></table><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="设置用户名与邮箱"><a href="#设置用户名与邮箱" class="headerlink" title="设置用户名与邮箱"></a>设置用户名与邮箱</h3><p><code>git config --global user.name &quot;Your Name&quot;</code></p><p><code>git config --global user.email &quot;email@example.com&quot;</code></p><table><thead><tr><th align="left">command</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">git init</td><td align="center">在指定路径下执行，创建本地仓库</td></tr><tr><td align="left">git config -l</td><td align="center">查看git环境详细配置</td></tr><tr><td align="left">git config –system –list</td><td align="center">查看系统config</td></tr><tr><td align="left">git config –global  –list</td><td align="center">查看当前用户（global）配置</td></tr><tr><td align="left">git config –local  –list</td><td align="center">查看当前仓库配置信息</td></tr><tr><td align="left">git add</td><td align="center">提交文件到暂存区，多个文件空格分开</td></tr><tr><td align="left">git commit</td><td align="center">提交到仓库分支</td></tr><tr><td align="left">git commit -m “说明”</td><td align="center">添加本次提交的说明便于查看更改记录</td></tr><tr><td align="left">git log</td><td align="center">历史版本信息 Git中版本用HEAD做标识，当前版本为HEAD，上一个版本是HEAD^</td></tr><tr><td align="left">git reset –hard HEAD^</td><td align="center">退回到上个版本</td></tr><tr><td align="left">git reset –hard commit_id</td><td align="center">HEAD 可用commit id前几位</td></tr><tr><td align="left">git reflog</td><td align="center">查看之前所有版本信息</td></tr><tr><td align="left">git status</td><td align="center">查看状态</td></tr><tr><td align="left">git diff HEAD – file</td><td align="center">查看工作区与版本库中的区别</td></tr><tr><td align="left">git checkout – file</td><td align="center">将工作区恢复到暂存区或版本库中的内容</td></tr><tr><td align="left">git reset HEAD file</td><td align="center">将暂存区恢复到版本库的内容</td></tr><tr><td align="left">git rm file</td><td align="center">删除文件</td></tr><tr><td align="left">git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yourgithubname/Repositoryname.git</td><td align="center">关联远程库</td></tr><tr><td align="left">git push -u origin master</td><td align="center">将本地仓库推送到远程仓库master分支并关联本地master分支</td></tr><tr><td align="left">git push origin master</td><td align="center">推送到远程master分支</td></tr><tr><td align="left">git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubname/Repositoryname.git</td><td align="center">clone到本地</td></tr><tr><td align="left">git branch bra</td><td align="center">创建bra分支</td></tr><tr><td align="left">git checkout bra</td><td align="center">切换到bra分支</td></tr><tr><td align="left">git checkout -b bra</td><td align="center">等效于上面两条指令</td></tr><tr><td align="left">git branch</td><td align="center">查看分支，当前分支用*标识，切换分支后提交到当前分支</td></tr><tr><td align="left">git checkout master</td><td align="center">切换到master分支</td></tr><tr><td align="left">git merge</td><td align="center">合并指定分支到当前分支</td></tr><tr><td align="left">git branch -d bra</td><td align="center">删除bra分支</td></tr><tr><td align="left">git switch -c bra</td><td align="center">创建并切换分支</td></tr><tr><td align="left">git switch master</td><td align="center">切换到master分支</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
      <category term="Git" scheme="https://silencejql.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>IDMDownload</title>
    <link href="https://silencejql.github.io/IDMDownload.html"/>
    <id>https://silencejql.github.io/IDMDownload.html</id>
    <published>2019-11-14T04:57:46.000Z</published>
    <updated>2019-11-14T05:08:58.815Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>Google Chrome 利用IDM下载器下载资源，可下载百度网盘资源<a id="more"></a><h3 id="安装Google-Chrome"><a href="#安装Google-Chrome" class="headerlink" title="安装Google Chrome"></a>安装Google Chrome</h3><h3 id="安装浏览器插件Tampermonkey"><a href="#安装浏览器插件Tampermonkey" class="headerlink" title="安装浏览器插件Tampermonkey"></a>安装浏览器插件Tampermonkey</h3><h3 id="安装百度网盘直接下载助手脚本"><a href="#安装百度网盘直接下载助手脚本" class="headerlink" title="安装百度网盘直接下载助手脚本"></a>安装百度网盘直接下载助手脚本</h3><h3 id="安装IDM-integration-Module"><a href="#安装IDM-integration-Module" class="headerlink" title="安装IDM integration Module"></a>安装IDM integration Module</h3>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
Google Chrome 利用IDM下载器下载资源，可下载百度网盘资源
    
    </summary>
    
    
  </entry>
  
</feed>
