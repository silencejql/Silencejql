<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silencejql</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://silencejql.github.io/"/>
  <updated>2020-08-05T02:31:36.184Z</updated>
  <id>https://silencejql.github.io/</id>
  
  <author>
    <name>Justin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>刷网课随记</title>
    <link href="https://silencejql.github.io/%E5%88%B7%E7%BD%91%E8%AF%BE%E9%9A%8F%E8%AE%B0.html"/>
    <id>https://silencejql.github.io/刷网课随记.html</id>
    <published>2020-08-03T03:31:08.000Z</published>
    <updated>2020-08-05T02:31:36.184Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="下载视频课程"><a href="#下载视频课程" class="headerlink" title="下载视频课程"></a>下载视频课程</h2><h3 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h3><h4 id="Webdriver"><a href="#Webdriver" class="headerlink" title="Webdriver"></a>Webdriver</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">driver.get(<span class="string">"https://www.bjjnts.cn/login"</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">"username"</span>).send_keys(<span class="string">"uesrname"</span>) <span class="comment">#元素赋值模拟输入</span></span><br><span class="line">driver.find_element_by_name(<span class="string">"password"</span>).send_keys(<span class="string">"password"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//button[@class='login_btn' and @type='submit']"</span>).click() <span class="comment">#登录按钮点击事件</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="keyword">return</span>  driver.page_source</span><br></pre></td></tr></table></figure><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>通过抓包拿到cookie，再将cookie放到header中请求即可</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠源码</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetPageHtml</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">        driver.get(<span class="string">"https://www.bjjnts.cn/login"</span>)</span><br><span class="line">        txt = driver.page_source</span><br><span class="line">        <span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">        driver.find_element_by_name(<span class="string">"username"</span>).send_keys(<span class="string">"370831199309165413"</span>)</span><br><span class="line">        driver.find_element_by_name(<span class="string">"password"</span>).send_keys(<span class="string">"bj123465"</span>)</span><br><span class="line">        driver.find_element_by_xpath(<span class="string">"//button[@class='login_btn' and @type='submit']"</span>).click()</span><br><span class="line">        header = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36'</span>,<span class="string">'Referer'</span>:url&#125;</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        driver.get(url)</span><br><span class="line">        <span class="keyword">return</span>  driver.page_source</span><br><span class="line">        <span class="comment">#res = requests.get(url,headers = header)</span></span><br><span class="line">        <span class="comment">#if res.status_code == 200:</span></span><br><span class="line">            <span class="comment">#return res.text</span></span><br><span class="line">        <span class="comment">#return None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ParseHtml</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'&lt;video src="(.*?)"\sposter='</span>,re.S)</span><br><span class="line">    items = re.search(pattern,html)</span><br><span class="line">    print(items.group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span>  items.group(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ParseVideoHtml</span><span class="params">(html, name)</span>:</span></span><br><span class="line">    root = <span class="string">"D://Downloads//"</span></span><br><span class="line">    path = root + name + <span class="string">".mp4"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">            os.mkdir(root)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            r = requests.get(html)</span><br><span class="line">            <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">                f.close()</span><br><span class="line">                print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"文件已存在"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"爬取失败"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_config</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""""读取配置"""</span></span><br><span class="line">    path = os.getcwd()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(<span class="string">"config.json"</span>):  <span class="comment"># 无文件时创建</span></span><br><span class="line">         <span class="keyword">with</span> open(<span class="string">"config.json"</span>, mode=<span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> jsonfile:</span><br><span class="line">             jsonfile.write(json.dump(&#123;<span class="string">'url'</span>:<span class="string">'https://www.bjjnts.cn/lessonStudy/202/4268'</span>&#125;),indent=<span class="number">4</span>)</span><br><span class="line">         jsonfile.close()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"config.json"</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        config = json.load(json_file)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#html = "https://bjjnts-bd.xuetangx.com/4233125536dfb27e-10.mp4?auth_key=1596034097-0-0-f7f5072dec07ec43c1110ade3a8d412d"</span></span><br><span class="line">    <span class="comment">#ParseVideoHtml(html)</span></span><br><span class="line">    <span class="comment">#https://www.bjjnts.cn/login</span></span><br><span class="line">    config = read_config()</span><br><span class="line">    <span class="comment">#html = "https://www.bjjnts.cn/lessonStudy/202/4268"</span></span><br><span class="line">    html = config[<span class="string">"url"</span>]</span><br><span class="line">    print(html)</span><br><span class="line">    url = <span class="string">"https://www.bjjnts.cn/login"</span></span><br><span class="line">    option = webdriver.ChromeOptions()</span><br><span class="line">    driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    txt = driver.page_source</span><br><span class="line">    <span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">    driver.find_element_by_name(<span class="string">"username"</span>).send_keys(<span class="string">"370831199309165413"</span>)</span><br><span class="line">    driver.find_element_by_name(<span class="string">"password"</span>).send_keys(<span class="string">"bj123465"</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">"//button[@class='login_btn' and @type='submit']"</span>).click()</span><br><span class="line">    header = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36'</span>,<span class="string">'Referer'</span>:url&#125;</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    driver.get(html)</span><br><span class="line"></span><br><span class="line">    videoNames = []</span><br><span class="line">    bsObj = BeautifulSoup(driver.page_source.replace(<span class="string">'&amp;nbsp;'</span>, <span class="string">' '</span>), <span class="string">"lxml"</span>)</span><br><span class="line">    VideoList = bsObj.findAll(class_=<span class="string">"course_study_menubox"</span>)</span><br><span class="line">    <span class="comment">##print(VideoList)</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> video <span class="keyword">in</span> VideoList:</span><br><span class="line">        videoname = video.find(<span class="string">"h4"</span>,class_=<span class="string">"course_study_menutitle"</span>).get_text()</span><br><span class="line">        <span class="comment">##driver.get(html)</span></span><br><span class="line">        videoHtml = ParseHtml(driver.page_source)</span><br><span class="line">        <span class="comment">#th = Thread()</span></span><br><span class="line">        ParseVideoHtml(videoHtml, videoname)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        driver.find_element_by_xpath(<span class="string">"//a[@class='change_chapter lesson-"</span> + str(i) + <span class="string">"']"</span>).find_element_by_xpath(<span class="string">'..'</span>).click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(str(i))</span><br><span class="line">        <span class="comment">#videoNames.append(video.find("h4",class_="course_study_menutitle").get_text())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(videoNames)</span></span><br><span class="line">    <span class="comment">#print(html)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://silencejql.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code配置记录</title>
    <link href="https://silencejql.github.io/Visual%20Studio%20Code%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html"/>
    <id>https://silencejql.github.io/Visual Studio Code配置记录.html</id>
    <published>2020-07-28T07:39:55.000Z</published>
    <updated>2020-07-28T07:46:55.762Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>前面啥也没有<a id="more"></a><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>已安装插件：</p><blockquote><p>Bracket Pair Colorizer <br>Chinese (Simplified) Language <br>compareit <br>Dracula Official <br>Git History <br>GitLens <br>Markdownlint <br>Markdown All in One <br>open in browser <br>Python <br>C# <br>Vetur</p></blockquote><h2 id="Python安装第三方库"><a href="#Python安装第三方库" class="headerlink" title="Python安装第三方库"></a>Python安装第三方库</h2><p>进入Python安装路径下的Scripts，执行 .\pip install requests<br>如果在安装时报错：<br>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xd7 in position 9: ordinal not in range(128)<br>修改位于Python的安装路径下的Lib\mimetypes.py文件,在import下添加如下几行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.getdefaultencoding() != <span class="string">'gbk'</span>:</span><br><span class="line">    reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'gbk'</span>)</span><br></pre></td></tr></table></figure><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
前面啥也没有
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GAE AppID</title>
    <link href="https://silencejql.github.io/GAE%20AppID.html"/>
    <id>https://silencejql.github.io/GAE AppID.html</id>
    <published>2020-07-16T02:55:23.000Z</published>
    <updated>2020-07-16T02:56:13.810Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>GAEProxy AppID<a id="more"></a><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testpro<span class="number">-199603</span>|mytestpro<span class="number">-233908</span>|justinxxnet01|xxnet<span class="number">-1</span>|xxnet<span class="number">-2</span>|xxnet<span class="number">-3</span>|xxnet<span class="number">-4</span>|xxnet<span class="number">-5</span>|xxnet<span class="number">-6</span>|xxnet<span class="number">-7</span>|xxnet<span class="number">-8</span>|xxnet<span class="number">-9</span>|xxnet<span class="number">-10</span>|xxnet<span class="number">-11</span>|xxnet<span class="number">-12</span>|xxnet<span class="number">-13</span>|xxnet<span class="number">-14</span>|xxnet<span class="number">-15</span>|xxnet<span class="number">-16</span>|xxnet<span class="number">-17</span>|xxnet<span class="number">-18</span>|xxnet<span class="number">-19</span>|xxnet<span class="number">-20</span>|xxnet<span class="number">-21</span>|xxnet<span class="number">-22</span>|xxnet<span class="number">-23</span>|xxnet<span class="number">-24</span>|xxnet<span class="number">-25</span>|xxnet<span class="number">-26</span>|xxnet<span class="number">-27</span>|xxnet<span class="number">-28</span>|xxnet<span class="number">-29</span>|xxnet<span class="number">-30</span>|xxnet<span class="number">-31</span>|xxnet<span class="number">-32</span>|xxnet<span class="number">-33</span>|xxnet<span class="number">-34</span>|xxnet<span class="number">-35</span>|xxnet<span class="number">-36</span>|xxnet<span class="number">-37</span>|xxnet<span class="number">-38</span>|xxnet<span class="number">-39</span>|xxnet<span class="number">-40</span>|xxnet<span class="number">-41</span>|xxnet<span class="number">-42</span>|xxnet<span class="number">-43</span>|xxnet<span class="number">-44</span>|xxnet<span class="number">-45</span>|xxnet<span class="number">-46</span>|xxnet<span class="number">-47</span>|xxnet<span class="number">-48</span>|xxnet<span class="number">-49</span>|xxnet<span class="number">-50</span>|xxnet<span class="number">-51</span>|xxnet<span class="number">-52</span>|xxnet<span class="number">-53</span>|xxnet<span class="number">-54</span>|xxnet<span class="number">-55</span>|xxnet<span class="number">-56</span>|xxnet<span class="number">-57</span>|xxnet<span class="number">-58</span>|xxnet<span class="number">-59</span>|xxnet<span class="number">-60</span>|xxnet<span class="number">-61</span>|xxnet<span class="number">-62</span>|xxnet<span class="number">-63</span>|xxnet<span class="number">-64</span>|xxnet<span class="number">-65</span>|xxnet<span class="number">-66</span>|xxnet<span class="number">-67</span>|xxnet<span class="number">-68</span>|xxnet<span class="number">-69</span>|xxnet<span class="number">-70</span>|xxnet<span class="number">-71</span>|xxnet<span class="number">-72</span>|xxnet<span class="number">-72</span>|xxnet<span class="number">-73</span>|xxnet<span class="number">-74</span>|xxnet<span class="number">-75</span>|xxnet<span class="number">-76</span>|xxnet<span class="number">-77</span>|xxnet<span class="number">-78</span>|xxnet<span class="number">-79</span>|xxnet<span class="number">-80</span>|xxnet<span class="number">-81</span>|xxnet<span class="number">-82</span>|xxnet<span class="number">-83</span>|xxnet<span class="number">-84</span>|xxnet<span class="number">-85</span>|xxnet<span class="number">-86</span>|xxnet<span class="number">-87</span>|xxnet<span class="number">-88</span>|xxnet<span class="number">-89</span>|xxnet<span class="number">-90</span>|xxnet<span class="number">-91</span>|xxnet<span class="number">-92</span>|xxnet<span class="number">-93</span>|xxnet<span class="number">-94</span>|xxnet<span class="number">-95</span>|xxnet<span class="number">-96</span>|xxnet<span class="number">-97</span>|xxnet<span class="number">-98</span>|xxnet<span class="number">-99</span>|xxnet<span class="number">-100</span>|xxnet<span class="number">-101</span>|xxnet<span class="number">-102</span>|xxnet<span class="number">-103</span>|xxnet<span class="number">-104</span>|xxnet<span class="number">-105</span>|xxnet<span class="number">-106</span>|xxnet<span class="number">-107</span>|xxnet<span class="number">-108</span>|xxnet<span class="number">-109</span>|xxnet<span class="number">-110</span>|xxnet<span class="number">-111</span>|xxnet<span class="number">-112</span>|xxnet<span class="number">-113</span>|xxnet<span class="number">-114</span>|xxnet<span class="number">-115</span>|xxnet<span class="number">-116</span>|xxnet<span class="number">-117</span>|xxnet<span class="number">-118</span>|xxnet<span class="number">-119</span>|xxnet<span class="number">-120</span>|xxnet<span class="number">-121</span>|xxnet<span class="number">-122</span>|xxnet<span class="number">-123</span>|xxnet<span class="number">-124</span>|xxnet<span class="number">-125</span>|xxnet<span class="number">-126</span>|xxnet<span class="number">-127</span>|xxnet<span class="number">-128</span>|xxnet<span class="number">-129</span>|xxnet<span class="number">-130</span>|xxnet<span class="number">-131</span>|xxnet<span class="number">-132</span>|xxnet<span class="number">-133</span>|xxnet<span class="number">-134</span>|xxnet<span class="number">-135</span>|xxnet<span class="number">-136</span>|xxnet<span class="number">-137</span>|xxnet<span class="number">-138</span>|xxnet<span class="number">-139</span>|xxnet<span class="number">-140</span>|xxnet<span class="number">-141</span>|xxnet<span class="number">-142</span>|xxnet<span class="number">-143</span>|xxnet<span class="number">-144</span>|xxnet<span class="number">-145</span>|xxnet<span class="number">-146</span>|xxnet<span class="number">-147</span>|xxnet<span class="number">-148</span>|xxnet<span class="number">-149</span>|xxnet<span class="number">-150</span>|xxnet<span class="number">-151</span>|xxnet<span class="number">-152</span>|xxnet<span class="number">-153</span>|xxnet<span class="number">-154</span>|xxnet<span class="number">-155</span>|xxnet<span class="number">-156</span>|xxnet<span class="number">-157</span>|xxnet<span class="number">-158</span>|xxnet<span class="number">-159</span>|celtic-bazaar<span class="number">-122813</span>|chrome--<span class="number">-1231</span>|chrome-<span class="number">-1231</span>|chrome<span class="number">-06</span>|chrome<span class="number">-07</span>|chrome<span class="number">-08</span>|chrome<span class="number">-09</span>|chrome<span class="number">-10</span>|chrome<span class="number">-11</span>|chrome<span class="number">-12</span>|chrome<span class="number">-1231</span>|chrome<span class="number">-1231</span><span class="number">-1231</span>|cool-continuity<span class="number">-122814</span>|coral-muse<span class="number">-122814</span>|curious-memory<span class="number">-122814</span>|dospytang11|dospytang12|dospytang13|feisty-current<span class="number">-122813</span>|glassy-vial<span class="number">-122813</span>|groovy-patrol<span class="number">-122814</span>|jingtao<span class="number">-001</span>|practical-album<span class="number">-122814</span>|proud-storm<span class="number">-122813</span>|sound-invention<span class="number">-122813</span>|starlit-cocoa<span class="number">-122814</span>|third-circle<span class="number">-122813</span>|wyslmt11|wyslmt12|xx-net-agent|xxnet-<span class="number">-1229</span>|xxnet<span class="number">-1017</span>|xxnet<span class="number">-1018</span>|xxnet<span class="number">-1019</span>|xxnet<span class="number">-1021</span>|xxnet<span class="number">-1022</span>|xxnet<span class="number">-1023</span>|xxnet<span class="number">-1024</span>|xxnet<span class="number">-1025</span>|xxnet<span class="number">-1026</span>|xxnet<span class="number">-1027</span>|xxnet<span class="number">-1028</span>|xxnet<span class="number">-1029</span>|xxnet<span class="number">-103</span><span class="number">-1188</span>|xxnet<span class="number">-1030</span>|xxnet<span class="number">-1031</span>|xxnet<span class="number">-1032</span><span class="number">-1188</span>|xxnet<span class="number">-1033</span>|xxnet<span class="number">-1034</span>|xxnet<span class="number">-1035</span>|xxnet<span class="number">-1037</span>|xxnet<span class="number">-1053</span>|xxnet<span class="number">-1054</span>|xxnet<span class="number">-200</span><span class="number">-1199</span>|xxnet<span class="number">-201</span><span class="number">-1199</span>|xxnet<span class="number">-202</span><span class="number">-1199</span>|xxnet<span class="number">-203</span><span class="number">-1199</span>|xxnet<span class="number">-204</span><span class="number">-1199</span>|xxnet<span class="number">-205</span><span class="number">-1199</span>|xxnet<span class="number">-206</span><span class="number">-1199</span>|xxnet<span class="number">-207</span><span class="number">-1199</span>|xxnet-cntchen|xxnet-evachen|xxnet-fgfw|xxnet-fgfw<span class="number">-1</span>|xxnet-fgfw<span class="number">-2</span>|xxnet-lennon|xxnet-xlx01|xxnet-xlx02|xxnet-xlx03|xxnet-xlx04|xxnet-xlx05|xxnet-xlx06|xxnet-xlx07|xxnet-xlx08|xxnet-xlx09|xxnet-xlx10|xxnet-xlx11|xxnet-xlx12|chrome26<span class="number">-1100</span>|chrome27<span class="number">-1100</span>|chrome28<span class="number">-1100</span>|chrome29<span class="number">-1100</span>|chrome30<span class="number">-1100</span>|xxnet-foshan2|xxnet-foshan3|xxnet-foshan4|xxnet-foshan5|xxnet-foshan6|chrome7<span class="number">-1234</span>|chrome8<span class="number">-1234</span>|chrome10<span class="number">-1209</span>|chrome11<span class="number">-1209</span>|chrome12<span class="number">-1209</span>|chrome2<span class="number">-1209</span>|alpine-air<span class="number">-123504</span>|caramel-theory<span class="number">-123504</span>|compact-life<span class="number">-123504</span>|clean-yew<span class="number">-123504</span>|cobalt-sector<span class="number">-123504</span>|eternal-outlook<span class="number">-123504</span>|flash-moonlight<span class="number">-123504</span>|omega-terrain<span class="number">-123504</span>|premium-weft<span class="number">-123504</span>|starlit-ship<span class="number">-123504</span>|saaas<span class="number">-1235</span>|x-micron<span class="number">-123504</span>|chrome6<span class="number">-1234</span>|chrome5<span class="number">-1234</span>|chrome4<span class="number">-1234</span>|chrome3<span class="number">-1234</span>|chrome2<span class="number">-1234</span>|chrome1<span class="number">-1234</span>|chrome0<span class="number">-1234</span>|chrome-<span class="number">-1234</span>|chrome--<span class="number">-1234</span>|chrome<span class="number">-1234</span>|chrome6<span class="number">-1209</span>|chrome4<span class="number">-1209</span>|chrome3<span class="number">-1209</span>|universal-stone<span class="number">-123514</span>|stoked-dominion<span class="number">-123514</span>|unique-ellipse<span class="number">-123514</span>|trans-gate<span class="number">-123514</span>|innate-summit<span class="number">-123514</span>|able-involution<span class="number">-123514</span>|helpful-ally<span class="number">-123514</span>|river-karma<span class="number">-123514</span>|future-synapse<span class="number">-123514</span>|booming-alchemy<span class="number">-123514</span>|storied-myth<span class="number">-123514</span>|folkloric-stone<span class="number">-123514</span>|cryptic-lattice<span class="number">-123514</span>|dulcet-bucksaw<span class="number">-123514</span>|airy-machine<span class="number">-123514</span>|e-lexicon<span class="number">-123514</span>|seventh-history<span class="number">-123514</span>|upbeat-voice<span class="number">-123514</span>|stately-math<span class="number">-123514</span>|lucid-sweep<span class="number">-123514</span>|nice-azimuth<span class="number">-123514</span>|spry-equator<span class="number">-123515</span>|neural-tome<span class="number">-123515</span>|famous-charge<span class="number">-123515</span>|elated-practice<span class="number">-123515</span>|unique-antonym<span class="number">-123515</span>|sharp-quest<span class="number">-123515</span>|manifest-altar<span class="number">-123515</span>|steel-citizen<span class="number">-123515</span>|fourth-walker<span class="number">-123515</span>|subtle-sublime<span class="number">-123515</span>|galvanized-<span class="keyword">case</span><span class="number">-123515</span>|xxnet-izual1|xxnet-izual2|xxnet-izual3|xxnet-izual4|xxnet-izual5|chrome11<span class="number">-1239</span>|chrome10<span class="number">-1239</span>|chrome9<span class="number">-1239</span>|chrome8<span class="number">-1239</span>|chrome7<span class="number">-1239</span>|chrome6<span class="number">-1239</span>|chrome5<span class="number">-1239</span>|chrome4<span class="number">-1239</span>|chrome3<span class="number">-1239</span>|chrome2<span class="number">-1239</span>|chrome0<span class="number">-1239</span>|xx-net008<span class="number">-1197</span>|tangtdjia|xxnet-kittycheny1|xxnet-kittycheny2|xxnet-kittycheny3|xxnet-kittycheny4|xxnet-kittycheny5|xxnet-kittycheny6|xxnet-sdcff1|xxnet-sdcff2|xxnet-sdcff3|xxnet-sdcff4|xxnet-sdcff5|xxnet-sdcff6|xxnet-sdcff7|xxnet-sdcff8|xxnet-sdcff9|xxnet-sdcff10|xxnet-sdcff11|xxnet-sdcff12|rosy-dialect<span class="number">-124115</span>|xxnet-sdcf8<span class="number">-1241</span>|xxnet-sdcf1|xxnet-sdcf2|xxnet-sdcf3|xxnet-sdcf4|xxnet-sdcf5|xxnet-sdcf6|xxnet-sdcf7|xxnet-sdcf8|xxnet-sdcf9|xxnet-sdcf10</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
GAEProxy AppID
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL Server存储过程</title>
    <link href="https://silencejql.github.io/SQL%20Server%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html"/>
    <id>https://silencejql.github.io/SQL Server存储过程.html</id>
    <published>2020-07-12T05:48:33.000Z</published>
    <updated>2020-07-12T06:53:43.344Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>前面啥也没有<a id="more"></a><h2 id="查询赋值"><a href="#查询赋值" class="headerlink" title="查询赋值"></a>查询赋值</h2><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> [EOLData]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">/****** Object:  StoredProcedure [dbo].[UpDateHLAResult]    Script Date: 07/12/2020 13:45:44 ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- Author:  &lt;Author,,Name&gt;</span></span><br><span class="line"><span class="comment">-- Create date: &lt;Create Date,,&gt;</span></span><br><span class="line"><span class="comment">-- Description: &lt;Description,,&gt;</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[UpDateHLAResult]</span><br><span class="line">(</span><br><span class="line">@VIN <span class="built_in">varchar</span>(<span class="number">30</span>),</span><br><span class="line">@ZTS <span class="built_in">varchar</span>(<span class="number">30</span>),</span><br><span class="line">@LLOffset <span class="built_in">FLOAT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SET NOCOUNT ON added to prevent extra result sets from</span></span><br><span class="line"><span class="comment">-- interfering with SELECT statements.</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> @sem <span class="built_in">varchar</span>(<span class="number">30</span>) = <span class="string">''''</span></span><br><span class="line"><span class="comment">-- 声明变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> @LHB <span class="built_in">FLOAT</span></span><br><span class="line"><span class="comment">-- 判断是否存在数据</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span>(<span class="keyword">select</span> [左远光灯高] <span class="keyword">from</span> [dbo].[车型配置] <span class="keyword">where</span> [ZTS]=@ZTS)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 查询赋值</span></span><br><span class="line">    <span class="keyword">select</span> @LHB = [左远光灯高] <span class="keyword">from</span> [dbo].[车型配置] <span class="keyword">where</span> [ZTS]=@ZTS</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">select</span> @LHB = [左远光灯高] <span class="keyword">from</span> [dbo].[<span class="number">64</span>字节车型配置] <span class="keyword">where</span> [ZTS]=@ZTS</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">SET</span> @LHB = @LHB - @LHOffset</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    exec(</span><br><span class="line">    <span class="string">'UPDATE [dbo].[灯光表] SET '</span></span><br><span class="line">    +<span class="string">'[左远光灯高] = '</span>+@sem+ @LHB +@sem</span><br><span class="line">    +<span class="string">'WHERE [VIN] = '</span>+@sem+ @VIN +@sem</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
前面啥也没有
    
    </summary>
    
      <category term="SQLServer" scheme="https://silencejql.github.io/categories/SQLServer/"/>
    
    
  </entry>
  
  <entry>
    <title>HttpWeb</title>
    <link href="https://silencejql.github.io/HttpWeb.html"/>
    <id>https://silencejql.github.io/HttpWeb.html</id>
    <published>2020-06-24T03:31:01.000Z</published>
    <updated>2020-07-10T06:35:40.388Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="HttpWebRequest"><a href="#HttpWebRequest" class="headerlink" title="HttpWebRequest"></a>HttpWebRequest</h2><p>命名空间： System.Net，这是.NET创建者最初开发用于使用HTTP请求的标准类<br>使用HttpWebRequest可以让开发者控制请求/响应流程的各个方面，如 timeouts, cookies, headers, protocols<br>另一个好处是HttpWebRequest类不会阻塞UI线程,例如，当从响应很慢的API服务器下载大文件时，您的应用程序的UI不会停止响应<br>HttpWebRequest通常和WebResponse一起使用，一个发送请求，一个获取数据<br>HttpWebRquest更为底层一些，能够对整个访问过程有个直观的认识，但同时也更加复杂一些</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠属性</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Accept <span class="comment">//获取或设置 Accept HTTP 标头的值。</span></span><br><span class="line">Address <span class="comment">//获取实际响应请求的 Internet 资源的统一资源标识符 (URI)。</span></span><br><span class="line">AllowAutoRedirect <span class="comment">//获取或设置一个值，该值指示请求是否应跟随重定向响应。</span></span><br><span class="line">AllowReadStreamBuffering <span class="comment">//获取或设置一个值，该值指示是否对从 Internet 资源接收的数据进行缓冲处理。</span></span><br><span class="line">AllowWriteStreamBuffering <span class="comment">//获取或设置一个值，该值指示是否对发送到 Internet 资源的数据进行缓冲处理。</span></span><br><span class="line">AuthenticationLevel <span class="comment">//获取或设置用于此请求的身份验证和模拟的级别。(继承自 WebRequest)</span></span><br><span class="line">AutomaticDecompression <span class="comment">//获取或设置所使用的解压缩类型。</span></span><br><span class="line">CachePolicy <span class="comment">//获取或设置此请求的缓存策略。(继承自 WebRequest)</span></span><br><span class="line">ClientCertificates <span class="comment">//获取或设置与此请求关联的安全证书集合。</span></span><br><span class="line">Connection <span class="comment">//获取或设置 Connection HTTP 标头的值。</span></span><br><span class="line">ConnectionGroupName <span class="comment">//获取或设置请求的连接组的名称。</span></span><br><span class="line">ContentLength <span class="comment">//获取或设置 Content-length HTTP 标头。</span></span><br><span class="line">ContentType <span class="comment">//获取或设置 Content-type HTTP 标头的值。</span></span><br><span class="line">ContinueDelegate <span class="comment">//获取或设置当从 Internet 资源接收到 HTTP 100-continue 响应时调用的委托方法。</span></span><br><span class="line">ContinueTimeout <span class="comment">//获取或设置在接收到来自服务器的 100-Continue 之前要等待的超时（以毫秒为单位）。</span></span><br><span class="line">CookieContainer <span class="comment">//获取或设置与请求关联的 Cookie。</span></span><br><span class="line">CreatorInstance <span class="comment">//当在子类中重写时，获取从 IWebRequestCreate 类派生的工厂对象，该类用于创建为生成对指定 URI 的请求而实例化的 WebRequest。(继承自 WebRequest)</span></span><br><span class="line">Credentials <span class="comment">//获取或设置请求的身份验证信息。</span></span><br><span class="line">Date <span class="comment">//获取或设置要在 HTTP 请求中使用的 Date HTTP 标头值。</span></span><br><span class="line">DefaultCachePolicy <span class="comment">//获取或设置此请求的默认缓存策略。</span></span><br><span class="line">DefaultMaximumErrorResponseLength <span class="comment">//获取或设置 HTTP 错误响应的默认最大长度。</span></span><br><span class="line">DefaultMaximumResponseHeadersLength <span class="comment">//获取或设置 MaximumResponseHeadersLength 属性的默认值。</span></span><br><span class="line">Expect <span class="comment">//获取或设置 Expect HTTP 标头的值。</span></span><br><span class="line">HaveResponse <span class="comment">//获取一个值，该值指示是否收到了来自 Internet 资源的响应。</span></span><br><span class="line">Headers <span class="comment">//指定构成 HTTP 标头的名称/值对的集合。</span></span><br><span class="line">Host <span class="comment">//获取或设置要在 HTTP 请求中独立于请求 URI 使用的 Host 标头值。</span></span><br><span class="line">IfModifiedSince <span class="comment">//获取或设置 If-Modified-Since HTTP 标头的值。</span></span><br><span class="line">ImpersonationLevel <span class="comment">//获取或设置当前请求的模拟级别。(继承自 WebRequest)</span></span><br><span class="line">KeepAlive <span class="comment">//获取或设置一个值，该值指示是否与 Internet 资源建立持续型连接。</span></span><br><span class="line">MaximumAutomaticRedirections <span class="comment">//获取或设置请求将跟随的重定向的最大数目。</span></span><br><span class="line">MaximumResponseHeadersLength <span class="comment">//获取或设置响应标头允许的最大长度。</span></span><br><span class="line">MediaType <span class="comment">//获取或设置请求的媒体类型。</span></span><br><span class="line">Method <span class="comment">//获取或设置请求的方法。</span></span><br><span class="line">Pipelined <span class="comment">//获取或设置一个值，该值指示是否通过管线将请求传输到 Internet 资源。</span></span><br><span class="line">PreAuthenticate <span class="comment">//获取或设置一个值，该值指示是否随请求发送一个 Authorization 标头。</span></span><br><span class="line">ProtocolVersion <span class="comment">//获取或设置用于请求的 HTTP 版本。</span></span><br><span class="line">Proxy <span class="comment">//获取或设置请求的代理信息。</span></span><br><span class="line">ReadWriteTimeout <span class="comment">//获取或设置写入或读取流时的超时（以毫秒为单位）。</span></span><br><span class="line">Referer <span class="comment">//获取或设置 Referer HTTP 标头的值。</span></span><br><span class="line">RequestUri <span class="comment">//获取请求的原始统一资源标识符 (URI)。</span></span><br><span class="line">SendChunked <span class="comment">//获取或设置一个值，该值指示是否将数据分段发送到 Internet 资源。</span></span><br><span class="line">ServerCertificateValidationCallback <span class="comment">//获取或设置用于验证服务器证书的回调函数。</span></span><br><span class="line">ServicePoint <span class="comment">//获取用于请求的服务点。</span></span><br><span class="line">SupportsCookieContainer <span class="comment">//获取指示请求是否为 CookieContainer 提供支持的值。</span></span><br><span class="line">Timeout <span class="comment">//获取或设置 GetResponse() 和 GetRequestStream() 方法的超时值（以毫秒为单位）。</span></span><br><span class="line">TransferEncoding <span class="comment">//获取或设置 Transfer-encoding HTTP 标头的值。</span></span><br><span class="line">UnsafeAuthenticatedConnectionSharing <span class="comment">//获取或设置一个值，该值指示是否允许经过高速 NTLM 身份验证的连接共享。</span></span><br><span class="line">UseDefaultCredentials <span class="comment">//获取或设置一个 Boolean 值，该值控制是否随请求一起发送默认凭据。</span></span><br><span class="line">UserAgent <span class="comment">//获取或设置 User-agent HTTP 标头的值。</span></span><br></pre></td></tr></table></figure></div></div><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠方法</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Abort() <span class="comment">//取消向 Internet 资源发出的请求。</span></span><br><span class="line">AddRange(Int32) <span class="comment">//向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。</span></span><br><span class="line">AddRange(Int32, Int32) <span class="comment">//向请求添加指定范围的字节范围标头。</span></span><br><span class="line">AddRange(Int64) <span class="comment">//向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。</span></span><br><span class="line">AddRange(Int64, Int64) <span class="comment">//向请求添加指定范围的字节范围标头。</span></span><br><span class="line">AddRange(String, Int32) <span class="comment">//向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。</span></span><br><span class="line">AddRange(String, Int32, Int32) <span class="comment">//向请求添加指定范围的范围标头。</span></span><br><span class="line">AddRange(String, Int64) <span class="comment">//向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。</span></span><br><span class="line">AddRange(String, Int64, Int64) <span class="comment">//向请求添加指定范围的范围标头。</span></span><br><span class="line">BeginGetRequestStream(AsyncCallback, Object) <span class="comment">//开始对用于写入数据的 Stream 对象执行异步请求。</span></span><br><span class="line">BeginGetResponse(AsyncCallback, Object) <span class="comment">//开始对 Internet 资源的异步请求。</span></span><br><span class="line">CreateObjRef(Type) <span class="comment">//创建一个对象，该对象包含生成用于与远程对象进行通信的代理所需的全部相关信息。(继承自 MarshalByRefObject)</span></span><br><span class="line">EndGetRequestStream(IAsyncResult) <span class="comment">//结束对用来写入数据的 Stream 对象的异步请求。</span></span><br><span class="line">EndGetRequestStream(IAsyncResult, TransportContext) <span class="comment">//结束对用于写入数据的 Stream 对象的异步请求，并输出与该流关联的 TransportContext。</span></span><br><span class="line">EndGetResponse(IAsyncResult) <span class="comment">//结束对 Internet 资源的异步请求。</span></span><br><span class="line">Equals(Object) <span class="comment">//确定指定的对象是否等于当前对象。(继承自 Object)</span></span><br><span class="line">GetHashCode() <span class="comment">//作为默认哈希函数。(继承自 Object)</span></span><br><span class="line">GetLifetimeService() <span class="comment">//检索控制此实例的生存期策略的当前生存期服务对象。(继承自 MarshalByRefObject)</span></span><br><span class="line">GetObjectData(SerializationInfo, StreamingContext) <span class="comment">//使用序列化目标对象时所需的数据填充 SerializationInfo。</span></span><br><span class="line">GetRequestStream() <span class="comment">//获取用于写入请求数据的 Stream 对象。</span></span><br><span class="line">GetRequestStream(TransportContext) <span class="comment">//获取用于写入请求数据的 Stream 对象，并输出与流关联的 TransportContext。</span></span><br><span class="line">GetRequestStreamAsync()<span class="comment">//当在子类中被重写时，将用于写入数据的 Stream 作为异步操作返回到 Internet 资源。(继承自 WebRequest)</span></span><br><span class="line">GetResponse()<span class="comment">//返回来自 Internet 资源的响应。</span></span><br><span class="line">GetResponseAsync()<span class="comment">//当在子代类中被重写时，将作为异步操作返回对 Internet 请求的响应。(继承自 WebRequest)</span></span><br><span class="line">GetType()<span class="comment">//获取当前实例的 Type。(继承自 Object)</span></span><br><span class="line">InitializeLifetimeService()<span class="comment">//获取生存期服务对象来控制此实例的生存期策略。(继承自 MarshalByRefObject)</span></span><br><span class="line">MemberwiseClone()<span class="comment">//创建当前 Object 的浅表副本。(继承自 Object)</span></span><br><span class="line">MemberwiseClone(Boolean)<span class="comment">//创建当前 MarshalByRefObject 对象的浅表副本。(继承自 MarshalByRefObject)</span></span><br><span class="line">ToString()<span class="comment">//返回表示当前对象的字符串。(继承自 Object)</span></span><br></pre></td></tr></table></figure></div></div><h3 id="Post-amp-Get"><a href="#Post-amp-Get" class="headerlink" title="Post&amp;Get"></a>Post&amp;Get</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POST方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">HttpPost</span>(<span class="params"><span class="keyword">string</span> Url, <span class="keyword">string</span> postDataStr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url);</span><br><span class="line">    request.Method = <span class="string">"POST"</span>;</span><br><span class="line">    request.ContentType = <span class="string">"application/x-www-form-urlencoded"</span>;</span><br><span class="line">    Encoding encoding = Encoding.UTF8;</span><br><span class="line">    <span class="keyword">byte</span>[] postData = encoding.GetBytes(postDataStr);</span><br><span class="line">    request.ContentLength = postData.Length;</span><br><span class="line">    Stream myRequestStream = request.GetRequestStream();</span><br><span class="line">    myRequestStream.Write(postData, <span class="number">0</span>, postData.Length);</span><br><span class="line">    myRequestStream.Close();</span><br><span class="line"></span><br><span class="line">    HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">    Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">    StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream, encoding);</span><br><span class="line">    <span class="keyword">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line">    myStreamReader.Close();</span><br><span class="line">    myResponseStream.Close();</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">        response.Close();</span><br><span class="line">    <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">        request.Abort();</span><br><span class="line">    <span class="keyword">return</span> retString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Post</span>(<span class="params"><span class="keyword">string</span> Url, <span class="keyword">string</span> Data, <span class="keyword">string</span> Referer</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url);</span><br><span class="line">    request.Method = <span class="string">"POST"</span>;</span><br><span class="line">    request.Referer = Referer;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = Encoding.UTF8.GetBytes(Data);</span><br><span class="line">    request.ContentType = <span class="string">"application/x-www-form-urlencoded"</span>;</span><br><span class="line">    request.ContentLength = bytes.Length;</span><br><span class="line">    Stream myResponseStream = request.GetRequestStream();</span><br><span class="line">    myResponseStream.Write(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line"></span><br><span class="line">    HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">    StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(response.GetResponseStream(), Encoding.UTF8);</span><br><span class="line">    <span class="keyword">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line"></span><br><span class="line">    myStreamReader.Close();</span><br><span class="line">    myResponseStream.Close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">        response.Close();</span><br><span class="line">    <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">        request.Abort();</span><br><span class="line">    <span class="keyword">return</span> retString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//GET方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">HttpGet</span>(<span class="params"><span class="keyword">string</span> Url, <span class="keyword">string</span> postDataStr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url + (postDataStr == <span class="string">""</span> ? <span class="string">""</span> : <span class="string">"?"</span>) + postDataStr);</span><br><span class="line">    request.Proxy = <span class="literal">null</span>;</span><br><span class="line">    request.KeepAlive = <span class="literal">false</span>;</span><br><span class="line">    request.Method = <span class="string">"GET"</span>;</span><br><span class="line">    <span class="comment">//request.ContentType = "text/html;charset=UTF-8";</span></span><br><span class="line">    request.ContentType = <span class="string">"application/json; charset=UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">    HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">    Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">    <span class="comment">//StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));</span></span><br><span class="line">    StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream, Encoding.UTF8);</span><br><span class="line">    <span class="keyword">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line"></span><br><span class="line">    myStreamReader.Close();</span><br><span class="line">    myResponseStream.Close();</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">        response.Close();</span><br><span class="line">    <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">        request.Abort();</span><br><span class="line">    <span class="keyword">return</span> retString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><p>HttpClient是.NET4.5引入的一个HTTP客户端库，其命名空间为 System.Net.Http ，.NET 4.5之前我们可能使用WebClient和HttpWebRequest来达到相同目的<br>HttpClient利用了最新的面向任务模式，使得处理异步请求非常容易<br>它适合用于多次请求操作，一般设置好默认头部后，可以进行重复多次的请求，基本上用一个实例可以提交任何的HTTP请求<br>HttpClient有预热机制，第一次进行访问时比较慢，所以不应该用到HttpClient就new一个出来，应该使用单例或其他方式获取HttpClient的实例</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠构造函数</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpClient() <span class="comment">//使用释放此实例时释放的 HttpClientHandler 初始化 HttpClient 类的新实例。</span></span><br><span class="line">HttpClient(HttpMessageHandler) <span class="comment">//使用指定的处理程序初始化 HttpClient 类的新实例。 处理程序在释放此实例时被释放。</span></span><br><span class="line">HttpClient(HttpMessageHandler, Boolean) <span class="comment">//使用提供的处理程序初始化 HttpClient 类的新实例，并指定在释放此实例时是否应释放该处理程序。</span></span><br></pre></td></tr></table></figure></div></div><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠属性</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BaseAddress<span class="comment">//获取或设置用于发送请求的 Internet 资源的统一资源标识符 (URI) 的基址。</span></span><br><span class="line">DefaultProxy<span class="comment">//获取或设置全局 HTTP 代理。</span></span><br><span class="line">DefaultRequestHeaders<span class="comment">//获取应与每个请求一起发送的标头。</span></span><br><span class="line">DefaultRequestVersion<span class="comment">//获取或设置对此 HttpClient 实例发出的后续请求使用的默认 HTTP 版本。</span></span><br><span class="line">MaxResponseContentBufferSize<span class="comment">//获取或设置要在读取响应内容时缓冲的最大字节数。</span></span><br><span class="line">Timeout<span class="comment">//获取或设置请求超时前等待的时间跨度。</span></span><br></pre></td></tr></table></figure></div></div><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠方法</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">CancelPendingRequests()<span class="comment">//取消该实例上的所有挂起的请求。</span></span><br><span class="line">DeleteAsync(String)<span class="comment">//以异步操作将 DELETE 请求发送给指定 URI。</span></span><br><span class="line">DeleteAsync(String, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span></span><br><span class="line">DeleteAsync(Uri)<span class="comment">//以异步操作将 DELETE 请求发送给指定 URI。</span></span><br><span class="line">DeleteAsync(Uri, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span></span><br><span class="line">Dispose()<span class="comment">//释放由 HttpMessageInvoker 使用的非托管资源和托管资源。(继承自 HttpMessageInvoker)</span></span><br><span class="line">Dispose(Boolean)<span class="comment">//释放由 HttpClient 使用的非托管资源，并可根据需要释放托管资源。</span></span><br><span class="line">Equals(Object)<span class="comment">//确定指定的对象是否等于当前对象。(继承自 Object)</span></span><br><span class="line">GetAsync(String)<span class="comment">//以异步操作将 GET 请求发送给指定 URI。</span></span><br><span class="line">GetAsync(String, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(String, HttpCompletionOption)<span class="comment">//用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(String, HttpCompletionOption, CancellationToken)<span class="comment">//用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(Uri)<span class="comment">//以异步操作将 GET 请求发送给指定 URI。</span></span><br><span class="line">GetAsync(Uri, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(Uri, HttpCompletionOption)<span class="comment">//用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(Uri, HttpCompletionOption, CancellationToken)<span class="comment">//用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetByteArrayAsync(String)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span></span><br><span class="line">GetByteArrayAsync(Uri)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span></span><br><span class="line">GetHashCode()<span class="comment">//作为默认哈希函数。(继承自 Object)</span></span><br><span class="line">GetStreamAsync(String)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span></span><br><span class="line">GetStreamAsync(Uri)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span></span><br><span class="line">GetStringAsync(String)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span></span><br><span class="line">GetStringAsync(Uri)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span></span><br><span class="line">GetType()<span class="comment">//获取当前实例的 Type。(继承自 Object)</span></span><br><span class="line">MemberwiseClone()<span class="comment">//创建当前 Object 的浅表副本。(继承自 Object)</span></span><br><span class="line">PatchAsync(String, HttpContent)<span class="comment">//以异步操作方式将 PATCH 请求发送到指定为字符串的 URI。</span></span><br><span class="line">PatchAsync(String, HttpContent, CancellationToken)<span class="comment">//以异步操作方式将带有取消令牌的 PATCH 请求发送到表示为字符串的 URI。</span></span><br><span class="line">PatchAsync(Uri, HttpContent)<span class="comment">//以异步操作方式发送 PATCH 请求。</span></span><br><span class="line">PatchAsync(Uri, HttpContent, CancellationToken)<span class="comment">//以异步操作方式发送带有取消令牌的 PATCH 请求。</span></span><br><span class="line">PostAsync(String, HttpContent)<span class="comment">//以异步操作将 POST 请求发送给指定 URI。</span></span><br><span class="line">PostAsync(String, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 POST 请求。</span></span><br><span class="line">PostAsync(Uri, HttpContent)<span class="comment">//以异步操作将 POST 请求发送给指定 URI。</span></span><br><span class="line">PostAsync(Uri, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 POST 请求。</span></span><br><span class="line">PutAsync(String, HttpContent)<span class="comment">//以异步操作将 PUT 请求发送给指定 URI。</span></span><br><span class="line">PutAsync(String, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 PUT 请求。</span></span><br><span class="line">PutAsync(Uri, HttpContent)<span class="comment">//以异步操作将 PUT 请求发送给指定 URI。</span></span><br><span class="line">PutAsync(Uri, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 PUT 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage, CancellationToken)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage, HttpCompletionOption)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">ToString()<span class="comment">//返回表示当前对象的字符串。(继承自 Object)</span></span><br></pre></td></tr></table></figure></div></div><h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h3><p>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式</p><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><p>默认不会实例化，什么时候用什么时候new</p><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><p>类初始化时,会立即加载该对象，线程天生安全,调用效率高</p><h3 id="双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL，即 double-checked locking）"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h3><p>这种方式采用双锁机制，安全且在多线程情况下能保持高性能</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpClientHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> LockObj = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpClient client = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClientHelper</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        GetInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpClient <span class="title">GetInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (LockObj)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (client == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">PostAsync</span>(<span class="params"><span class="keyword">string</span> url, <span class="keyword">string</span> strJson</span>)<span class="comment">//post异步请求方法</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            HttpContent content = <span class="keyword">new</span> StringContent(strJson);</span><br><span class="line">            content.Headers.ContentType = <span class="keyword">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(<span class="string">"application/json"</span>);</span><br><span class="line">            <span class="comment">//由HttpClient发出异步Post请求</span></span><br><span class="line">            HttpResponseMessage res = <span class="keyword">await</span> client.PostAsync(url, content);</span><br><span class="line">            <span class="keyword">if</span> (res.StatusCode == System.Net.HttpStatusCode.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> str = res.Content.ReadAsStringAsync().Result;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Post</span>(<span class="params"><span class="keyword">string</span> url, <span class="keyword">string</span> strJson</span>)<span class="comment">//post同步请求方法</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// private static HttpClient client = new HttpClient();</span></span><br><span class="line">           <span class="comment">//client.DefaultRequestHeaders.Accept.TryParseAdd("application/json");</span></span><br><span class="line">            HttpContent content = <span class="keyword">new</span> StringContent(strJson);</span><br><span class="line">            content.Headers.ContentType = <span class="keyword">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(<span class="string">"application/json"</span>);</span><br><span class="line">            <span class="comment">//client.DefaultRequestHeaders.Connection.Add("keep-alive");</span></span><br><span class="line">            <span class="comment">//由HttpClient发出Post请求</span></span><br><span class="line">            Task&lt;HttpResponseMessage&gt; res = client.PostAsync(url, content);</span><br><span class="line">            <span class="keyword">if</span> (res.Result.StatusCode == System.Net.HttpStatusCode.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> str = res.Result.Content.ReadAsStringAsync().Result;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// private static HttpClient client = new HttpClient();</span></span><br><span class="line">           <span class="comment">//client.DefaultRequestHeaders.Accept.TryParseAdd("application/json");</span></span><br><span class="line">            <span class="keyword">var</span> responseString = client.GetStringAsync(url);</span><br><span class="line">            <span class="keyword">return</span> responseString.Result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSON字符串</title>
    <link href="https://silencejql.github.io/JSON%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
    <id>https://silencejql.github.io/JSON字符串.html</id>
    <published>2020-06-24T02:58:43.000Z</published>
    <updated>2020-07-01T09:36:28.582Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="C-生成方法"><a href="#C-生成方法" class="headerlink" title="C#生成方法"></a>C#生成方法</h2><h3 id="Newtonsoft"><a href="#Newtonsoft" class="headerlink" title="Newtonsoft"></a>Newtonsoft</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">String apiClass = <span class="string">"apiClass"</span>;</span><br><span class="line">String apiCommand = <span class="string">"apiCommand"</span>;</span><br><span class="line">JObject postedJObject = <span class="keyword">new</span> JObject();</span><br><span class="line">postedJObject.Add(<span class="string">"class"</span>, apiClass);</span><br><span class="line">postedJObject.Add(<span class="string">"cmd"</span>, apiCommand);</span><br><span class="line"></span><br><span class="line">String param1 = <span class="string">"param1"</span>;</span><br><span class="line">String param2 = <span class="string">"param2"</span>;</span><br><span class="line">JObject apiJsonParam = <span class="keyword">new</span> JObject();</span><br><span class="line">apiJsonParam.Add(<span class="string">"param1"</span>, param1);</span><br><span class="line">apiJsonParam.Add(<span class="string">"param2"</span>, param2);</span><br><span class="line">postedJObject.Add(<span class="string">"param"</span>, apiJsonParam);</span><br><span class="line">apiJsonParam[<span class="string">"param1"</span>] = param1);</span><br><span class="line">apiJsonParam[<span class="string">"param2"</span>] = param2);</span><br><span class="line">postedJObject[<span class="string">"param"</span>] = apiJsonParam;</span><br><span class="line"></span><br><span class="line">JArray jArray = <span class="keyword">new</span> JArray();</span><br><span class="line">JObject arr1 = <span class="keyword">new</span> JObject();</span><br><span class="line">arr1.Add(<span class="string">"arr1"</span>, <span class="string">"this is arr1"</span>);</span><br><span class="line">jArray.Add(arr1);</span><br><span class="line">JObject arr2 = <span class="keyword">new</span> JObject();</span><br><span class="line">arr2.Add(<span class="string">"arr2"</span>, <span class="string">"this is arr2"</span>);</span><br><span class="line">jArray.Add(arr2);</span><br><span class="line">postedJObject.Add(<span class="string">"jarray"</span>, jArray);</span><br><span class="line">String paramString = postedJObject.ToString(Newtonsoft.Json.Formatting.Indented, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"class"</span>: <span class="string">"apiClass"</span>,</span><br><span class="line">  <span class="string">"cmd"</span>: <span class="string">"apiCommand"</span>,</span><br><span class="line">  <span class="string">"param"</span>: &#123;</span><br><span class="line">    <span class="string">"param1"</span>: <span class="string">"param1"</span>,</span><br><span class="line">    <span class="string">"param2"</span>: <span class="string">"param2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"jarray"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"arr1"</span>: <span class="string">"this is arr1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"arr2"</span>: <span class="string">"this is arr2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>string StrJson = JsonConvert.SerializeObject(Classobj);</p><h4 id="读取JSON文件"><a href="#读取JSON文件" class="headerlink" title="读取JSON文件"></a>读取JSON文件</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> json = <span class="keyword">string</span>.Empty;</span><br><span class="line"><span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(filepath, FileMode.Open, System.IO.FileAccess.Read, FileShare.ReadWrite))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(fs, Encoding.GetEncoding(“gb2312”)))</span><br><span class="line">  &#123;</span><br><span class="line">    json = sr.ReadToEnd().ToString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> json = GetFileJson(filepath);</span><br></pre></td></tr></table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>ClassA a = JsonConvert.DeserializeObject<classa>(strResult);</classa></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; lstStuModel = <span class="keyword">new</span> List&lt;Student&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> Student()&#123;ID=<span class="number">1</span>,Name=<span class="string">"Name1"</span>,Age=<span class="number">250</span>,Sex=<span class="string">"男"</span>&#125;,</span><br><span class="line"><span class="keyword">new</span> Student()&#123;ID=<span class="number">2</span>,Name=<span class="string">"Name2"</span>,Age=<span class="number">300</span>,Sex=<span class="string">"女"</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json.NET序列化</span></span><br><span class="line"><span class="keyword">string</span> jsonData = JsonConvert.SerializeObject(lstStuModel);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json.NET反序列化</span></span><br><span class="line"><span class="keyword">string</span> json = <span class="string">@"&#123; 'Name':'Name1','Age':'3000','ID':'1','Sex':'女'&#125;"</span>;</span><br><span class="line">Student descJsonStu = JsonConvert.DeserializeObject&lt;Student&gt;(json);<span class="comment">//反序列化</span></span><br><span class="line">Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"反序列化： ID=&#123;0&#125;,Name=&#123;1&#125;,Sex=&#123;2&#125;,Sex=&#123;3&#125;"</span>, descJsonStu.ID, descJsonStu.Name, descJsonStu.Age, descJsonStu.Sex));</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>刷题记</title>
    <link href="https://silencejql.github.io/%E5%88%B7%E9%A2%98%E8%AE%B0.html"/>
    <id>https://silencejql.github.io/刷题记.html</id>
    <published>2020-06-21T08:37:21.000Z</published>
    <updated>2020-07-12T05:47:30.287Z</updated>
    
    <content type="html"><![CDATA[<center>简介</center>记录刷题过程中遇到问题及新知识<a id="more"></a><h2 id="System-Collections"><a href="#System-Collections" class="headerlink" title="System.Collections"></a>System.Collections</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>在C#中，数组由于是固定长度的，由于这种限制不方便，所以出现了ArrayList<br>ArrayList是可变长数组，可以将任意多的数据Add到ArrayList里面。其内部维护的数组，当长度不足时，会自动扩容为原来的两倍。<br>但是ArrayList也有一个缺点，就是存入ArrayList里面的数据都是Object类型的，所以如果将值类型存入和取出的时候会发生装箱、拆箱操作(就是值类型与引用类型之间的转换)，这个会影响程序性能。在.Net 2.0泛型出现以后，就提供了List<t>。</t></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List<t></t></h3><p>List<t>是ArrayList的泛型版本，它不再需要装箱拆箱，直接取，直接用，它基本与ArrayList一致，不过在使用的时候要先设置好它的类型，而设置好类型之后，不是这种类型的数据，是不允许Add进去的<br>就性能来说，如果要存进数组的只有一种数据，那么无疑List<t>是最优选择<br><strong>List存储的数据是有序并且可以重复的。 采用链表存储数据</strong></t></t></p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; ListInt = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add(T)</span><br><span class="line">AddRange(IEnumerable&lt;T&gt;)</span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Find(Predicate&lt;T&gt;) <span class="comment">//搜索与指定谓词所定义的条件相匹配的元素，并返回整个 List&lt;T&gt; 中的第一个匹配元素</span></span><br><span class="line">FindAll(Predicate&lt;T&gt;) <span class="comment">//检索与指定谓词定义的条件匹配的所有元素 返回List&lt;&gt;</span></span><br><span class="line">IndexOf(T)<span class="comment">//搜索指定的对象，并返回整个 List&lt;T&gt; 中第一个匹配项的从零开始的索引</span></span><br><span class="line">LastIndexOf(T)<span class="comment">//搜索指定对象并返回整个 List&lt;T&gt; 中最后一个匹配项的从零开始索引</span></span><br><span class="line">IndexOf(T, Int32)<span class="comment">//搜索指定对象并返回 List&lt;T&gt; 中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引</span></span><br><span class="line">IndexOf(T, Int32, Int32)<span class="comment">//搜索指定对象并返回 List&lt;T&gt; 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引</span></span><br><span class="line">Insert(Int32, T)<span class="comment">//将元素插入到 List&lt;T&gt; 中的指定索引处</span></span><br><span class="line">Remove(T) <span class="comment">//从 List&lt;T&gt; 中删除特定对象的第一个匹配项</span></span><br><span class="line">Reverse()<span class="comment">//将整个 List&lt;T&gt; 中元素的顺序反转</span></span><br><span class="line">Reverse(Int32, Int32)<span class="comment">//将指定范围中元素的顺序反转</span></span><br><span class="line">Sort()<span class="comment">//使用默认比较器对整个 List&lt;T&gt; 中的元素进行排序</span></span><br><span class="line">ToArray()<span class="comment">//将 List&lt;T&gt; 的元素复制到新数组中</span></span><br></pre></td></tr></table></figure></div></div><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>HashTable是一种根据key查找非常快的键值数据结构，不能有重复key，而且由于其特点，其长度总是一个素数，所以扩容后容量会比2倍大一点点，加载因子为0.72f。<br>当要大量使用key来查找value的时候，HashTable无疑是最有选择，HashTable与ArrayList一样，是非泛型的，value存进去是object,存取会发生装箱、拆箱，所以出现了Dictionary&lt;T,T&gt;</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count <span class="comment">//获取包含在 Hashtable 中的键/值对的数目</span></span><br><span class="line">Keys</span><br><span class="line">Values</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add(Object, Object)</span><br><span class="line">Clear()</span><br><span class="line">Clone()</span><br><span class="line">Contains(Object)</span><br><span class="line">ContainsKey(Object)</span><br><span class="line">ContainsValue(Object)</span><br><span class="line">GetHash(Object)<span class="comment">//返回指定键的哈希代码</span></span><br><span class="line">Remove(Object)</span><br></pre></td></tr></table></figure></div></div><h3 id="Dictionary-lt-T-T-gt"><a href="#Dictionary-lt-T-T-gt" class="headerlink" title="Dictionary&lt;T,T&gt;"></a>Dictionary&lt;T,T&gt;</h3><p>Dictionary&lt;T,T&gt;是HashTable的泛型版本，存取同样快，但是不需要装箱和拆箱了。而且，其优化了算法，Hashtable是0.72，它的浪费容量少了很多</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="keyword">string</span>,Person&gt; Dic = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>,Person&gt;();</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet<t></t></h3><p>HashSet<t>类，算法，存储结构都与哈希表相同，主要是设计用来做高性能集运算的，例如对两个集合求交集、并集、差集等。集合中包含一组不重复出现且无特定顺序的元素<br><strong>HashSet存储的数据是无序并且唯一的，底层使用HashMap存储数据</strong><br>Add(T) 方法返回值为如果该元素添加到 HashSet<t> 对象中则为 true；如果该元素已存在则为 false</t></t></p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;<span class="keyword">int</span>&gt; numbers1;</span><br><span class="line">HashSet&lt;<span class="keyword">int</span>&gt; numbers2;</span><br><span class="line"><span class="comment">//分别进行numbers1和numbers2的值初始化或赋值</span></span><br><span class="line">numbers1.UnionWith(numbers2);<span class="comment">//求两个集合的并集。</span></span><br><span class="line">numbers1.IntersectWith(numbers2);<span class="comment">//求两个集合的交集。</span></span><br><span class="line">numbers1.ExceptWith(numbers2);<span class="comment">//求两个集合的差集。</span></span><br><span class="line">numbers1.SymmetricExceptWith(numbers2);<span class="comment">//求两个集合的对称差集。</span></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count <span class="comment">//获取集中包含的元素数</span></span><br><span class="line">Comparer <span class="comment">//获取用于确定集中的值是否相等的 IEqualityComparer&lt;T&gt; 对象</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add() <span class="comment">//将项目添加到HashSet之中</span></span><br><span class="line">Clear() <span class="comment">//清空HashSet里面的值</span></span><br><span class="line">Remove() <span class="comment">//从HashSet中移除值</span></span><br><span class="line">Contains() <span class="comment">//判断HashSet是否包含指定项目</span></span><br><span class="line">Equals(Object) <span class="comment">//判断是否相等</span></span><br></pre></td></tr></table></figure></div></div><h3 id="Queue、Queue"><a href="#Queue、Queue" class="headerlink" title="Queue、Queue"></a>Queue、Queue<t></t></h3><p>Queue队列，Queue<t>泛型队列，队列，先进先出</t></p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Dequeue()<span class="comment">//移除并返回位于 Queue&lt;T&gt; 开始处的对象</span></span><br><span class="line">Enqueue(T)<span class="comment">//将一个对象添加到 Queue&lt;T&gt; 的末尾</span></span><br><span class="line">Peek()<span class="comment">//返回位于 Queue&lt;T&gt; 开始处的对象但不将其移除</span></span><br></pre></td></tr></table></figure></div></div><h3 id="Stack、Stack"><a href="#Stack、Stack" class="headerlink" title="Stack、Stack"></a>Stack、Stack<t></t></h3><p>Stack堆栈，先进后出</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Pop()<span class="comment">//删除并返回 Stack&lt;T&gt; 顶部的对象</span></span><br><span class="line">Push(T)<span class="comment">//在 Stack&lt;T&gt; 的顶部插入一个对象</span></span><br><span class="line">Peek()<span class="comment">//返回位于 Stack&lt;T&gt; 顶部的对象但不将其移除</span></span><br><span class="line">TryPop(T)<span class="comment">//返回一个值，该值指示 Stack&lt;T&gt; 的顶部是否有对象；如果有，则将其复制到 result 参数，并从 Stack&lt;T&gt; 中删除它</span></span><br></pre></td></tr></table></figure></div></div><h3 id="SortedList、SortedList-lt-TKey-TValue-gt"><a href="#SortedList、SortedList-lt-TKey-TValue-gt" class="headerlink" title="SortedList、SortedList&lt;TKey,TValue&gt;"></a>SortedList、SortedList&lt;TKey,TValue&gt;</h3><p>SortedList集合中的数据是有序的。可以通过key来匹配数据，也可以通过int下标来获取数据<br>添加操作比ArrayList，Hashtable略慢；查找、删除操作比ArrayList快，比Hashtable慢</p><h3 id="SortedDictionary-lt-TKey-TValue-gt"><a href="#SortedDictionary-lt-TKey-TValue-gt" class="headerlink" title="SortedDictionary&lt;TKey,TValue&gt;"></a>SortedDictionary&lt;TKey,TValue&gt;</h3><p>SortedDictionary&lt;TKey,TValue&gt;相比于SortedList&lt;TKey,TValue&gt;其性能优化了，SortedList&lt;TKey,TValue&gt;其内部维护的是数组而SortedDictionary&lt;TKey,TValue&gt;内部维护的是红黑树(平衡二叉树)的一种，因此其占用的内存，性能都好于SortedDictionary&lt;TKey,TValue&gt;。唯一差在不能用下标取值</p><h3 id="ListDictionary-单向链表-LinkedList-双向链表"><a href="#ListDictionary-单向链表-LinkedList-双向链表" class="headerlink" title="ListDictionary(单向链表),LinkedList(双向链表)"></a>ListDictionary(单向链表),LinkedList<t>(双向链表)</t></h3><p>List<t>,ArrayList,Hashtable等容器类，其内部维护的是数组Array来，ListDictionary和LinkedList<t>不用Array，而是用链表的形式来保存。链表最大的好处就是节约内存空间<br>ListDictionary是单向链表<br>LinkedList<t>双向链表。双向链表的优势，可以插入到任意位置</t></t></t></p><h3 id="HybridDictionary"><a href="#HybridDictionary" class="headerlink" title="HybridDictionary"></a>HybridDictionary</h3><p>HybridDictionary的类，充分利用了Hashtable查询效率高和ListDictionary占用内存空间少的优点，内置了Hashtable和ListDictionary两个容器，添加数据时内部逻辑如下:<br>当数据量小于8时，Hashtable为null，用ListDictionary保存数据<br>当数据量大于8时，实例化Hashtable，数据转移到Hashtable中，然后将ListDictionary置为null</p><h3 id="BitArray"><a href="#BitArray" class="headerlink" title="BitArray"></a>BitArray</h3><p>BitArray用于二进制运算，”或”、”非”、”与”、”异或非”等这种操作，只能存true或false</p><h2 id="字符串动态匹配算法"><a href="#字符串动态匹配算法" class="headerlink" title="字符串动态匹配算法"></a>字符串动态匹配算法</h2><p>BF算法<br>RK算法<br>BM算法<br>KPM算法<br>Sunday算法</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>可理解为数列求通项过程<br>f(n) = f(n - 1) + f(n - 2)</p><h2 id="逻辑运算符短路效应"><a href="#逻辑运算符短路效应" class="headerlink" title="逻辑运算符短路效应"></a>逻辑运算符短路效应</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(A &amp;&amp; B)  <span class="comment">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A || B) <span class="comment">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;简介&lt;/center&gt;
记录刷题过程中遇到问题及新知识
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字符串匹配算法</title>
    <link href="https://silencejql.github.io/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.html"/>
    <id>https://silencejql.github.io/字符串匹配算法.html</id>
    <published>2020-06-19T10:28:52.000Z</published>
    <updated>2020-06-19T10:28:52.945Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><p>##</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>栈与队列Stack&amp;Queue</title>
    <link href="https://silencejql.github.io/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97Stack&amp;Queue.html"/>
    <id>https://silencejql.github.io/栈与队列Stack&amp;Queue.html</id>
    <published>2020-06-19T03:33:44.000Z</published>
    <updated>2020-06-19T04:03:45.472Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>线性表插入和删除操作不受限制 在任意位置进行<br>栈和队列是两种特殊的线性表。他们的数据元素之间具有顺序的逻辑关系，都采用顺序结构和链式结构存储</p><blockquote><p>栈的插入和删除操作只允许在线性表的尾端(栈顶Top)进行<br>队列插入操作限定在线性表的尾部而其它操作限定在表的头部进行</p></blockquote><p>栈的特点为后进先出，队列先进先出</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>表尾称为栈顶（Top）,另一端称为栈底（Bottom），当栈中没有数据元素时叫空栈（Empty Stack）<br>方法：</p><blockquote><p>Push（）入栈 //添加数据<br>Pop（）出栈 //删除数据，返回被删除的数据<br>Peek（）//取得栈顶的元素，不删除<br>ToArray() //方法创建数组并将堆栈元素复制到其中<br>Contains() //方法判断一个元素是否在栈中<br>Clear（）//清空所有数据<br>Count //取得栈中元素的个数</p></blockquote><p>接口定义：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStack</span>&#123;</span><br><span class="line"><span class="keyword">int</span> Count&#123;<span class="keyword">get</span>;&#125;<span class="comment">//求栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span>(<span class="params"></span>)</span>;<span class="comment">//求栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span>(<span class="params"></span>)</span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span>;<span class="comment">//清空操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span>(<span class="params">T item</span>)</span>;<span class="comment">//入栈操作</span></span><br><span class="line"><span class="function">T <span class="title">Pop</span>(<span class="params"></span>)</span>;<span class="comment">//出栈操作</span></span><br><span class="line"><span class="function">T <span class="title">Peek</span>(<span class="params"></span>)</span>;<span class="comment">//取栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的本质是一个线性表，线性表有两种存储形式，那么栈也有分为栈的顺序存储结构和栈的链式存储结构<br>用连续的存储空间来存储栈中的数据元素(使用数组)，这样的栈称为顺序栈(Sequence Stack)<br>类似于顺序表，用一维数组来存放顺序栈中的数据元素<br>栈顶指示器 top 设在数组下标为 0 的端，top随着插入和删除而变化，当栈为空时，top=-1</p><p>栈的另外一种存储方式是链式存储，这样的栈称为链栈(Linked Stack)<br>由于链栈的操作只是在一端进行，为了操作方便，把栈顶设在链表的头部，并且不需要头结点</p><p>示例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stack&lt;T&gt; staA = new Stack&lt;T&gt;();</span></span><br><span class="line">Stack&lt;<span class="keyword">string</span>&gt; staA = <span class="keyword">new</span> Stack&lt;<span class="keyword">string</span>&gt;();            </span><br><span class="line">staA.Push(<span class="string">"one"</span>);            </span><br><span class="line">staA.Push(<span class="string">"two"</span>);            </span><br><span class="line">staA.Push(<span class="string">"three"</span>);            </span><br><span class="line">staA.Push(<span class="string">"four"</span>);            </span><br><span class="line">staA.Push(<span class="string">"five"</span>);            </span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> a <span class="keyword">in</span> staA)<span class="comment">//遍历元素，将之变成string类型            </span></span><br><span class="line">&#123;                </span><br><span class="line">  Console.WriteLine(a);            </span><br><span class="line">&#125;             </span><br><span class="line"><span class="comment">//peek是把栈顶元素弹出（取出），但不删除            </span></span><br><span class="line">Console.WriteLine(<span class="string">"取出的元素是：&#123;0&#125;"</span>, staA.Peek());            </span><br><span class="line"><span class="comment">//pop是把栈顶的元素弹出（取出），并将其删除            </span></span><br><span class="line">Console.WriteLine(<span class="string">"删除的栈顶元素是：&#123;0&#125;"</span>,staA .Pop ());             </span><br><span class="line"><span class="comment">//此时再输出一次栈的元素，会发现five被删除了            </span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> b <span class="keyword">in</span> staA)            </span><br><span class="line">&#123;                </span><br><span class="line">  Console.ForegroundColor = ConsoleColor.Blue;                </span><br><span class="line">  Console.WriteLine(b);            </span><br><span class="line">&#125;             </span><br><span class="line"><span class="comment">//ToArray从栈底到栈顶将一个栈复制到另一个栈中            </span></span><br><span class="line">Stack&lt;<span class="keyword">string</span>&gt; staB = <span class="keyword">new</span> Stack&lt;<span class="keyword">string</span>&gt;(staA.ToArray());            </span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> c <span class="keyword">in</span> staB)            </span><br><span class="line">&#123;                </span><br><span class="line">  Console.ForegroundColor = ConsoleColor.Cyan;                </span><br><span class="line">  Console.WriteLine(c);            </span><br><span class="line">&#125;             </span><br><span class="line">Console.WriteLine(<span class="string">" "</span>);            </span><br><span class="line">Console.ForegroundColor = ConsoleColor.DarkRed;            </span><br><span class="line"><span class="comment">//contains方法，判断一个元素是否在栈中            </span></span><br><span class="line">Console.WriteLine(<span class="string">"six是否在栈中？"</span>);            </span><br><span class="line">Console.WriteLine(staA .Contains (<span class="string">"six"</span>));</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>插入操作的表尾称为队尾(Rear)，把进行其它操作的头部称为队头(Front)。当队列中没有数据元素时称为空队列(EmptyQueue)<br>方法：</p><blockquote><p>Enqueue() 入队（放在队尾）<br>Dequeue() 出队（移除队首元素，并返回被移除的元素）<br>Peek() 取得队首的元素，不移除<br>Clear() 清空元素</p></blockquote><p>接口定义：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface IQueue&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">int</span> Count&#123;<span class="keyword">get</span>;&#125;<span class="comment">//取得队列长度的属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span>(<span class="params"></span>)</span>;<span class="comment">//求队列的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span>(<span class="params"></span>)</span>;<span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span>;<span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span>(<span class="params">T item</span>)</span>;<span class="comment">//入队</span></span><br><span class="line"><span class="function">T <span class="title">Dequque</span>(<span class="params"></span>)</span>;<span class="comment">//出队</span></span><br><span class="line"><span class="function">T <span class="title">Peek</span>(<span class="params"></span>)</span>;<span class="comment">//取队头元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用连续的存储空间来存储队列中的数据元素，这样的队列称为顺序队列(SequenceQueue)<br>类似于顺序栈，用一维数组来存放顺序队列中的数据元素。队头位置设在数组下标为 0 的端，用 front 表示；队尾位置设在数组的另一端，用rear 表示<br>front 和 rear 随着插入和删除而变化。当队列为空时， front=rear=-1</p><p>队列的另外一种存储方式是链式存储，这样的队列称为链队列(LinkedQueue)<br>由于链队列的操作只是在一端进行，为了操作方便，把队头设在链表的头部，并且不需要头结点</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hashmap、Hashtabel、Dictionary</title>
    <link href="https://silencejql.github.io/Hashmap%E3%80%81Hashtabel%E3%80%81Dictionary.html"/>
    <id>https://silencejql.github.io/Hashmap、Hashtabel、Dictionary.html</id>
    <published>2020-06-18T01:58:07.000Z</published>
    <updated>2020-06-19T04:10:51.980Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>参考：https://blog.csdn.net/woshimaxiao1/article/details/83661464<a id="more"></a><h2 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a>Hashmap</h2><p>HashMap是Java 1.2引进的Map接口的一个实现，c#中无HashMap</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>  采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(logn)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</p><h3 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h3><p>  对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>  对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(logn)。</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>  相比上述几种数据结构，在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)。<br>  当要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作。<br>  <strong>存储位置 = 哈希函数f(关键字)</strong></p><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><p>两个不同的元素，通过哈希函数得出的实际存储地址相同<br>HashMap采用了链地址法，也就是数组+链表的方式解决哈希冲突<br>HashMap数组的每一个元素不止是一个Entry对象，也是一个链表的头节点。每一个Entry对象通过Next指针指向它的下一个Entry节点。当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可<br>HashMap可以简单理解为由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的</p><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p>哈希表（HashTable）又叫做散列表，是根据关键码值（即键值对）而直接访问的数据结构。也就是说，它通过把关键码映射到表中一个位置来访问记录，以加快查找速度，Hashtable是基于Dictionary类的</p><h2 id="Hashtable-与-Hashmap区别"><a href="#Hashtable-与-Hashmap区别" class="headerlink" title="Hashtable 与 Hashmap区别"></a>Hashtable 与 Hashmap区别</h2><h3 id="Hashtable-1"><a href="#Hashtable-1" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化<br>初始size为11，扩容：newsize = olesize*2+1<br>计算index的方法：index = (hash &amp; 0x7FFFFFFF) % tab.length</p><h3 id="Hashmap-1"><a href="#Hashmap-1" class="headerlink" title="Hashmap"></a>Hashmap</h3><p>底层数组+链表实现，可以存储null键和null值，线程不安全<br>初始size为16，扩容：newsize = oldsize*2，size一定为2的n次幂<br>扩容针对整个Map，每次扩容时，原来数组中的元素依次重新计算存放位置，并重新插入<br>插入元素后才判断该不该扩容，有可能无效扩容（插入后如果扩容，如果没有再次插入，就会产生无效扩容）<br>当Map中元素总数超过Entry数组的75%，触发扩容操作，为了减少链表长度，元素分配更均匀<br>计算index方法：index = hash &amp; (tab.length – 1)</p><h2 id="HashTable和Dictionary区别"><a href="#HashTable和Dictionary区别" class="headerlink" title="HashTable和Dictionary区别"></a>HashTable和Dictionary区别</h2><p>  HashTable不支持泛型，而Dictionary支持泛型。<br>  Hashtable 的元素属于 Object 类型，所以在存储或检索值类型时通常发生装箱和拆箱的操作，所以你可能需要进行一些类型转换的操作，而且对于int,float这些值类型还需要进行装箱等操作，非常耗时。<br>  单线程程序中推荐使用 Dictionary, 有泛型优势, 且读取速度较快, 容量利用更充分。多线程程序中推荐使用 Hashtable, 默认的 Hashtable 允许单线程写入, 多线程读取, 对 Hashtable 进一步调用 Synchronized() 方法可以获得完全线程安全的类型. 而 Dictionary 非线程安全, 必须人为使用 lock 语句进行保护, 效率大减。<br>  在通过代码测试的时候发现key是整数型Dictionary的效率比Hashtable快，如果key是字符串型，Dictionary的效率没有Hashtable快。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
参考：https://blog.csdn.net/woshimaxiao1/article/details/83661464
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动态EV(ETP)测试</title>
    <link href="https://silencejql.github.io/%E5%8A%A8%E6%80%81EV(ETP)%E6%B5%8B%E8%AF%95.html"/>
    <id>https://silencejql.github.io/动态EV(ETP)测试.html</id>
    <published>2020-06-05T07:31:43.000Z</published>
    <updated>2020-06-07T05:13:33.572Z</updated>
    
    <content type="html"><![CDATA[<center>说明</center>动态EV或ETP工位简单说明<a id="more"></a><p>新版本ETP测试工况分四部分：加速、匀速、滑行、制动<br>测试内容除了基本电流电压等BMS数据读取还包括各阶段的效率及能量消耗率的计算等</p><h2 id="程序配置"><a href="#程序配置" class="headerlink" title="程序配置"></a>程序配置</h2><p>最新程序增加是否为同轴滚筒的配置：在EvDynamicTestCurve.xml中isCoaxial配置为true表示为同轴滚筒<br>非同轴滚筒计算时F为左右滚筒的合力</p><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p>加速、匀速过程中电能转化为动能，效率计算公式为 <strong>Fvt/UIt</strong><br>滑行、制动过程中动能转化为电能，效率计算公式为 <strong>UIt/Fvt</strong><br>其中F、v、U、I均为各阶段的平均值</p><h3 id="能量消耗率"><a href="#能量消耗率" class="headerlink" title="能量消耗率"></a>能量消耗率</h3><p>C = E/D 单位为(kW<em>h)/100km<br>程序中的计算公式为：整个过程中的平均100</em>UIt/d</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于I为负数时表示放电加速所以计算时简单处理为<br>I为负：效率 = Fvt/UIt<br>I为正：效率 = UIt/Fvt</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;说明&lt;/center&gt;
动态EV或ETP工位简单说明
    
    </summary>
    
      <category term="工作" scheme="https://silencejql.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>PostgreSQL数据库</title>
    <link href="https://silencejql.github.io/PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
    <id>https://silencejql.github.io/PostgreSQL数据库.html</id>
    <published>2020-05-27T06:53:36.000Z</published>
    <updated>2020-07-09T11:11:06.314Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>BBK设备数据库常用操作说明<a id="more"></a><h2 id="新增数据表"><a href="#新增数据表" class="headerlink" title="新增数据表"></a>新增数据表</h2><p>创建脚本修改字段和表名<br>打开数据表所在路径：<br><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/TablePath.png" alt></p><p>更改图中相应字段表名后点击黑色方框中的执行按钮并确认输出窗口为成功即可<br><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/CreatTableScript.png" alt></p><p><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/TableScript.png" alt></p><h2 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h2><p>当保存数据时Systemerror.log中存在警告缺少字段是可在数据库中新增缺少的字段<br><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/MissField.png" alt></p><p>图中Miss Field List:后面就是数据库中缺少的字段名</p><h3 id="创建脚本新增字段"><a href="#创建脚本新增字段" class="headerlink" title="创建脚本新增字段"></a>创建脚本新增字段</h3><p><img src="PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/CreatFieldScript.png" alt></p><p>如下所示，新增字段并根据需要更改字段长度即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Column: "前轮侧滑"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE public."侧滑表" DROP COLUMN "前轮侧滑";</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> public.<span class="string">"侧滑表"</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">"新增字段1"</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> public.<span class="string">"侧滑表"</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">"新增字段2"</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> public.<span class="string">"侧滑表"</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">"新增字段3"</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
BBK设备数据库常用操作说明
    
    </summary>
    
      <category term="PostgreSQL" scheme="https://silencejql.github.io/categories/PostgreSQL/"/>
    
    
  </entry>
  
  <entry>
    <title>BBK检测线联网</title>
    <link href="https://silencejql.github.io/BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91.html"/>
    <id>https://silencejql.github.io/BBK检测线联网.html</id>
    <published>2020-05-24T01:50:22.000Z</published>
    <updated>2020-05-24T02:58:59.424Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>检测线联网相关的基本配置说明<a id="more"></a><h2 id="设备设置"><a href="#设备设置" class="headerlink" title="设备设置"></a>设备设置</h2><p>1、设备及服务器安装好运行环境<br>2、关闭防火墙<br>3、分配IP<br>4、保证工位与服务器相互可以Ping通</p><h2 id="工位配置"><a href="#工位配置" class="headerlink" title="工位配置"></a>工位配置</h2><h3 id="PostgreSQL配置"><a href="#PostgreSQL配置" class="headerlink" title="PostgreSQL配置"></a>PostgreSQL配置</h3><p>打开PostgreSQL菜单：工具-服务器配置-pg_hba.conf<br>新增如图配置后保存<br><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/Postgreconfi.png" alt></p><h3 id="BBK软件配置"><a href="#BBK软件配置" class="headerlink" title="BBK软件配置"></a>BBK软件配置</h3><p>1、确认流程中有初始化联网步骤，一般在Init_InitConst中一般命名为InitNet<br><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/InitNet.png" alt></p><p>2、确认流程中有上图中的红框中的设备号、线号的步骤<br>若没有可参考带有初始化联网的程序进行添加<br>3、打开BBK软件在菜单中配置<em>线号、设备号、服务器IP</em><br><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/BBKConfig.png" alt></p><h2 id="服务器软件配置"><a href="#服务器软件配置" class="headerlink" title="服务器软件配置"></a>服务器软件配置</h2><p>打开服务软件所在文件夹中Set.mdb数据库进行服务器联网配置</p><h3 id="StationConfig"><a href="#StationConfig" class="headerlink" title="StationConfig"></a>StationConfig</h3><p><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/StationConfig.png" alt></p><p>该表中每一行代表一个工位<br><strong>字段说明：</strong></p><blockquote><p>DeviceID：对应工位配置的设备号DeviceID<br>Describe：用于服务器显示的设备描述<br>LineID：对应工位配置的线号LineID<br>IPAdsress：工位IP<br>StationNo：用于服务器显示工位顺序<br>StationUpload：设置当前工位需要上传的表名 <strong>逗号为英文字符</strong></p></blockquote><h3 id="车辆查看配置"><a href="#车辆查看配置" class="headerlink" title="车辆查看配置"></a>车辆查看配置</h3><p><img src="BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91/ViewConfig.png" alt></p><p>改表为显示测试数据页面的相关配置，根据需求进行相应配置即可</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
检测线联网相关的基本配置说明
    
    </summary>
    
      <category term="工作" scheme="https://silencejql.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>BBKTimeLock</title>
    <link href="https://silencejql.github.io/BBKTimeLock.html"/>
    <id>https://silencejql.github.io/BBKTimeLock.html</id>
    <published>2020-05-11T08:04:37.000Z</published>
    <updated>2020-07-10T06:29:10.298Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read！" />    <label for="pass">Enter password to read！</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      交钱！
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BBK软件设置密码方法</title>
    <link href="https://silencejql.github.io/BBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95.html"/>
    <id>https://silencejql.github.io/BBK软件设置密码方法.html</id>
    <published>2020-05-09T02:15:29.000Z</published>
    <updated>2020-05-09T02:36:16.050Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>BBK软件设置密码方法<a id="more"></a><h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><p>在Bin文件夹中找到LoginLock.Lock文件，将其复制到C盘根目录下<br>若无此文件可新建文本文档后另存为此名称，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SuperAccount = &quot;BBKTSTSYS&quot;;</span><br><span class="line">SuperPassword = &quot;ZMY20140527&quot;;</span><br></pre></td></tr></table></figure><p>均为英文字符</p><h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><p>编辑方式打开设备程序使用的always文件(桌面快捷方式对应文件)<br>1、双击打开组合列表中Always下的InitForm组合<br>2、双击打开Menu，点击HELP进入菜单编辑界面<br>3、选择需要设置密码的菜单项及子项后，选择右侧<strong><em>需要权限</em></strong>,权限0为不需要权限，不同应权限可设置相应密码<br>0~9为权限等级，高等级可访问低等级权限，比如权限9可访问所有内容<br>4、更改完成后依次点击保存后退出</p><h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><h3 id="设置权限密码"><a href="#设置权限密码" class="headerlink" title="设置权限密码"></a>设置权限密码</h3><p>双击打开always程序，点击左上角登录弹出如下界面</p><p><img src="BBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95/Login.png" alt></p><p>输入管理员账号后点击<strong><em>设置</em></strong>进行账户管理<br>SuperAccount = “BBKTSTSYS”<br>SuperPassword = “ZMY20140527”</p><p><img src="BBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95/Account.png" alt></p><p>设置完成后便可登录相应等级账户</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
BBK软件设置密码方法
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VCU</title>
    <link href="https://silencejql.github.io/VCU.html"/>
    <id>https://silencejql.github.io/VCU.html</id>
    <published>2020-04-22T04:13:02.000Z</published>
    <updated>2020-04-22T06:44:11.890Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="协议需求"><a href="#协议需求" class="headerlink" title="协议需求"></a>协议需求</h2><p>CANID：</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>预充截止电压PreChargeVoltageGetTest：      (D01E- Battery External Voltage电池包外侧总电压)<br>绝缘电阻InsulationResistanceGetTest：      (D01C- Battery Insulation Resistance电池包的绝缘值)<br>电池静态温度BatteryTemperatureRiseTestT1：  (D02B- Battery Average Temperature电池温升)</p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>MCU转速MCUSpeedGetTest：                   (电机当前转速D034- Motor Actual Speed)<br>MCU温度MCUTempretureGetTest：D061         (MCU温度D02E- Inverter Actual Temperature)<br>电机温度MotorTempretureGetTest：C952        (电机温度D036- Motor Actual Temperature)<br>放电电流BatteryTotalCurrentTest：D030        (充电电流D027- Battery Total Current充电时电流为负值)<br>电池温升BatteryTemperatureRiseTestT2：D047    (D02B- Battery Average Temperature电池温升)<br>车速传感器SpeedSensorGetTest：<br>判断制动踏板ReadBrakeStatus：<br>刹车回馈电流FeedbackCurrentGetTest：D030     (D027- Battery Total Current回馈电流)</p><p>MCU转速与实际车速差值PreChargeVoltageGetTest：</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lambda Expressions</title>
    <link href="https://silencejql.github.io/lambda%20Expressions.html"/>
    <id>https://silencejql.github.io/lambda Expressions.html</id>
    <published>2020-04-10T03:57:41.000Z</published>
    <updated>2020-04-10T04:08:22.731Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center><a id="more"></a><h2 id="Expression-lambda"><a href="#Expression-lambda" class="headerlink" title="Expression lambda"></a>Expression lambda</h2><p>使用 lambda 声明运算符 =&gt; 从其主体中分离 lambda 参数列表。 若要创建 Lambda 表达式，需要在 Lambda 运算符左侧指定输入参数（如果有），然后在另一侧输入表达式或语句块。</p><p>任何 Lambda 表达式都可以转换为委托类型。 Lambda 表达式可以转换的委托类型由其参数和返回值的类型定义。如果 lambda 表达式不返回值，则可以将其转换为 Action 委托类型之一；否则，可将其转换为 Func 委托类型之一。 例如，有 2 个参数且不返回值的 Lambda 表达式可转换为 Action&lt;T1,T2&gt; 委托。 有 1 个参数且不返回值的 Lambda 表达式可转换为 Func&lt;T,TResult&gt; 委托。 以下示例中，lambda 表达式 x =&gt; x * x （指定名为 x 的参数并返回 x 平方值）将分配给委托类型的变量：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; square = x =&gt; x * x;</span><br><span class="line">Console.WriteLine(square(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 25</span></span><br></pre></td></tr></table></figure><p>仅当 lambda 只有一个输入参数时，括号才是可选的；否则括号是必需的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用空括号指定零个输入参数：</span></span><br><span class="line">Action line = () =&gt; Console.WriteLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 括号内的两个或更多输入参数使用逗号加以分隔：</span></span><br><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>&gt; testForEquality = (x, y) =&gt; x == y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时，编译器无法推断输入类型。 可以显式指定类型，如下面的示例所示：</span></span><br><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">string</span>, <span class="keyword">bool</span>&gt; isTooLong = (<span class="keyword">int</span> x, <span class="keyword">string</span> s) =&gt; s.Length &gt; x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入参数类型必须全部为显式或全部为隐式；</span></span><br></pre></td></tr></table></figure><h2 id="Statement-lambda"><a href="#Statement-lambda" class="headerlink" title="Statement lambda"></a>Statement lambda</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(input-parameters) =&gt; &#123; &lt;sequence-of-statements&gt; &#125;</span><br><span class="line"></span><br><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; func = (x, y)</span><br><span class="line">    =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作日志</title>
    <link href="https://silencejql.github.io/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97.html"/>
    <id>https://silencejql.github.io/工作日志.html</id>
    <published>2020-03-23T01:53:06.000Z</published>
    <updated>2020-07-28T06:33:17.118Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>记录所有项目工作日志以便查询，年份、项目号分类<a id="more"></a><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><h3 id="March3"><a href="#March3" class="headerlink" title="March3"></a>March3</h3><p>郑州日产登录工位偶发卡死现象处理<br>1、更改原有C++程序，在更新登录表处增加try…catch…<br>2、用新程序替换，程序中UDP更新服务器表格应在程序处理前</p><p>解决方式：更新登录表数据增加超时时间为0解决</p><p>金华零跑MES</p><h3 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h3><h4 id="青岛五菱"><a href="#青岛五菱" class="headerlink" title="青岛五菱"></a>青岛五菱</h4><p>双轴制动台改单轴测试小轴距E50ABS<br>现场制动台车型获取说明:扫完VIN后通过桌面上小黄车的软件从MES获取车型信息包括轴距、<strong>ABS类型</strong>等，调用的测试流程在SpecialNeed中进行判断赋值，车型库不需要手动维护，MES下载后自动维护。<br>现场更新不兼容程序有：</p><blockquote><p>CANCmdLib.dll<br>CanCmdOpraLib.dll 更改后100V车型K线通讯出现指令数据丢失<br>MBKDeviceWithOPC.dll 更新后无法控制滚筒转动</p></blockquote><p>E50ABS程序中读取DTC无法判断五菱现场的当前故障码</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
记录所有项目工作日志以便查询，年份、项目号分类
    
    </summary>
    
      <category term="工作" scheme="https://silencejql.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫基础</title>
    <link href="https://silencejql.github.io/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80.html"/>
    <id>https://silencejql.github.io/Python爬虫基础.html</id>
    <published>2020-03-05T04:04:12.000Z</published>
    <updated>2020-03-07T07:44:15.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>URL格式：<a href="http://host[:port][path]" target="_blank" rel="noopener">http://host[:port][path]</a><br>host：合法的Internet主机域名或IP地址<br>port：端口号，默认为80<br>path：请求资源的路径</p><h2 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h2><table><thead><tr><th>Urllib库</th><th>说明</th></tr></thead><tbody><tr><td>urllib.request</td><td>请求模块</td></tr><tr><td>urllib.error</td><td>异常处理模块</td></tr><tr><td>urllib.parse</td><td>url解析模块</td></tr><tr><td>urllib.robotparser</td><td>robots.txt解析模块</td></tr></tbody></table><p>urllib.request.urlopen(url,data=None,[timeout,]*,cafile=None,cadefault=False,context=None)</p><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url,params=<span class="literal">None</span>,**kwargs)</span><br></pre></td></tr></table></figure><table><thead><tr><th>Requests方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑以下各方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页，对应HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTMLheader，对应HTML的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求</td></tr><tr><td>requests.delete()</td><td>向HTML网页提交删除请求</td></tr></tbody></table><table><thead><tr><th>Requests对象属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求返回的状态，200连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，URL对应的页面内容</td></tr><tr><td>r.encoding</td><td>HTTP header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>内容中分析出的响应内容编码格式（备选编码格式）</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制格式</td></tr></tbody></table><p>r.encoding：如果header中不存在charset，则默认编码为ISO-8859-1(不支持解析中文)<br>将r.apparent_encoding设置为utf-8可解决上述可能出现乱码问题</p><h3 id="baidu搜索关键词"><a href="#baidu搜索关键词" class="headerlink" title="baidu搜索关键词"></a>baidu搜索关键词</h3><p>百度搜索关键词对应：wd=keyword</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kv = &#123;<span class="string">'wd'</span>:<span class="string">'Python'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">"http://www.baidu.com/s"</span>,params = kv)</span><br></pre></td></tr></table></figure><h3 id="通用代码框架"><a href="#通用代码框架" class="headerlink" title="通用代码框架"></a>通用代码框架</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    header = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">    r = requests.get(url,headers=header)</span><br><span class="line">    r.raise_for_status() <span class="comment">#如果状态不是200则引发HTTPError异常</span></span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"异常"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  url = <span class="string">"http://"</span></span><br><span class="line">  print(GetHTMLText(url))</span><br></pre></td></tr></table></figure><h2 id="信息标记形式"><a href="#信息标记形式" class="headerlink" title="信息标记形式"></a>信息标记形式</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>标签、属性、内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>有类型的键值对表示<br>无法注释</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"key":"value"</span><br><span class="line">"key":["value1","value2"]</span><br><span class="line">"key":&#123;"subkey":"subvalue"&#125;</span><br></pre></td></tr></table></figure><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>无类型键值对</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span><span class="string">value</span></span><br><span class="line"><span class="attr">key:</span><span class="comment">#comments</span></span><br><span class="line"><span class="bullet">-</span><span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span><span class="string">value2</span></span><br><span class="line"><span class="attr">key:</span></span><br><span class="line"><span class="attr">  subkey:</span><span class="string">subvalue</span></span><br></pre></td></tr></table></figure><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找单个元素</span></span><br><span class="line">first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)<span class="comment"># #表示id,.表示类,不加前缀表示标签</span></span><br><span class="line">third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(first,second,third)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 通用方法</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">common = browser.find_element(By.ID,<span class="string">'q'</span>)</span><br><span class="line">commons = browser.find_elements(By.ID,<span class="string">'q'</span>) <span class="comment"># 查找多个元素</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="元素交互"><a href="#元素交互" class="headerlink" title="元素交互"></a>元素交互</h3><h4 id="实现淘宝搜索功能"><a href="#实现淘宝搜索功能" class="headerlink" title="实现淘宝搜索功能"></a>实现淘宝搜索功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>) <span class="comment">#找到网页中搜索框对应的id</span></span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>) <span class="comment">#向搜索框中传递的参数</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'iPad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn_search'</span>) <span class="comment">#找到搜索按钮对应的name</span></span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="爬取图片、视频等"><a href="#爬取图片、视频等" class="headerlink" title="爬取图片、视频等"></a>爬取图片、视频等</h3><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">root = <span class="string">"D://Python//Pic"</span></span><br><span class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">    os.mkdir(root)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f</span><br><span class="line">      f.write(r.content)</span><br><span class="line">      f.close()</span><br><span class="line">      print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"文件已存在"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;&lt;p&gt;URL格式：&lt;a href=&quot;http://host[:port][path]&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络学习随记</title>
    <link href="https://silencejql.github.io/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0.html"/>
    <id>https://silencejql.github.io/网络学习随记.html</id>
    <published>2020-02-27T05:54:46.000Z</published>
    <updated>2020-02-28T07:20:53.947Z</updated>
    
    <content type="html"><![CDATA[<center>写在前面</center>应用层-表示层-会话层---HTTP/FTP/DNS/Telnet...传输层---TCP/UDP网络层---IP/ARP/ICMP/RARP数据链路层物理层<a id="more"></a><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>-Bit流  </p><h2 id="数据链路层-帧"><a href="#数据链路层-帧" class="headerlink" title="数据链路层 帧"></a>数据链路层 帧</h2><p>交换机 可识别MAC<br>FCS|Data|SIP|DIP|SMAC|DMAC</p><h2 id="网络层-包"><a href="#网络层-包" class="headerlink" title="网络层 包"></a>网络层 包</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>IP、ARP、ICMP、IGMP<br>路由器 可识别IP<br>Data|SIP|DIP</p><h4 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h4><p>ARP广播查询目标MAC地址<br>ipconfig /all查看网卡MAC<br>arp -a查询局域网内MAC<br><strong><em>ARP欺骗</em></strong><br>arp -s ip mac设置静态MAC(更改网络通讯中IP对应的MAC)<br>网卡属性中修复可重置</p><h4 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h4><p>PING-Packet Internet Grope因特网包探索器<br>ping局域网延迟一般小于10ms<br>TTL数据包生存周期，每过一个路由-1，防止网络回路<br>ping ip -i n 通过n值查看途经路由器IP<br>默认TTL：</p><blockquote><p>Linux : 64<br>Windows : 128<br>Unix : 255</p></blockquote><p>tracert ip 跟踪数据包路径<br>pathping 跟踪数据包路径，计算丢包情况</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>静态路由 管理员配置路径<br>动态路由 RIP协议 最大15级</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>netstat -n查看会话<br>netstat -nb查看会话及会话进程<br>netstat -an查看监听端口</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>16位<br>常用端口：0-1023<br>登机端口：1024-49151<br>客户端端口：49152-65535<br>常见应用层协议端口</p><table><thead><tr><th>协议</th><th>端口</th></tr></thead><tbody><tr><td>http</td><td>TCP:80</td></tr><tr><td>https</td><td>TCP:443</td></tr><tr><td>ftp</td><td>TCP:21</td></tr><tr><td>RDP</td><td>TCP:3389  远程桌面</td></tr><tr><td>SMTP</td><td>TCP:25</td></tr><tr><td>POP3</td><td>TCP:110</td></tr><tr><td>Telnet</td><td>TCP:23</td></tr><tr><td>SQL</td><td>TCP:1433</td></tr><tr><td></td><td></td></tr><tr><td>DNS</td><td>UDP:53(一般)</td></tr></tbody></table><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>socket=IP:Port</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>设置开/关机/登录启动脚本<br>gpedit.msc</p><div><div class="fold_hider"><div class="close hider_title">展开/折叠示例</div></div><div class="fold"></div></div>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;写在前面&lt;/center&gt;
应用层-表示层-会话层---HTTP/FTP/DNS/Telnet...
传输层---TCP/UDP
网络层---IP/ARP/ICMP/RARP
数据链路层
物理层
    
    </summary>
    
    
  </entry>
  
</feed>
